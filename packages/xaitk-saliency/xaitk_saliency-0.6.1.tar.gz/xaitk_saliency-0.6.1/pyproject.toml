[build-system]
requires = ["poetry-core>=1.0.8"]
build-backend = "poetry.core.masonry.api"

###############################################################################
[tool.poetry]
name = "xaitk_saliency"
# REMEMBER: `distutils.version.*Version` types can be used to compare versions
# from strings like this.
# This package prefers to use the strict numbering standard when possible.
version = "0.6.1"
description = """\
    Visual saliency map generation interfaces and baseline implementations \
    for explainable AI."""
license = "BSD-3-Clause"
authors = ["Kitware, Inc. <xaitk@kitware.com>"]
readme = "README.md"
repository = "https://github.com/XAITK/xaitk-saliency"
documentation = "https://xaitk-saliency.readthedocs.io/"
classifiers = [
        'Development Status :: 3 - Alpha',
        'Intended Audience :: Developers',
        'Intended Audience :: Science/Research',
        'License :: OSI Approved :: BSD License',
        'Operating System :: MacOS :: MacOS X',
        'Operating System :: Unix',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
]

[tool.poetry.dependencies]
python = ">=3.7,<3.10"
numpy = "^1.20.3"
scikit-image = "^0.18.1"
scikit-learn = "^0.24.2"
smqtk-classifier = ">=0.17.0"
smqtk-core = ">=0.18.0"
smqtk-descriptors = ">=0.16.0"
smqtk-detection = ">=0.18.1"
scipy = "^1.6.3"
click = "^8.0.3"
# Optionals for "example" extra
jupyter = { version = "^1.0.0", optional = true }
matplotlib = { version="^3.4.1", optional = true }
papermill = { version = "^2.3.3", optional = true }
torch = { version = "^1.9.0", optional = true }
torchvision = { version = "^0.10.0", optional = true }
tqdm = { version = "^4.45.0", optional = true }
# Optionals for "tools" extra"
kwcoco = { version = "~0.2.18", optional = true}

[tool.poetry.extras]
example_deps = [ "jupyter", "matplotlib", "papermill", "torch", "torchvision", "tqdm" ]
tools = [ "kwcoco" ]

[tool.poetry.dev-dependencies]
# CI
flake8 = "^3.9.0"
flake8-mutable = "^1.2.0"
mypy = ">=0.812"
types-setuptools = "^57.0.0"
# Docs
# - Also see: `docs/readthedocs-reqs.txt` for use by RTD
Sphinx = "^3.5.3"
sphinx-rtd-theme = "^0.5.1"
sphinx-prompt = "^1.4.0"
livereload = "^2.6.3"
# Testing
coverage = "^5.5"
pytest = "^6.2.2"
pytest-cov = "^2.11.1"
# Utility
ipython = "^7.31.1"

[tool.poetry.scripts]
sal-on-coco-dets= "xaitk_saliency.utils.bin.sal_on_coco_dets:sal_on_coco_dets"

[tool.poetry.plugins."smqtk_plugins"]
# Add implementation sub-module exposure here.
"impls.perturb_image.sliding_window" = "xaitk_saliency.impls.perturb_image.sliding_window"
"impls.perturb_image.rise" = "xaitk_saliency.impls.perturb_image.rise"
"impls.perturb_image.random_grid" = "xaitk_saliency.impls.perturb_image.random_grid"
"impls.perturb_image.sliding_radial" = "xaitk_saliency.impls.perturb_image.sliding_radial"
"impls.gen_classifier_conf_sal.occlusion_scoring" = "xaitk_saliency.impls.gen_classifier_conf_sal.occlusion_scoring"
"impls.gen_classifier_conf_sal.rise_scoring" = "xaitk_saliency.impls.gen_classifier_conf_sal.rise_scoring"
"impls.gen_descriptor_sim_sal.similarity_scoring" = "xaitk_saliency.impls.gen_descriptor_sim_sal.similarity_scoring"
"impls.gen_image_classifier_blackbox_sal.occlusion_based" = "xaitk_saliency.impls.gen_image_classifier_blackbox_sal.occlusion_based"
"impls.gen_image_classifier_blackbox_sal.rise" = "xaitk_saliency.impls.gen_image_classifier_blackbox_sal.rise"
"impls.gen_detector_prop_sal.drise_scoring" = "xaitk_saliency.impls.gen_detector_prop_sal.drise_scoring"
"impls.gen_object_detector_blackbox_sal.drise" = "xaitk_saliency.impls.gen_object_detector_blackbox_sal.drise"
"impls.gen_object_detector_blackbox_sal.occlusion_based" = "xaitk_saliency.impls.gen_object_detector_blackbox_sal.occlusion_based"
"impls.gen_image_similarity_blackbox_sal.occlusion_based" = "xaitk_saliency.impls.gen_image_similarity_blackbox_sal.occlusion_based"
"image.gen_image_similarity_blackbox_sal.sbsm" = "xaitk_saliency.impls.gen_image_similarity_blackbox_sal.sbsm"
###############################################################################
[tool.pytest.ini_options]
addopts = [
    "-lv",                      # Show local in trace-backs.
    "--doctest-modules",        # Increased verbosity.
    "--tb=long",                # Trace-back print mode.
    "--cov=./xaitk_saliency",   # Cover our package specifically
    "--cov=./tests",            # Also cover our tests for dead spots
    "--cov-report=term",        # Coverage report to terminal
    "--cov-report=xml:coverage.xml",    # for external tool reporting
]
testpaths = [
    "tests",
    "xaitk_saliency",
]
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
]
