#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 14 15:54:49 2022

@author: emilydu
"""

__version__ = '0.0.1'



import math
import numpy as np
from numpy import loadtxt

import pandas as pd
from ml_eis import *
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib.widgets import Slider

# import PySimpleGUI as sg
import PySimpleGUI as sg
import matplotlib.figure
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
matplotlib.use("TkAgg")

#Decide theme of windows
sg.theme('LightGrey2')


#imagefile = b''
image = b''
imagefile = b'iVBORw0KGgoAAAANSUhEUgAAAC0AAAA8CAYAAADykDOkAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH5gYIEQEVLx+TnQAADCNJREFUaN7tmlusXFd5x3/fWmvPnplz9Rzfkzh24kBKyAUcAgWaqNCmlSIeGgkUWoraol4QlN5Ek/ahINpCilr1pVVpq6qCCvqSikgNorQPKIIEIlBo3MTkYvs4x8H28ZlzmzMz+7bW+vqw5zgpcexzHNvpQz5pNJqZvdf6rW9/l/9aGnjdLo/JxRikrEqMtfTnF23wKu3OVPCV14np8f8/0Hl3wNrJeUySNCn9zar6TlT3C2wHLCqLKvoMIo/hzA9spv1iq7Bz797XBnrh0DGwxknh30XQj4rqzwIdEEQAEVQVVQWlh/AdMfJP2jBfE6/DtW2wd9c1lw+6e3AWrJmm8p8k6m8J0jHOYpIEcYKIYBoOMYboPSGvCHmJhphh5AG18mlbcTSfEnbt33fpobsHj4LIdnz8vEQ+ZBJrbdrAJLYeRgAUkyYYZ1EBUYilp+pn+GGBoo+oMb9pQnxqsHuCPbt2XBC02chFC0/Oos6M4eOfi/JhmybWtdMaeH3ZqogRxBq05kcBSR2NzgTp9Dgi5l0S49+qM3va84ML9vR5oU8/exzXHSBl+BCqv2ycFYBqkKMhgtaxbBKHSRvUgf0S0/rNjTdJJ9sIcgdR7/VNSU4/efTSQEte4jvtvUT9bWNMKtYQyqpmMyPg1GFSB+aVo00BO97ENhOI+ouuiHeYMrAyN39xoReePobLAhLi3QI3GOeIlUeswbVbiDFIYhFn1x16ntmEZKKNMWaawK/68WZS9fOLC+2iwGTaEuVOMfWlGiMubSBWECOYxG0MeORu20gwaQKqt7usukaqcHGhY1Ri0G0g14mxqEZEDOJsffNLE3Gj3EawaQKwQ5TbfNs2uydOS/f4qYsDrSGgMWwH7YgRNOqZOBYRWK8Um7EQiaVHINEQ77dr1TeYX/scS8Nbuk/PmYWnjr06aAAR0wYSRHiRUF7y2qSnoxJ9wDQcrtXY7RrudoF7CfEhyaqPSGJt9zzg7py/RlC0ECWIgLGmbs9Qt+oYEbuhUv+il5yhuXWyXq8xECOx8JS9wRWx9J9jWJ4Urw/NP/M8O9549QV4ui5hy0Bfo+LaTVy7WU+ooKVHdBMB8pKFygi4XBkQfaA5PY44M0PU348tN22qVx73nNBiLWLNvArHow+oD/Vko7DQUD/qDVmMhKzEZyWhqM50zegDZW+AAq7VBOVt4uMt+Lh56MWnjqFOGzGEuwSu1BCohjkawktCWevkPI8JtQbREOuw8qFu+86SjLUgKqGs41xgHNVr5BzOOCt094fPo6lz5OH3jNe/F2OusGkD105HMay1GhIwxoy0ktavHwcWCEVJsdyvGxOjfAgBohLLavRUDaJnFnlOT7wsEVfnu1QvrIALd0rU+4y1426shbj19b04nkksklg0BKpBAQKulZ6p42euVkFDJFYBkzgQCIXH+4JqkGPTBNdMKFeHKKyJcARnNg5ddfvoWNKUzP8GmGnbTmtgrT2rCmIF23CItfWjLTx+kNcdz9kaTPXM8mQkomLlid4hrp5Wo2IajmSyTawCPitAeESt/Pe5fP0yaAkgUa9S5YA4gziD6igpVBFrsM0GYgwaIsXS2pnvQ1FR9XM0KLaV1ItCCN6fCR0/LLBNxTiHcRaxlpBX+KwgxjCHkc+Shx6diY1Da4wAk6hOyHpDGZU4RDDOIaMtFarEqk4w10rRRAlFSchLXNUimWghRvDDvM4Bl4NvEIZKNGVdp0dlENXDWLl35pZrv7X4w+fZes3OjUNTV7Q+kYGqTq3HpKxHqBF0vU5HPZOAoaywzQbUYqj2fFYSy4pQVDVw0gfnwKfESohFha+GqJivNievuC/ruOfmnz7Gzuuv5lz2ck8ngoocNz4e1BB2E2KdWKMY0xAx1oIIVVYQY0RshQbFDxTjTO3BKoy0iyKuJNoeftijXFukXFvGZwNCVRB9qdG4f6fKn7351/6CjdjLoButFsVCb0jqvqQ+3h6yom3bTcSuu3cUm4Mc388QqaCxCtFBaBF9Qr1BBEwksky2dIxs5UeErA9icK0xmtPbqAYrDFdODTF2FpdsCPis0FN7d3L60DGila+aoDdHH35XB3lqGq4GjxCGJX5YEkNBCCexDQc2ILYEtaCWWGVkKy8wXJglxkg6tZXxndeQtCcxroGIYeXYQVBW1bgTbEIvnlUwbX/TXk4fPJzHRD5jKuaI4aMhC/sRSVEVjRUaM6ryBMEvk9gZ3NgkKqAhI18+Rf/ULKqBsa17aHV2Y9NWnQtQJ58GfD5ARRZw6eKGiTmHytt+036W/md2KA3zd9GHB6PqjSJ2ZtA9dGe++MyHXdNJY3wSUPxgGZuk+CqnN3cInw8Y27GX9tYrMY1Wzbm+PQdA6nORMkNEnmd8a8+G4tVDA3Ru3FfPByeAEz/44n0o8m0bqhtsltxqEodLx9AQGMzPMlj8ESZJ6ew/QDLRWXfrWceOviRWBSIyy2P/UsVb379h6E2J4Wzr9TTy3py65p+F6Fey5Xk0enwxpH/qKK7RonPtAZLJzgj2LMAi9QlUWRCDR9Uejlcd4Mb3feTSQL/zrl+hmNpDNb7za2oaf+OLYRgunWS4dALXHKM1vR00voJzDSiEbEC+fJp8dR5iLBA5LK6BSPPSQAMcuOdekmzZazr+1yr262V/GYD2ll2ICFV/CfUlL+rXWrBUa11WZw/SPfQIi08/Sv/kYRTW1LoT0TU2xbBpaAAz3cFk/SVs+ikVc6SuBrU+ib6k6q+MPguxKujNHWLx6e8yXHyBZGySqat+gkZ7CtAuYk+LcZub/0Kgb7rrYyRTOwgnHnscYz/vq7zIVxdQVQQI+Rox6xPyPitHHmcwf4xmZzcz1/8knTfcxtjOfXXXhFPW2N5lgQZ4092fQHbfRrTtL4P9Stlfpuwv1T+qki+dYOnZ7xHKnM51tzK972YaEx0whlAVhCIHZN5s2Vek41suDzTA4hs+jsRsEF3js4o8ka8uEIphXQIX5ghVwdS+m2l2do02yXWGxqog+grEzMWjD4Z8sLkT1FcF/TNv34aOX4Eddg9H6z4dgl/Jel3y1QVCVTLW2YWx7syxw7qFIkOjB8zR2LqSW+75g8sHDfCWuz9GNXkV5djuh9QkX6iGvVisLdKc6OCaY/jBCuor1g936g1yD1UtVczxyOYqx0WBBjjwwT+ikXW9JmN/pWK+oSg2adaQvsQPViAG8qWTLD3zXQanjiJCT0TmxNhNz3dRoAHM2Bak6HXVJPcrnMp7C0RfIgghX2PthWdYPvI4IR+MeqUs4pKuJOlrB33TL3yC2Jxi4er3f0vF/aUvhlW+uoASKfsrrJ08TDo5Q2f/rbikCXC8Ms0VL68hNMBbP/jHzMz9m4ak+Y9R7APlYJmit0S2uoBtNJnYuR+xCaHumEcP3POHWdoee22hAXw6g/VVD9v8VFSeyJZPEX1Ja2o7MZRUWY8YPIidfeIfPk46vf21h77tA7+DaU2hxcpz0TQ+E9GeMRbXaBLLnHJ1AdUY1JhZTca47o6NS9JLBg1w0wc+Ce0ZYmP8IRX75eArysEqaMRna6A6UMwcZvPl7pJBA7zll/6EJO+VBns/8Gi+uoDP+qNOyDJGTo70x6Ztc0rlLPbofz5MA0vWNo1hkTeNMS2gFWNMT6i6aBqxs/jEv7b6x986XD7ZVI0gchKbLl3onBf0L4RvP/Id2u2WLC4v74/oe1T1JpQ9im4DJkHaQFpvzRFR1cnVZztja8esaKRszswvb3/bA9G47xvh+4lzR1YHa9kt176Zq6/bc/Ghn5s9ypGjsxgx7wga/1lV33j+cQQbcjqLB2nmC/Qn9rKy5QYUjSJ0BXnMivypj/F7WyYmecfbbzvnaJsOqhgCRVmiqj+tqtdvbOFKsE16U9eRpzMUaWd9R2ZU2R5V3xei/vrPX/Fe1vrnV3ybhjbG0EgSBB4V5EnAb/TesjHN0tYD5K0d/NhG0iM8++Dz/4G159ciFxTT33z4YVJrpV9WVwaNP4XybtA3A1cCW4CWQnIWpyhIEChAM+A0Is8JfN2I+Yqqrv3ce99zaaD/zwL+65s0rJOhVGOqOhMjW8XIthjjFpBEjDgAVQ2q6o0xQ4N0UV02RhaMyNLa2mS1ZUuf2999+6vFed1et9ftctn/AqlobXWpwWRNAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIyLTA2LTA4VDE3OjAxOjIxLTA0OjAwftTPvQAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMi0wNi0wOFQxNzowMToyMS0wNDowMA+JdwEAAAAASUVORK5CYII='
icon = b''


# ------------------------------- Window1 CODE-----------------------------------------------------------      



def make_win1():

    buttons = [
        [sg.Button('Data Visualization', font='Any 13 bold'), sg.Button('Machine Learning Models',font='Any 13 bold'), sg.Button('Grade Classification',font='Any 13 bold')],
        [sg.T('')],
        [sg.Button('Exit', font='Any 13')]
        ]
    
    layout = [
        [sg.Text('Welcome to EIS CREAM',size=(50, 1), justification='center', font='Any 20 bold')],
              [sg.Text('Please select one to start:',  font='Any 14')],
              [sg.Column(buttons), sg.Image(image, k='-IMAGE-') ]
              ]
   
    window = sg.Window('EIS CREAM', layout, finalize=True, margins=(20, 20), resizable=True, icon=icon)

    
    return window




# ------------------------------- Window2 code -----------------------------------------------------------      

def make_win2():
    
    top_col = [
        [sg.T(
'''This program allows the user to plot three different forms of electrochemistry data. The ploted figure can 
then be adjusted and exported as needed. These are the supported file types:
    - Auto-lab EIS data
    - Battery cycling data''', font='Any 12')], 
        
    ]

                
    eis = [
        [sg.T('EIS', font = 'Any 16 bold')],
         [sg.T('Please select your input file (.txt):', font='Any 14'),sg.Input(size=(60,1), key = '-file_eis-'), sg.FileBrowse(font = 'Any 12 bold')],
         [sg.T('Please select one to plot:', font='Any 14'), sg.B('Static',font='Any 13 bold', key='Static EIS')],
         [sg.T(size=(5,2))]
        
        ]
    
    
    dqdv = [
        [sg.T('dQ/dV', font = 'Any 16 bold')],
             [sg.T('Please select your input file (.csv):', font='Any 14'),sg.Input(size=(60,1), key = '-file_dqdv-'), sg.FileBrowse(font='Any 12 bold')],
             [sg.T('Please select one to plot:', font='Any 14')],
             [sg.B('Static',font='Any 13 bold', key ='Static dQ/dV'), sg.B('Dynamic', font='Any 13 bold', key='Dynamic dQ/dV'), sg.B('Interactive',font='Any 13 bold', key='Interactive dQ/dV')]
             
        ]
    
  
    
    cycling = [
        [sg.T('Cycling', font = 'Any 16 bold')],
             [sg.T('Please select your input file (.csv):', font='Any 14'),sg.Input(size=(60,1),key = '-file_cycling-'), sg.FileBrowse(font='Any 12 bold')],
             [sg.T('Please select one to plot:', font='Any 14')],
             [sg.B('Static',font='Any 13 bold', key ='Static Cycling'), sg.B('Dynamic', font='Any 13 bold',key='Dynamic Cycling'), sg.B('Interactive',font='Any 13 bold', key='Interactive Cycling')]
             
        ]
    


    layout = [ 
        [sg.Text('Data Visualization', size=(45, 1), justification='center', font=('Any 20 bold')),sg.Image(imagefile, k='-IMAGE-')],top_col]
    layout +=[[sg.TabGroup([[  sg.Tab('EIS', eis, key='eis'),
                              sg.Tab('dQ/dV', dqdv, key='dqdv'),
                              sg.Tab('Cycling', cycling, key='cycling')]
                              ])],
              [sg.B('Exit',font='Any 12')] 
              ]
  

      
    layout[-1].append(sg.Sizegrip())
    window = sg.Window('EIS CREAM', layout, resizable=True, finalize = True, icon=icon)
    window.set_min_size(window.size)
    


    return window





# ------------------------------- Window3 code -----------------------------------------------------------      


def make_win3():
    
    Random = [
        [sg.T('Random Forest Regression', font='Any 16 bold')],
        [sg.T('''
The program will return a plot of predicted capacity retention, its mean absolute error (MAE) and the model’s R² value. 
The user can also get the capacity retention and mean absolute error (MAE) for any specific cycle number.
''', font='Any 13')],
        [sg.T('Please select your EIS file:', font='Any 14'),sg.Input(key = '-file-R-eis-'), sg.FileBrowse(font='Any 12 bold')],
        [sg.T('Please select your cycling file:', font='Any 14'),sg.Input(key = '-file-R-cycle-'), sg.FileBrowse(font='Any 12 bold')],
        [sg.T('N Estimators', font='Any 14'),sg.InputText('1', key='-R-estimators-'), sg.T('(Integer)')],
        [sg.T('Max features', font='Any 14'),sg.InputText('0.9', key='-R-features-'), sg.T('(0, 1)')], 
        [sg.T('Max depth', font='Any 14'),sg.InputText('1', key='-R-depth-'), sg.T('(Integer)')],
        [sg.T('Test size', font='Any 14'),sg.InputText('0.5', key='-R-size-'), sg.T('(0, 1)')],
        [sg.T('Cycle number', font='Any 14'),sg.InputText('1', key='-R-number-'), sg.T('(Integer)')],
        [sg.B('Calculate and Plot', font='Any 13 bold', key='R_plot')],
        [sg.Text('Capacity Retention:', font='Any 14 bold'), sg.Text(size=(50,1), font = 'Any 14 bold', text_color='#003366', key='-R-output-')],
        [sg.Text('Mean Absolute Error(MAE):', font='Any 14 bold'), sg.Text(size=(50,1), font = 'Any 14 bold', text_color='#003366', key='-R-error-')]
        
        
        ]
              
    
    
    NN = [
        [sg.T('Neural Network', font='Any 16 bold')],
        [sg.T('''The program will return a plot of predicted capacity retention, its mean absolute error (MAE) and the model’s R² value. 
The user can also get the capacity retention and mean absolute error (MAE) for any specific cycle number.''', font='Any 13')],
        [sg.T('Please select your EIS file:', font='Any 14'),sg.Input(key = '-file-N-eis-'), sg.FileBrowse(font='Any 12 bold')],
        [sg.T('Please select your cycling file:', font='Any 14'),sg.Input(key = '-file-N-cycle-'), sg.FileBrowse(font='Any 12 bold')],
        [sg.T('Hidden layer size', font='Any 14'),sg.InputText('1', key='-N-HL-'), sg.T('(Integer)')],
        [sg.T('Learning rate', font='Any 14'),sg.InputText('0.001', key='-N-rate-'), sg.T('(0, 1)')],
        [sg.T('Alpha', font='Any 14'),sg.InputText('0.0001', key='-alpha-'), sg.T('(0, 1)')],
        [sg.T('Maximum iteration', font='Any 14'),sg.InputText('200', key='-N-iter-'), sg.T('(Integer)')],
        [sg.T('Test size', font='Any 14'),sg.InputText('0.5', key='-N-size-'), sg.T('(0, 1)')],      
        [sg.T('Cycle number', font='Any 14'),sg.InputText('1', key='-N-number-'), sg.T('(Integer)')],
        [sg.B('Calculte and Plot',font='Any 13 bold', key='N_plot')],
        [sg.Text('Capacity Retention:', font='Any 14 bold'), sg.Text(size=(50,1), font = 'Any 14 bold', text_color='#003366', key='-N-output-')],
        [sg.Text('Mean Absolute Error(MAE):', font='Any 14 bold'), sg.Text(size=(50,1), font = 'Any 14 bold', text_color='#003366', key='-N-error-')]
        
        
        ]
              
              
    
    GDB = [
        [sg.T('Gradient Boosting Regression', font='Any 16 bold')],
        [sg.T('''The program will print out the capacity retention, average error, and model R².''', font='Any 13')],
        [sg.T('Please select your EIS file:', font='Any 14'),sg.Input(key = '-file-G-eis-'), sg.FileBrowse(font='Any 12 bold')],
        [sg.T('Please select your cycling file:', font='Any 14'),sg.Input(key = '-file-G-cycle-'), sg.FileBrowse(font='Any 12 bold')],
        [sg.T('N Estimators', font='Any 14'),sg.InputText('10',key='-G-estimators-'), sg.T('(Integer)')],
        [sg.T('Learning rate', font='Any 14'),sg.InputText('0.9',key='-G-rate-'), sg.T('(0, 1)')],
        [sg.T('Max depth', font='Any 14'),sg.InputText('1',key='-G-depth-'),sg.T('(Integer)')],
        [sg.T('Test size', font='Any 14'),sg.InputText('0.5', key='-G-size-'),sg.T('(0, 1)')],
        [sg.T('Cycle number', font='Any 14'),sg.InputText('1', key='-G-number-'),sg.T('(Integer)')],
        [sg.B('Calculate',font='Any 13 bold', key='G_plot')],
        [sg.Text('Capacity Retention:', font='Any 14 bold'), sg.Text(size=(50,1), font = 'Any 14 bold', text_color='#003366', key='-G-output-')],
        [sg.Text('Mean Absolute Error(MAE):', font='Any 14 bold'), sg.Text(size=(50,1), font = 'Any 14 bold', text_color='#003366', key='-G-error-')],
        [sg.Text('Model R²:', font='Any 14 bold'), sg.Text(size=(50,1), font = 'Any 14 bold', text_color='#003366', key='-G-r2-')]
        
        ]
    
    
    
    layout = [ 
        [sg.Text('Machine Learning', size=(55, 1), justification='center', font=('Any 20 bold'))],
        [sg.T('''User Instruction for Machine Learning:
- a EIS (.txt) and cycling data (.csv) first
- Input the desired hyperparameters and test size within the 44 battery cells
- Input the cycle number of interest
''', font=('Any 13'), size=(70, 4)),sg.Image(imagefile, k='-IMAGE-')]
            
        ]
      
      
      
    layout +=[[sg.TabGroup([[  sg.Tab('Random Forest', Random),
                              sg.Tab('Gradient Boosting', GDB),
                              sg.Tab('Neural Network', NN)]
                              ])],
            
              [sg.B('Exit')] 
        ]
    
    
    
    
    layout[-1].append(sg.Sizegrip())
    window = sg.Window('EIS CREAM', layout,  resizable=True, finalize = True, icon=icon)
    window.set_min_size(window.size)
    
    return window



# ------------------------------- Window4 code -----------------------------------------------------------      

def make_win4():
    layout = [
        [sg.Text('Grade Classification',size=(38, 1), justification='center', font='Any 20 bold'),sg.Image(imagefile, k='-IMAGE-')],
        [sg.T('''The battery grade is currently classified based on the following criteria:''', font=('Any 13'))],
        [sg.T('''                       Grading scale                  Capacity retention
                            Excellent                                 > 96%
                                   A                                       > 94%
                                   B                                       > 92%
                                   C                                       > 90%
                                Poor                                     <90%''',font=('Any 13'))],
        [sg.T('Please select your EIS file:', font='Any 14'),sg.Input(key = '-file-C-eis-'), sg.FileBrowse(font='Any 12 bold')],
        [sg.T('Please select your cycling file:', font='Any 14'),sg.Input(key = '-file-C-cycle-'), sg.FileBrowse(font='Any 12 bold')],
        [sg.B('Calculate', font='Any 13 bold')],
        [sg.Text('Grade:', font='Any 14 bold'), sg.Text(size=(30,1), font = 'Any 14 bold', text_color='#003366', key='-grade-')],
        [sg.Text('Capacity Retention after 300 cycles:', font='Any 14 bold'), sg.Text(size=(30,1), font = 'Any 14 bold', text_color='#003366', key='-C-output-')]
              ]
    
    
    window = sg.Window('EIS CREAM', layout, finalize=True, margins=(20, 20), icon=icon)
    window.set_min_size(window.size)
    
    return window



# ------------------------------- Main event loop -----------------------------------------------------------      

def main():
    
    window1, window2, window3, window4= make_win1(), None, None, None
    
    
    count_dqdv=0;
    count_cycle=0;


    while True:         
        window, event, values = sg.read_all_windows()
        
        if event == sg.WIN_CLOSED or event == 'Exit':
            window.close()
            
            if window == window2:      
                window2 = None
                
            if window ==window3:      
                window3 = None
                
            if window == window4:    
                window4 = None
                
            if window == window1:    
                break

#-------------------------------------WINDOW 2----------------------------------------------------------------      

        if event == 'Data Visualization' and not window2:
            window2 = make_win2()
            
        
        if window == window2:

            
#-------------------------------------EIS LOOP-----------------------------------------------------------------             
            if event == 'Static EIS':
                if values['-file_eis-']=='':
                        sg.popup('You need to select a file')
                        continue
                    
                if 'txt' not in values['-file_eis-']:
                        sg.popup('Error!',
                             'You need to upload a .txt file!', button_color='red')
                        window['-file_eis-'].update('')
                else:
                    
                    Nyquist_plot_UI(values['-file_eis-'])
          
#-------------------------------------dQ/dV LOOP-----------------------------------------------------------------        


##Static dQ/dV

                 
            if event == 'Static dQ/dV':
                if values['-file_dqdv-']=='':
                        sg.popup('You need to select a file')
                        continue
                    
                if 'csv' not in values['-file_dqdv-']:
                    window['-file_dqdv-'].update('')
                    sg.popup('Error!',
                             'You need to upload a .csv file!', button_color='red')
                else:
                    count_dqdv =count_dqdv + 1;
                    if count_dqdv == 1:
                        window.extend_layout(window['dqdv'], [[sg.T('Please input cycle number',font='Any 14'), sg.InputText('1', key='-number_dqdv-'), sg.B('Plot',font='Any 13', key='plot_dqdv')]])
                     
                
            if event == 'plot_dqdv':
                diff_cap(values['-file_dqdv-'], int(values['-number_dqdv-'])) 
                
             
# Dynamic dQ/dV               
               
            if event == 'Dynamic dQ/dV':
                if values['-file_dqdv-']=='':
                        sg.popup('You need to select a file')
                        continue
                if 'csv' not in values['-file_dqdv-']:
                    window['-file_dqdv-'].update('')
                    sg.popup('Error!',
                             'You need to upload a .csv file!', button_color='red')
                else:   
                    dynamic_dqdv(values['-file_dqdv-'])
                    
                    
# Interactive dQ/dV


            if event == 'Interactive dQ/dV':
                if values['-file_dqdv-']=='':
                        sg.popup('You need to select a file')
                        continue
                if 'csv' not in values['-file_dqdv-']:
                    window['-file_dqdv-'].update('')
                    sg.popup('Error!',
                             'You need to upload a .csv file!', button_color='red')
                else:   
                    interactive_dqdv(values['-file_dqdv-'])



#-------------------------------------CYCLING LOOP-----------------------------------------------------------------           

# Static cycling
   
            if event == 'Static Cycling':
                if values['-file_cycling-']=='':
                        sg.popup('You need to select a file')
                        continue
                if 'csv' not in values['-file_cycling-']:
                    window['-file_cycling-'].update('')
                    sg.popup('Error!',
                             'You need to upload a .csv file!', button_color='red')
                else:
                    count_cycle =count_cycle + 1;
                    if count_cycle == 1:
                        window.extend_layout(window['cycling'], [[sg.T('Please input cycle number',font='Any 14'), sg.I('1', key='-number_cycling-'), sg.B('Plot',font='Any 13', key='plot_cycling')]])
    
            if event == 'plot_cycling':
                cycling_CCCV(values['-file_cycling-'], int(values['-number_cycling-']))
                

# Dynamic cycling
                             
            elif event == 'Dynamic Cycling':
                if values['-file_cycling-']=='':
                        sg.popup('You need to select a file')
                        continue
                if 'csv' not in values['-file_cycling-']:
                    window['-file_cycling-'].update('')
                    sg.popup('Error!',
                             'You need to upload a .csv file!', button_color='red')
                else:
                    dynamic_cycling(values['-file_cycling-'])
                    

# Interactive cycling
    
            elif event == 'Interactive Cycling':
                if values['-file_cycling-']=='':
                        sg.popup('You need to select a file')
                        continue
                if 'csv' not in values['-file_cycling-']:
                    window['-file_cycling-'].update('')
                    sg.popup('Error!',
                             'You need to upload a .csv file!', button_color='red')
                else:
                    interactive_cycling(values['-file_cycling-'])
     
        
            
#------------------------------------WINDOW 3------------------------------------------------------------------                  
            
            
        if event == 'Machine Learning Models' and not window3:
            window3 = make_win3()
 
        
 
        if window == window3:


            
#-------------------------------------Random Forest-------------------------------------------------------------                      
            if event == 'R_plot':
                if values['-file-R-eis-'] =='' or values['-file-R-cycle-'] =='':
                        sg.popup('You need to select a file')
                        continue
                    
                if 'txt' not in values['-file-R-eis-'] and 'csv' not in values['-file-R-cycle-'] :
                        sg.popup('Error!',
                             '''Wrong file type: 
EIS data should be a .txt file!
Cycling data should be a .csv file!''', button_color='red')
                        window['-file-R-eis-'].update('')
                        window['-file-R-cycle-'].update('')
                        continue
                
                        
                if 'txt' not in values['-file-R-eis-'] and 'csv' in values['-file-R-cycle-']:
                        sg.popup('Error!',
                             'Wrong file type: EIS data should be a .txt file!', button_color='red')
                        window['-file-R-eis-'].update('')
                        continue
                        
                if 'txt' in values['-file-R-eis-'] and 'csv' not in values['-file-R-cycle-']:
                        sg.popup('Error!',
                             'Wrong file type: Cycling data should be a .csv file!', button_color='red')
                        window['-file-R-cycle-'].update('')
                        continue
                        
                else:
                    eis_file = values['-file-R-eis-']
                    cycling_file = values['-file-R-cycle-']
                    n = int(values['-R-estimators-'])
                    features = float(values['-R-features-'])
                    depth = int(values['-R-depth-'])
                    test_size=float(values['-R-size-'])
                    number = int(values['-R-number-'])
    
    
                    R_output,R_error=rdf_online(eis_file,cycling_file,n,features,depth,test_size, number)

                    window['-R-output-'].update(str(R_output)+'%')
                    window['-R-error-'].update(str(R_error)+'%')
                    rdf_online_plot(eis_file,cycling_file,n,features,depth,test_size, number)

 


                    
                        
#-------------------------------------Neuron Network-------------------------------------------------------------                      
            if event == 'N_plot':
                if values['-file-N-eis-']=='' or values['-file-N-cycle-'] =='':
                        sg.popup('You need to select a file')
                        continue
                    
                    
                    
                if 'txt' not in values['-file-N-eis-'] and 'csv' not in values['-file-N-cycle-'] :
                        sg.popup('Error!',
                             '''Wrong file type: 
EIS data should be a .txt file!
Cycling data should be a .csv file!''', button_color='red')
                        window['-file-N-eis-'].update('')
                        window['-file-N-cycle-'].update('')
                        continue
                
                        
                if 'txt' not in values['-file-N-eis-'] and 'csv' in values['-file-N-cycle-']:
                        sg.popup('Error!',
                             'Wrong file type: EIS data should be a .txt file!', button_color='red')
                        window['-file-N-eis-'].update('')
                        continue
                        
                if 'txt' in values['-file-N-eis-'] and 'csv' not in values['-file-N-cycle-']:
                        sg.popup('Error!',
                             'Wrong file type: Cycling data should be a .csv file!', button_color='red')
                        window['-file-N-cycle-'].update('')
                        continue
                    
                    
                else:
                    eis_file = values['-file-N-eis-']
                    cycling_file = values['-file-N-cycle-']
                    hl=int(values['-N-HL-'])
                    lr=float(values['-N-rate-'])
                    alpha=float(values['-alpha-'])
                    max_iter=int(values['-N-iter-'])
                    test_size=float(values['-N-size-'])
                    number = int(values['-N-number-'])
                    
                    
                    N_output,N_error=cap_ret_online_NN(eis_file,cycling_file, hl, lr, alpha, max_iter, test_size, number)
                    
                    window['-N-output-'].update(str(N_output)+'%')
                    window['-N-error-'].update(str(N_error)+'%')  
                    cap_ret_online_NN_plot(eis_file,cycling_file, hl, lr, alpha, max_iter, test_size, number)                 
                    
                        


                
#-------------------------------------Gradient Boosting-------------------------------------------------------------                      
 
                    
            if event == 'G_plot':
                if values['-file-G-eis-']=='' or values['-file-G-cycle-'] =='':
                        sg.popup('You need to select a file')
                        continue
                if 'txt' not in values['-file-G-eis-'] and 'csv' not in values['-file-G-cycle-'] :
                        sg.popup('Error!',
                             '''Wrong file type: 
EIS data should be a .txt file!
Cycling data should be a .csv file!''', button_color='red')
                        window['-file-G-eis-'].update('')
                        window['-file-G-cycle-'].update('')
                        continue
                
                        
                if 'txt' not in values['-file-G-eis-'] and 'csv' in values['-file-G-cycle-']:
                        sg.popup('Error!',
                             'Wrong file type: EIS data should be a .txt file!', button_color='red')
                        window['-file-G-eis-'].update('')
                        continue
                        
                if 'txt' in values['-file-G-eis-'] and 'csv' not in values['-file-G-cycle-']:
                        sg.popup('Error!',
                             'Wrong file type: Cycling data should be a .csv file!', button_color='red')
                        window['-file-G-cycle-'].update('')
                        continue
                    
                else:
                    eis_file = values['-file-G-eis-']
                    cycling_file = values['-file-G-cycle-']
                    n = int(values['-G-estimators-'])
                    rate = float(values['-G-rate-'])
                    depth = int(values['-G-depth-'])
                    test_size=float(values['-G-size-'])
                    number = int(values['-G-number-'])
                    
                    
                    g_output,g_r2,g_error=gbr_online(eis_file,cycling_file,n,depth,rate,test_size, number)
                
                    window['-G-output-'].update(str(g_output)+'%')
                    window['-G-error-'].update(str(g_error)+'%') 
                    window['-G-r2-'].update(str(g_r2)) 
  
                
  
#------------------------------------WINDOW 4------------------------------------------------------------------                  


        if event == 'Grade Classification' and not window4:
            window4 = make_win4()
         
            
        if window == window4:
            if event == 'Calculate':
                if values['-file-C-eis-']=='' or values['-file-C-cycle-'] =='':
                    sg.popup('You need to select a file')
                    continue
                
                if 'txt' not in values['-file-C-eis-'] and 'csv' not in values['-file-C-cycle-'] :
                        sg.popup('Error!',
                             '''Wrong file type: 
EIS data should be a .txt file!
Cycling data should be a .csv file!''', button_color='red')
                        window['-file-C-eis-'].update('')
                        window['-file-C-cycle-'].update('')
                        continue
                
                        
                if 'txt' not in values['-file-C-eis-'] and 'csv' in values['-file-C-cycle-']:
                        sg.popup('Error!',
                             'Wrong file type: EIS data should be a .txt file!', button_color='red')
                        window['-file-C-eis-'].update('')
                        continue
                        
                if 'txt' in values['-file-C-eis-'] and 'csv' not in values['-file-C-cycle-']:
                        sg.popup('Error!',
                             'Wrong file type: Cycling data should be a .csv file!', button_color='red')
                        window['-file-C-cycle-'].update('')
                        continue
                    
                else:
                    eis_file = values['-file-C-eis-']
                    cycling_file = values['-file-C-cycle-']
    
                    grade,C_output,C_error=battery_clf(eis_file,cycling_file)
                    
                    
                    window['-grade-'].update(grade)
                    window['-C-output-'].update(str(C_output)+'±'+str(C_error)+'%')
                
                
            
                
                
    window.close()


if __name__ == '__main__':
    main()
    
    
