{"version":3,"sources":["pages/RunDetail/RunOverviewTab/components/GitInfoCard/index.tsx","pages/RunDetail/RunOverviewTab/components/MetricsCard/RunOverviewTabMetricsCard.tsx","pages/RunDetail/RunOverviewTab/components/Packages/RunOverviewTabPackagesCard.tsx","pages/RunDetail/RunOverviewTab/components/ParamsCard/RunOverviewTabParamsCard.tsx","pages/RunDetail/RunOverviewTab/components/RunOverviewSidebar/RunOverviewSidebar.tsx","pages/RunDetail/RunOverviewTab/components/CLIArgumentsCard/RunOverviewTabCLIArgumentsCard.tsx","pages/RunDetail/RunOverviewTab/components/EnvVariablesCard/RunOverviewTabEnvVariablesCard.tsx","pages/RunDetail/RunOverviewTab/RunOverviewTab.tsx","pages/RunDetail/RunOverviewTab/index.tsx","components/CopyToClipBoard/CopyToClipBoard.tsx","components/CodeBlock/CodeBlock.tsx","pages/RunDetail/hooks/useRunMetricsBatch.tsx"],"names":["GitInfoCard","props","title","className","weight","tint","size","color","name","fontSize","data","branch","commit","author","hash","moment","timestamp","format","DATE_GIT_COMMIT","React","memo","RunOverviewTabMetricsCard","isLoading","runBatch","type","tableData","useMemo","map","index","values","context","key","isSystemMetric","formatSystemMetricName","value","formatValue","_","last","tableColumns","dataKey","length","width","cellRenderer","cellData","isEmpty","isNil","monospace","label","COLORS","contextToString","ErrorBoundary","Card","dataListProps","searchableKeys","calcTableHeight","illustrationConfig","displayName","RunOverviewTabPackagesCard","packages","isRunInfoLoading","Object","entries","BusyLoaderWrapper","height","RunOverviewTabParamsCard","runParams","params","hasOwnProperty","omit","paths","getObjectPaths","dotted","dot","modified","path","flexGrow","RunOverviewSidebar","info","traces","runHash","url","useRouteMatch","insightsList","split","slice","join","systemMetricsLength","metric","filter","m","startsWith","notes","distributions","images","audios","texts","figures","component","creation_time","processDurationTime","end_time","Date","now","tags","tag","Divider","to","RunOverviewTabCLIArgumentsCard","cliArguments","code","CodeBlock","RunOverviewTabEnvVariablesCard","envVariables","RunOverviewTab","runData","useRunMetricsBatch","runMetricsBatch","runTraces","useEffect","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","tabView","cardsData","systemParams","__system_params","runSystemBatch","arguments","env_variables","gitInfo","git_info","IllustrationBlock","isRunBatchLoading","runInfo","CopyToClipboard","contentRef","showSuccessDelay","useState","showCopiedIcon","setShowCopiedIcon","setTimeout","onCopy","useCallback","current","navigator","clipboard","writeText","innerText","trim","then","catch","Tooltip","onClick","withOnlyIcon","language","createRef","defaultProps","theme","style","tokens","getLineProps","getTokenProps","ref","line","i","token","CopyToClipBoard","runsBatchRequestRef","runDetailAppModel","getRunMetricsBatch","call","abort"],"mappings":"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","file":"static/js/RunOverviewTab.js?version=56c88fe699780f24ce5a","sourcesContent":["import React from 'react';\nimport moment from 'moment';\n\nimport { Text, Card, Icon } from 'components/kit';\n\nimport { DATE_GIT_COMMIT } from 'config/dates/dates';\n\nimport { IGitInfoCardProps } from './GitInfoCard';\n\nimport './GitInfoCard.scss';\n\nfunction GitInfoCard(props: IGitInfoCardProps) {\n  return (\n    <Card title='Git Info Card' className='GitInfoCard RunOverviewTab__cardBox'>\n      <div className='InfoSection ScrollBar__hidden flex fjb'>\n        <div className='InfoCard flex fdc'>\n          <Text\n            className='InfoCardLabel'\n            weight={400}\n            tint={50}\n            size={12}\n            color='primary'\n          >\n            Branch\n          </Text>\n          <div className='InfoCardValue flex fac'>\n            <Icon name='branch' fontSize={14} />\n            <Text\n              className='InfoCardValueText'\n              weight={500}\n              size={12}\n              color='primary'\n            >\n              {props.data?.branch}\n            </Text>\n          </div>\n        </div>\n        <div className='InfoCard flex fdc'>\n          <Text\n            className='InfoCardLabel'\n            weight={400}\n            tint={50}\n            size={12}\n            color='primary'\n          >\n            Author\n          </Text>\n          <div className='InfoCardValue flex fac'>\n            <Icon name='avatar' fontSize={14} />\n            <Text\n              className='InfoCardValueText'\n              weight={500}\n              size={12}\n              color='primary'\n            >\n              {props.data.commit?.author}\n            </Text>\n          </div>\n        </div>\n        <div className='InfoCard flex fdc'>\n          <Text\n            className='InfoCardLabel'\n            weight={400}\n            tint={50}\n            size={12}\n            color='primary'\n          >\n            Hash\n          </Text>\n          <div className='InfoCardValue flex fac'>\n            <Icon name='hash' fontSize={14} />\n            <Text\n              className='InfoCardValueText'\n              weight={500}\n              size={12}\n              color='primary'\n            >\n              {props.data.commit?.hash}\n            </Text>\n          </div>\n        </div>\n        <div className='InfoCard flex fdc'>\n          <Text\n            className='InfoCardLabel'\n            weight={400}\n            tint={50}\n            size={12}\n            color='primary'\n          >\n            Timestamp\n          </Text>\n          <div className='InfoCardValue flex fac'>\n            <Icon name='time' fontSize={14} />\n            <Text\n              className='InfoCardValueText'\n              weight={500}\n              size={12}\n              color='primary'\n            >\n              {`${moment(props.data.commit?.timestamp).format(\n                DATE_GIT_COMMIT,\n              )}`}\n            </Text>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\nexport default React.memo(GitInfoCard);\n","import React from 'react';\nimport _ from 'lodash-es';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport Card from 'components/kit/Card/Card';\nimport { Badge, Text } from 'components/kit';\n\nimport COLORS from 'config/colors/colors';\n\nimport contextToString from 'utils/contextToString';\nimport { isSystemMetric } from 'utils/isSystemMetric';\nimport { formatSystemMetricName } from 'utils/formatSystemMetricName';\nimport { formatValue } from 'utils/formatValue';\n\nfunction RunOverviewTabMetricsCard({\n  isLoading,\n  runBatch,\n  type,\n}: {\n  isLoading: boolean;\n  runBatch: any;\n  type: 'metric' | 'systemMetric';\n}) {\n  const tableData = React.useMemo(() => {\n    if (runBatch) {\n      return runBatch.map(({ name, values, context }: any, index: number) => {\n        return {\n          key: index,\n          name: isSystemMetric(name) ? formatSystemMetricName(name) : name,\n          value: formatValue(_.last(values)),\n          context: context,\n        };\n      });\n    }\n    return [];\n  }, [runBatch]);\n\n  const tableColumns = React.useMemo(\n    () => [\n      {\n        dataKey: 'name',\n        key: 'name',\n        title: (\n          <Text weight={600} size={14} tint={100}>\n            Name\n            <Text\n              weight={500}\n              size={14}\n              tint={50}\n              className='RunOverviewTab__cardBox__tableTitleCount'\n            >\n              ({runBatch?.length})\n            </Text>\n          </Text>\n        ),\n        width: '33.3%',\n        cellRenderer: ({ cellData }: any) => <p title={cellData}>{cellData}</p>,\n      },\n      {\n        dataKey: 'context',\n        key: 'context',\n        title: 'Context',\n        width: '33.3%',\n        cellRenderer: ({ cellData }: any) =>\n          !_.isEmpty(cellData) && !_.isNil(cellData) ? (\n            <Badge\n              monospace\n              size='small'\n              color={COLORS[0][0]}\n              label={contextToString(cellData) || ''}\n              className='RunOverviewTab__cardBox__badge'\n            />\n          ) : (\n            <Badge\n              monospace\n              size='small'\n              color={'#F8FAFD'}\n              label={'Empty Context'}\n              className='RunOverviewTab__cardBox__badge emptyContext'\n            />\n          ),\n      },\n      {\n        dataKey: 'value',\n        key: 'value',\n        title: 'Last Value',\n        width: '33.3%',\n        cellRenderer: ({ cellData }: any) => (\n          <p className='tar' title={cellData}>\n            {cellData}\n          </p>\n        ),\n      },\n    ],\n    [runBatch],\n  );\n\n  return (\n    <ErrorBoundary>\n      <Card\n        title={type === 'metric' ? 'Metrics' : 'System Metrics'}\n        // subtitle={\n        //   type === 'metric'\n        //     ? 'Little information about Metrics'\n        //     : 'Little information about System Metrics'\n        // }\n        className='RunOverviewTab__cardBox'\n        dataListProps={{\n          isLoading: isLoading || !runBatch,\n          searchableKeys: ['name', 'value'],\n          tableColumns,\n          tableData,\n          calcTableHeight: true,\n          illustrationConfig: {\n            size: 'large',\n            title: 'No Results',\n          },\n        }}\n      />\n    </ErrorBoundary>\n  );\n}\n\nRunOverviewTabMetricsCard.displayName = 'RunOverviewTabMetricsCard';\n\nexport default React.memo(RunOverviewTabMetricsCard);\n","import React from 'react';\n\nimport { Card, Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport { ICardProps } from 'components/kit/Card/Card.d';\n\nimport { formatValue } from 'utils/formatValue';\n\nimport { IRunOverviewTabPackagesCardProps } from './RunOverviewTabPackagesCard.d';\n\nfunction RunOverviewTabPackagesCard({\n  packages,\n  isRunInfoLoading,\n}: IRunOverviewTabPackagesCardProps) {\n  const tableData = React.useMemo(\n    () =>\n      Object.entries(packages || {}).map(([key = '', value], index) => ({\n        key: index,\n        name: key,\n        value: formatValue(value),\n      })),\n    [packages],\n  );\n  const dataListProps = React.useMemo(\n    (): ICardProps['dataListProps'] => ({\n      tableColumns: [\n        {\n          dataKey: 'name',\n          key: 'name',\n          width: '50%',\n          title: (\n            <Text weight={600} size={14} tint={100}>\n              Packages\n              <Text\n                weight={600}\n                size={14}\n                tint={50}\n                className='RunOverviewTab__cardBox__tableTitleCount'\n              >\n                ({tableData.length})\n              </Text>\n            </Text>\n          ),\n          cellRenderer: ({ cellData }: any) => (\n            <p title={cellData}>{cellData}</p>\n          ),\n        },\n        {\n          dataKey: 'value',\n          key: 'value',\n          width: '50%',\n          title: 'Value',\n          cellRenderer: ({ cellData }: any) => (\n            <p title={cellData}>{cellData}</p>\n          ),\n        },\n      ],\n      tableData,\n      illustrationConfig: {\n        size: 'large',\n        title: 'No Results',\n      },\n    }),\n    [tableData],\n  );\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper isLoading={isRunInfoLoading} height='100%'>\n        <Card\n          title='Packages'\n          className='RunOverviewTab__cardBox'\n          dataListProps={dataListProps}\n        />\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nRunOverviewTabPackagesCard.displayName = 'RunOverviewTabPackagesCard';\n\nexport default React.memo<IRunOverviewTabPackagesCardProps>(\n  RunOverviewTabPackagesCard,\n);\n","import React from 'react';\nimport * as dot from 'dot-object';\nimport _ from 'lodash-es';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport Card from 'components/kit/Card/Card';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport { Text } from 'components/kit';\n\nimport getObjectPaths from 'utils/getObjectPaths';\nimport { formatValue } from 'utils/formatValue';\n\nfunction RunOverviewTabParamsCard({ runParams, isRunInfoLoading }: any) {\n  const tableData = React.useMemo(() => {\n    const params = runParams.hasOwnProperty('__system_params')\n      ? _.omit(runParams, '__system_params')\n      : runParams;\n    const paths = getObjectPaths(params, params);\n    const dotted = dot.dot(params);\n    const modified = dot.object(dotted);\n    const resultTableList = paths.map((path, index) => {\n      return {\n        key: index,\n        name: path,\n        value: formatValue(dot.pick(path, modified)),\n      };\n    });\n    return resultTableList || [];\n  }, [runParams]);\n\n  const tableColumns = React.useMemo(\n    () => [\n      {\n        dataKey: 'name',\n        key: 'name',\n        title: (\n          <Text weight={600} size={14} tint={100}>\n            Name\n            <Text\n              weight={600}\n              size={14}\n              tint={50}\n              className='RunOverviewTab__cardBox__tableTitleCount'\n            >\n              ({tableData.length})\n            </Text>\n          </Text>\n        ),\n        width: '50%',\n        cellRenderer: ({ cellData }: any) => <p title={cellData}>{cellData}</p>,\n      },\n      {\n        dataKey: 'value',\n        key: 'value',\n        title: 'Value',\n        width: 0,\n        flexGrow: 1,\n        cellRenderer: ({ cellData }: any) => <p title={cellData}>{cellData}</p>,\n      },\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [runParams, tableData],\n  );\n\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper\n        isLoading={isRunInfoLoading || !runParams}\n        className='runDetailParamsTabLoader'\n        height='100%'\n      >\n        <Card\n          title='Parameters'\n          // subtitle='Little information about Params'\n          className='RunOverviewTab__cardBox'\n          dataListProps={{\n            tableColumns,\n            tableData,\n            calcTableHeight: true,\n            illustrationConfig: {\n              size: 'large',\n              title: 'No Results',\n            },\n          }}\n        />\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nRunOverviewTabParamsCard.displayName = 'RunOverviewTabParamsCard';\n\nexport default React.memo(RunOverviewTabParamsCard);\n","import React from 'react';\nimport { NavLink, useRouteMatch } from 'react-router-dom';\nimport moment from 'moment';\n\nimport { Divider } from '@material-ui/core';\n\nimport { Badge, Icon, Text } from 'components/kit';\n\nimport { processDurationTime } from 'utils/processDurationTime';\n\nimport { IRunOverviewSidebarProps } from './RunOverviewSidebar.d';\n\nimport './RunOverviewSidebar.scss';\n\nfunction RunOverviewSidebar({\n  info,\n  traces,\n  runHash,\n}: IRunOverviewSidebarProps) {\n  const { url } = useRouteMatch();\n\n  const insightsList = React.useMemo(() => {\n    const path = url.split('/').slice(0, -1).join('/');\n    const systemMetricsLength: number =\n      traces.metric.filter((m) => m.name.startsWith('__system__')).length || 0;\n    return [\n      {\n        name: 'Notes',\n        path: `${path}/notes`,\n        value: info.notes || 0,\n      },\n      {\n        name: 'Metrics',\n        path: `${path}/metrics`,\n        value: traces?.metric?.length - systemMetricsLength || 0,\n      },\n      {\n        name: 'System',\n        path: `${path}/system`,\n        value: systemMetricsLength,\n      },\n      {\n        name: 'Distributions',\n        path: `${path}/distributions`,\n        value: traces?.distributions?.length || 0,\n      },\n      {\n        name: 'Images',\n        path: `${path}/images`,\n        value: traces?.images?.length || 0,\n      },\n      {\n        name: 'Audios',\n        path: `${path}/audios`,\n        value: traces?.audios?.length || 0,\n      },\n      {\n        name: 'Texts',\n        path: `${path}/texts`,\n        value: traces?.texts?.length || 0,\n      },\n      {\n        name: 'Figures',\n        path: `${path}/figures`,\n        value: traces?.figures?.length || 0,\n      },\n    ];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [traces]);\n\n  return (\n    <div className='RunOverviewSidebar'>\n      <div className='RunOverviewSidebar__section RunOverviewSidebar__section__info'>\n        <Text weight={600} size={18} tint={100} component='h3'>\n          Information\n        </Text>\n        <div>\n          <Icon name='calendar' />\n          <Text tint={70}>\n            {`${moment(info?.creation_time * 1000).format('DD MMMM YYYY')}`}\n          </Text>\n        </div>\n        <div>\n          <Icon name='time' />\n          <Text tint={70}>\n            {`${moment(info?.creation_time * 1000).format('HH:MM A')}`}\n          </Text>\n        </div>\n        <div>\n          <Icon name='duration' />\n          <Text tint={70}>\n            {processDurationTime(\n              info?.creation_time * 1000,\n              info?.end_time ? info?.end_time * 1000 : Date.now(),\n            )}\n          </Text>\n        </div>\n        <div>\n          <Icon name='hash' />\n          <Text tint={70}>{runHash}</Text>\n        </div>\n      </div>\n      {info.tags.length ? (\n        <div className='RunOverviewSidebar__section RunOverviewSidebar__section__tags'>\n          <Text weight={600} size={18} tint={100} component='h3'>\n            Tags{' '}\n            <Text component='span' tint={70} weight={400} size={18}>\n              ({info.tags.length})\n            </Text>\n          </Text>\n          <div className='RunOverviewSidebar__section__tags-list ScrollBar__hidden'>\n            {info.tags.map((tag) => (\n              <Badge color={tag.color} label={tag.name} key={tag.name} />\n            ))}\n          </div>\n        </div>\n      ) : null}\n      <Divider className='RunOverviewSidebar__section__Divider' />\n      <div className='RunOverviewSidebar__section RunOverviewSidebar__section__insights'>\n        <Text weight={600} size={18} tint={100} component='h3'>\n          Insights\n        </Text>\n        <div>\n          {insightsList.map(({ name, path, value }) => (\n            <NavLink\n              className='RunOverviewSidebar__NavLink'\n              key={path}\n              to={path}\n            >\n              <Text size={14}>{name}</Text>\n              <Text tint={70} size={14}>\n                {value}\n              </Text>\n            </NavLink>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(RunOverviewSidebar);\n","import React from 'react';\n\nimport { Card } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport CodeBlock from 'components/CodeBlock/CodeBlock';\n\nimport { IRunOverviewTabCLIArgumentsCardProps } from './RunOverviewTabCLIArgumentsCard.d';\n\nimport './RunOverviewTabCLIArgumentsCard.scss';\n\nfunction RunOverviewTabCLIArgumentsCard({\n  cliArguments,\n  isRunInfoLoading,\n}: IRunOverviewTabCLIArgumentsCardProps) {\n  const code: string = React.useMemo(\n    () => (cliArguments || []).join(' '),\n    [cliArguments],\n  );\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper isLoading={isRunInfoLoading} height='100%'>\n        <Card\n          title='CLI Arguments'\n          className='RunOverviewTabCLIArgumentsCard RunOverviewTab__cardBox'\n        >\n          <CodeBlock code={code} />\n        </Card>\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nRunOverviewTabCLIArgumentsCard.displayName = 'RunOverviewTabCLIArgumentsCard';\n\nexport default React.memo<IRunOverviewTabCLIArgumentsCardProps>(\n  RunOverviewTabCLIArgumentsCard,\n);\n","import React from 'react';\n\nimport { Card, Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport { ICardProps } from 'components/kit/Card/Card.d';\n\nimport { formatValue } from 'utils/formatValue';\n\nimport { IRunOverviewTabEnvVariablesCardProps } from './RunOverviewTabEnvVariablesCard.d';\n\nfunction RunOverviewTabEnvVariablesCard({\n  envVariables,\n  isRunInfoLoading,\n}: IRunOverviewTabEnvVariablesCardProps) {\n  const tableData = React.useMemo(\n    () =>\n      Object.entries(envVariables || {}).map(\n        ([key = '', value]: string[], index: number) => ({\n          key: index,\n          name: key,\n          value: formatValue(value),\n        }),\n      ),\n    [envVariables],\n  );\n  const dataListProps = React.useMemo(\n    (): ICardProps['dataListProps'] => ({\n      calcTableHeight: true,\n      tableColumns: [\n        {\n          dataKey: 'name',\n          key: 'name',\n          width: '50%',\n          title: (\n            <Text weight={600} size={14} tint={100}>\n              Env Variables\n              <Text\n                weight={600}\n                size={14}\n                tint={50}\n                className='RunOverviewTab__cardBox__tableTitleCount'\n              >\n                ({tableData.length})\n              </Text>\n            </Text>\n          ),\n          cellRenderer: ({ cellData }: any) => (\n            <p title={cellData}>{cellData}</p>\n          ),\n        },\n        {\n          dataKey: 'value',\n          key: 'value',\n          width: '50%',\n          title: 'Value',\n          cellRenderer: ({ cellData }: any) => (\n            <p title={cellData}>{cellData}</p>\n          ),\n        },\n      ],\n      tableData,\n      illustrationConfig: {\n        size: 'large',\n        title: 'No Results',\n      },\n    }),\n    [tableData],\n  );\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper isLoading={isRunInfoLoading} height='100%'>\n        <Card\n          title='Environment Variables'\n          className='RunOverviewTab__cardBox'\n          dataListProps={dataListProps}\n        />\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nRunOverviewTabEnvVariablesCard.displayName = 'RunOverviewTabEnvVariablesCard';\n\nexport default React.memo<IRunOverviewTabEnvVariablesCardProps>(\n  RunOverviewTabEnvVariablesCard,\n);\n","import React from 'react';\nimport _ from 'lodash-es';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport IllustrationBlock from 'components/IllustrationBlock/IllustrationBlock';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport * as analytics from 'services/analytics';\n\nimport useRunMetricsBatch from '../hooks/useRunMetricsBatch';\n\nimport GitInfoCard from './components/GitInfoCard';\nimport RunOverviewTabMetricsCard from './components/MetricsCard/RunOverviewTabMetricsCard';\nimport RunOverviewTabPackagesCard from './components/Packages/RunOverviewTabPackagesCard';\nimport RunOverviewTabParamsCard from './components/ParamsCard/RunOverviewTabParamsCard';\nimport RunOverviewSidebar from './components/RunOverviewSidebar/RunOverviewSidebar';\nimport RunOverviewTabCLIArgumentsCard from './components/CLIArgumentsCard/RunOverviewTabCLIArgumentsCard';\nimport RunOverviewTabEnvVariablesCard from './components/EnvVariablesCard/RunOverviewTabEnvVariablesCard';\nimport { IRunOverviewTabProps } from './RunOverviewTab.d';\n\nimport './RunOverviewTab.scss';\n\nfunction RunOverviewTab({ runData, runHash }: IRunOverviewTabProps) {\n  useRunMetricsBatch({\n    runBatch: runData.runMetricsBatch,\n    runTraces: runData.runTraces,\n    runHash,\n  });\n\n  React.useEffect(() => {\n    analytics.pageView(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs['overview'].tabView,\n    );\n  }, []);\n\n  const cardsData: Record<any, any> = React.useMemo(() => {\n    const data: any = {};\n    const systemParams = runData?.runParams?.__system_params;\n    if (!_.isEmpty(runData?.runParams)) {\n      data.runParams = runData.runParams;\n    }\n    if (!_.isEmpty(runData?.runMetricsBatch)) {\n      data.runMetricsBatch = runData.runMetricsBatch;\n    }\n    if (!_.isEmpty(runData?.runSystemBatch)) {\n      data.runSystemBatch = runData.runSystemBatch;\n    }\n    if (systemParams) {\n      if (!_.isEmpty(systemParams.arguments)) {\n        data.cliArguments = systemParams.arguments;\n      }\n      if (!_.isEmpty(systemParams.env_variables)) {\n        data.envVariables = systemParams.env_variables;\n      }\n      if (!_.isEmpty(systemParams.packages)) {\n        data.packages = systemParams.packages;\n      }\n      if (!_.isEmpty(systemParams.packages)) {\n        data.gitInfo = systemParams.git_info;\n      }\n    }\n    return data;\n  }, [runData]);\n\n  return (\n    <ErrorBoundary>\n      <section className='RunOverviewTab'>\n        <div className='RunOverviewTab__content'>\n          {_.isEmpty(cardsData) ? (\n            <IllustrationBlock size='large' title='No Results' />\n          ) : (\n            <>\n              {_.isEmpty(cardsData?.runParams) ? null : (\n                <ErrorBoundary>\n                  <RunOverviewTabParamsCard\n                    runParams={cardsData?.runParams}\n                    isRunInfoLoading={runData?.isRunInfoLoading}\n                  />\n                </ErrorBoundary>\n              )}\n              {_.isEmpty(cardsData?.runMetricsBatch) ? null : (\n                <ErrorBoundary>\n                  <RunOverviewTabMetricsCard\n                    isLoading={runData?.isRunBatchLoading}\n                    type='metric'\n                    runBatch={cardsData?.runMetricsBatch}\n                  />\n                </ErrorBoundary>\n              )}\n\n              {_.isEmpty(cardsData?.runSystemBatch) ? null : (\n                <ErrorBoundary>\n                  <RunOverviewTabMetricsCard\n                    isLoading={runData?.isRunBatchLoading}\n                    type='systemMetric'\n                    runBatch={cardsData?.runSystemBatch}\n                  />\n                </ErrorBoundary>\n              )}\n              {_.isEmpty(cardsData.cliArguments) ? null : (\n                <ErrorBoundary>\n                  <RunOverviewTabCLIArgumentsCard\n                    cliArguments={cardsData.cliArguments}\n                    isRunInfoLoading={runData?.isRunInfoLoading}\n                  />\n                </ErrorBoundary>\n              )}\n              {_.isEmpty(cardsData.envVariables) ? null : (\n                <ErrorBoundary>\n                  <RunOverviewTabEnvVariablesCard\n                    envVariables={cardsData.envVariables}\n                    isRunInfoLoading={runData?.isRunInfoLoading}\n                  />\n                </ErrorBoundary>\n              )}\n              {_.isEmpty(cardsData.packages) ? null : (\n                <ErrorBoundary>\n                  <RunOverviewTabPackagesCard\n                    packages={cardsData.packages}\n                    isRunInfoLoading={runData?.isRunInfoLoading}\n                  />\n                </ErrorBoundary>\n              )}\n              {_.isEmpty(cardsData.gitInfo) ? null : (\n                <ErrorBoundary>\n                  <GitInfoCard data={cardsData.gitInfo} />\n                </ErrorBoundary>\n              )}\n            </>\n          )}\n        </div>\n        <ErrorBoundary>\n          <RunOverviewSidebar\n            runHash={runHash}\n            info={runData.runInfo}\n            traces={runData.runTraces}\n          />\n        </ErrorBoundary>\n      </section>\n    </ErrorBoundary>\n  );\n}\n\nRunOverviewTab.displayName = 'RunOverviewTab';\n\nexport default React.memo(RunOverviewTab);\n","import RunOverviewTab from './RunOverviewTab';\n\nexport default RunOverviewTab;\n","import React from 'react';\n\nimport { Tooltip } from '@material-ui/core';\n\nimport { Button, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ICopyToClipBoardProps } from 'types/components/CopyToClipBoard/CopyToClipBoard';\n\nfunction CopyToClipboard({\n  contentRef,\n  showSuccessDelay = 1500,\n  className = '',\n}: ICopyToClipBoardProps): React.FunctionComponentElement<ICopyToClipBoardProps> {\n  const [showCopiedIcon, setShowCopiedIcon] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (showCopiedIcon) {\n      setTimeout(() => {\n        setShowCopiedIcon(false);\n      }, showSuccessDelay);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showCopiedIcon]);\n\n  const onCopy = React.useCallback(() => {\n    if (contentRef.current && !showCopiedIcon) {\n      navigator.clipboard\n        .writeText(contentRef.current.innerText.trim(''))\n        .then(function () {\n          setShowCopiedIcon(true);\n        })\n        .catch();\n    }\n  }, [contentRef, showCopiedIcon]);\n\n  return (\n    <ErrorBoundary>\n      <Tooltip title={showCopiedIcon ? 'Copied!' : 'Copy to clipboard'}>\n        <span className={className} onClick={onCopy}>\n          <Button withOnlyIcon color='secondary' size='medium'>\n            {showCopiedIcon ? <Icon name='check' /> : <Icon name='copy' />}\n          </Button>\n        </span>\n      </Tooltip>\n    </ErrorBoundary>\n  );\n}\n\nCopyToClipboard.displayName = 'CopyToClipBoard';\n\nexport default React.memo<ICopyToClipBoardProps>(CopyToClipboard);\n","import React from 'react';\n// import AssignmentTurnedInOutlinedIcon from '@material-kit/icons/AssignmentTurnedInOutlined';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\n\nimport theme from 'prism-react-renderer/themes/nightOwlLight';\n\nimport CopyToClipBoard from 'components/CopyToClipBoard/CopyToClipBoard';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ICodeBlockProps } from 'types/components/CodeBlock/CodeBlock';\n\nimport './CodeBlock.scss';\n\nfunction CodeBlock({\n  code = '',\n  className = '',\n  language = 'python',\n}: ICodeBlockProps): React.FunctionComponentElement<React.ReactNode> {\n  const contentRef = React.createRef<HTMLPreElement>();\n  return (\n    <ErrorBoundary>\n      <div className={`CodeBlock ${className}`}>\n        <Highlight\n          {...defaultProps}\n          theme={theme}\n          code={code.trim()}\n          language={language}\n        >\n          {({ className, style, tokens, getLineProps, getTokenProps }) => (\n            <pre className={className} style={style} ref={contentRef}>\n              {tokens.map((line, i) => (\n                <div key={i} {...getLineProps({ line, key: i })}>\n                  {line.map((token, key) => (\n                    <span key={key} {...getTokenProps({ token, key })} />\n                  ))}\n                </div>\n              ))}\n            </pre>\n          )}\n        </Highlight>\n        <ErrorBoundary>\n          <CopyToClipBoard\n            className='CodeBlock__copy__button'\n            contentRef={contentRef}\n          />\n        </ErrorBoundary>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default React.memo(CodeBlock);\n","import React from 'react';\nimport _ from 'lodash-es';\n\nimport runDetailAppModel from 'services/models/runs/runDetailAppModel';\n\nfunction useRunMetricsBatch({ runBatch, runTraces, runHash }: any) {\n  React.useEffect(() => {\n    const runsBatchRequestRef = runDetailAppModel.getRunMetricsBatch(\n      runTraces.metric,\n      runHash,\n    );\n    if (!runBatch && !_.isNil(runTraces)) {\n      runsBatchRequestRef.call();\n    }\n    return () => {\n      runsBatchRequestRef.abort();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [runTraces, runHash]);\n}\n\nexport default useRunMetricsBatch;\n"],"sourceRoot":""}