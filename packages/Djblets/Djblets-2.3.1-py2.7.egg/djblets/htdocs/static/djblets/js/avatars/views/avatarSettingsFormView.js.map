{"version":3,"file":"avatarSettingsFormView.js","names":["Promise","withResolver","readyPromise","resolve","Djblets","Avatars","SettingsFormView","Backbone","View","extend","events","initialize","console","assert","instance","_configForms","Map","_$config","$","services","model","get","listenTo","_showHideForms","_onSubmit","e","serviceID","currentForm","validate","preventDefault","renderForms","values","form","render","change","previousID","previous","previousForm","undefined","$el","hide","show","_onServiceChanged","$target","target","set","val","addConfigForm","formClass","el","ready"],"sources":["avatarSettingsFormView.es6.js"],"sourcesContent":["(function() {\n\n\nconst [readyPromise, resolve] = Promise.withResolver();\n\n\n/**\n * A form for managing the settings of avatar services.\n *\n * This form lets you select the avatar service you wish to use, as well as\n * configure the settings for that avatar service.\n */\nDjblets.Avatars.SettingsFormView = Backbone.View.extend({\n    events: {\n        'change #id_avatar_service_id': '_onServiceChanged',\n        'submit': '_onSubmit'\n    },\n\n    /**\n     * Initialize the form.\n     */\n    initialize() {\n        console.assert(Djblets.Avatars.SettingsFormView.instance === null);\n        Djblets.Avatars.SettingsFormView.instance = this;\n        this._configForms = new Map();\n\n        this._$config = this.$('.avatar-service-configuration');\n\n        const services = this.model.get('services');\n        this.listenTo(this.model, 'change:serviceID',\n                      () => this._showHideForms());\n\n        /*\n         * The promise continuations will only be executed once the stack is\n         * unwound.\n         */\n        resolve();\n    },\n\n    /**\n     * Validate the current form upon submission.\n     *\n     * Args:\n     *     e (Event):\n     *         The form submission event.\n     */\n    _onSubmit(e) {\n        const serviceID = this.model.get('serviceID');\n        const currentForm = this._configForms.get(serviceID);\n\n        if (currentForm && !currentForm.validate()) {\n            e.preventDefault();\n        }\n    },\n\n    /**\n     * Render the child forms.\n     *\n     * This will show the for the currently selected service if it has one.\n     *\n     * Returns:\n     *     Djblets.Avatars.SettingsFormView:\n     *     This view (for chaining).\n     */\n    renderForms() {\n        for (const form of this._configForms.values()) {\n            form.render();\n        }\n\n        /*\n         * Ensure that if the browser sets the value of the <select> upon\n         * refresh that we update the model accordingly.\n         */\n        this.$('#id_avatar_service_id').change();\n        this._showHideForms(true);\n\n        return this;\n    },\n\n    /**\n     * Show or hide the configuration form.\n     */\n    _showHideForms() {\n        const services = this.model.get('services');\n        const serviceID = this.model.get('serviceID');\n        const currentForm = this._configForms.get(serviceID);\n        const previousID = this.model.previous('serviceID');\n        const previousForm = previousID\n            ? this._configForms.get(previousID)\n            : undefined;\n\n        if (previousForm && currentForm) {\n            previousForm.$el.hide();\n            currentForm.$el.show();\n        } else if (previousForm) {\n            previousForm.$el.hide();\n            this._$config.hide();\n        } else if (currentForm) {\n            currentForm.$el.show();\n            this._$config.show();\n        }\n\n    },\n\n    /**\n     * Handle the service being changed.\n     *\n     * Args:\n     *     e (Event):\n     *         The change event.\n     */\n    _onServiceChanged(e) {\n        const $target = $(e.target);\n        this.model.set('serviceID', $target.val());\n    }\n}, {\n    /**\n     * The form instance.\n     */\n    instance: null,\n\n    /**\n     * Add a configuration form to the instance.\n     *\n     * Args:\n     *     serviceID (string):\n     *         The unique ID for the avatar service.\n     *\n     *     formClass (constructor):\n     *         The view to use for the form.\n     */\n    addConfigForm(serviceID, formClass) {\n        Djblets.Avatars.SettingsFormView.instance._configForms.set(\n            serviceID,\n            new formClass({\n                el: $(`[data-avatar-service-id=\"${serviceID}\"]`),\n                model: Djblets.Avatars.SettingsFormView.instance.model\n            }));\n    },\n\n    /**\n     * A promise that is resolved when the avatar services form has been\n     * initialized.\n     */\n    ready: readyPromise\n});\n\n\n})();\n"],"mappings":"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"}