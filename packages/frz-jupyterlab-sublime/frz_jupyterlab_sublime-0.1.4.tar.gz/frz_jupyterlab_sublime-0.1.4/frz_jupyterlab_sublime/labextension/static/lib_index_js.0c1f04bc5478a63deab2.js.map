{"version":3,"file":"lib_index_js.0c1f04bc5478a63deab2.js","mappings":";;;;;;;;;;;;;;;;AAAwD;AAC5B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;AC3ItB;AACsH;AAC7B;AACzF,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F;AACA,gMAAgM,oFAAoF,2LAA2L;AAC/c;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;ACPvC;AACsH;AAC7B;AACW;AACpG,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F,0BAA0B,qFAAiC;AAC3D;AACA,mDAAmD,kEAAkE;AACrH;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;ACTkD;AACzF,YAAuF;;AAEvF;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,sFAAO;;;;AAIxB,iEAAe,6FAAc,MAAM","sources":["webpack://jupyterlab_sublime/./lib/index.js","webpack://jupyterlab_sublime/./style/base.css","webpack://jupyterlab_sublime/./style/index.css","webpack://jupyterlab_sublime/./style/index.css?0140"],"sourcesContent":["import { INotebookTracker } from '@jupyterlab/notebook';\nimport '../style/index.css';\nclass JupyterLabSublime {\n    constructor(app, tracker) {\n        this.app = app;\n        this.tracker = tracker;\n        this.addCommands();\n        this.onActiveCellChanged();\n        this.tracker.activeCellChanged.connect(this.onActiveCellChanged, this);\n    }\n    addCommands() {\n        const { commands } = this.app;\n        const tracker = this.tracker;\n        function editorExec(id) {\n            if (tracker.activeCell !== null) {\n                tracker.activeCell.editor.editor.execCommand(id);\n            }\n        }\n        // Manage Escape collision\n        // TODO: Check if use has Escape set for command mode\n        commands.addCommand('sublime:exit-editor', {\n            execute: () => {\n                editorExec('singleSelectionTop');\n                commands.execute('notebook:enter-command-mode');\n            },\n            label: 'Exit Editor'\n        });\n        // Manage Shift-Tab collision\n        commands.addCommand('sublime:indent-less-slash-tooltip', {\n            execute: () => {\n                if (tracker.activeCell !== null) {\n                    if (!tracker.activeCell.editor.host.classList.contains('jp-mod-completer-enabled')) {\n                        editorExec('indentLess');\n                    }\n                    else {\n                        commands.execute('tooltip:launch-notebook');\n                    }\n                }\n            },\n            label: 'Indent less or tooltip'\n        });\n        let all_commands = [\"addCursorToNextLine\", \"addCursorToPrevLine\", \"clearBookmarks\", \"deleteLine\", \"deleteToSublimeMark\", \"delLineLeft\", \"delLineRight\", \"downcaseAtCursor\", \"duplicateLine\", \"findAllUnder\", \"findIncremental\", \"findIncrementalReverse\", \"findNext\", \"findPrev\", \"findUnder\", \"findUnderPrevious\", \"fold\", \"foldAll\", \"goSubwordLeft\", \"goSubwordRight\", \"goToBracket\", \"insertLineAfter\", \"insertLineBefore\", \"joinLines\", \"nextBookmark\", \"prevBookmark\", \"replace\", \"scrollLineDown\", \"scrollLineUp\", \"selectBetweenBrackets\", \"selectBookmarks\", \"selectLine\", \"selectNextOccurrence\", \"selectScope\", \"selectToSublimeMark\", \"setSublimeMark\", \"showInCenter\", \"skipAndSelectNextOccurrence\", \"smartBackspace\", \"sortLines\", \"sortLinesInsensitive\", \"splitSelectionByLine\", \"sublimeYank\", \"swapLineDown\", \"swapLineUp\", \"swapWithSublimeMark\", \"toggleBookmark\", \"toggleCommentIndented\", \"transposeChars\", \"unfold\", \"unfoldAll\", \"upcaseAtCursor\", \"wrapLines\"];\n        for (let i = 0; i < all_commands.length; i++) {\n            let cmd = all_commands[i];\n            commands.addCommand('sublime:' + cmd, {\n                execute: () => {\n                    editorExec(cmd);\n                },\n                label: cmd,\n            });\n        }\n        commands.addCommand('sublime:subword-backward-deletion', {\n            execute: () => {\n                if (tracker.activeCell == null) {\n                    return;\n                }\n                const cEditor = tracker.activeCell.editor\n                    .editor;\n                const doc = cEditor.getDoc();\n                const starts = doc.listSelections();\n                // NOTE: This is non-trivial to deal with, results are often ugly, let's ignore this.\n                if (starts.some(pos => pos.head.ch !== pos.anchor.ch)) {\n                    // tslint:disable-next-line:no-console\n                    console.log('Ignored attempt to delete subword!');\n                    return;\n                }\n                // CAV: To make sure when we undo this operation, we have carets showing in\n                //      their rightful positions.\n                cEditor.execCommand('goSubwordLeft');\n                const ends = doc.listSelections();\n                doc.setSelections(starts);\n                if (starts.length !== ends.length) {\n                    // NOTE: Edge case where select are part of the same subword, need more thoughts on this.)\n                    // tslint:disable-next-line:no-console\n                    console.log('Inogred attempt to delete subword, because some selection is part of the same subword');\n                    return;\n                }\n                cEditor.operation(() => {\n                    for (let i = 0; i < starts.length; i++) {\n                        doc.replaceRange('', starts[i].head, ends[i].head, '+delete');\n                    }\n                });\n            },\n            label: 'Subward backward deletion'\n        });\n        commands.addCommand('sublime:subword-forward-deletion', {\n            execute: () => {\n                if (tracker.activeCell == null) {\n                    return;\n                }\n                const cEditor = tracker.activeCell.editor\n                    .editor;\n                const doc = cEditor.getDoc();\n                const starts = doc.listSelections();\n                // NOTE: This is non-trivial to deal with, results are often ugly, let's ignore this.\n                if (starts.some(pos => pos.head.ch !== pos.anchor.ch)) {\n                    // tslint:disable-next-line:no-console\n                    console.log('Ignored attempt to delete subword!');\n                    return;\n                }\n                // CAV: To make sure when we undo this operation, we have carets showing in\n                //      their rightful positions.\n                cEditor.execCommand('goSubwordRight');\n                const ends = doc.listSelections();\n                doc.setSelections(starts);\n                if (starts.length !== ends.length) {\n                    // NOTE: Edge case where select are part of the same subword, need more thoughts on this.)\n                    // tslint:disable-next-line:no-console\n                    console.log('Inogred attempt to delete subword, because some selection is part of the same subword');\n                    return;\n                }\n                cEditor.operation(() => {\n                    for (let i = 0; i < starts.length; i++) {\n                        doc.replaceRange('', starts[i].head, ends[i].head, '+delete');\n                    }\n                });\n            },\n            label: 'Subward forward deletion'\n        });\n    }\n    onActiveCellChanged() {\n        const activeCell = this.tracker.activeCell;\n        if (activeCell !== null) {\n            activeCell.editor.setOption('keyMap', 'sublime');\n        }\n    }\n}\n/**\n * Initialization data for the jupyterlab_sublime extension.\n */\nconst plugin = {\n    id: 'jupyterlab_sublime:plugin',\n    autoStart: true,\n    requires: [INotebookTracker],\n    activate: (app, tracker) => {\n        new JupyterLabSublime(app, tracker);\n        console.log('JupyterLab extension jupyterlab_sublime is activated!');\n    }\n};\nexport default plugin;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*\\n    See the JupyterLab Developer Guide for useful CSS Patterns:\\n\\n    https://jupyterlab.readthedocs.io/en/stable/developer/css.html\\n*/\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./style/base.css\"],\"names\":[],\"mappings\":\"AAAA;;;;CAIC\",\"sourcesContent\":[\"/*\\n    See the JupyterLab Developer Guide for useful CSS Patterns:\\n\\n    https://jupyterlab.readthedocs.io/en/stable/developer/css.html\\n*/\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../node_modules/css-loader/dist/cjs.js!./base.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"names":[],"sourceRoot":""}