# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.11.4462
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid.configuration import Configuration


class FilterInstrumentEvents(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'instrument_event_ids': 'list[str]',
        'corporate_action_source_ids': 'list[ResourceId]',
        'lusid_instrument_ids': 'list[str]',
        'instrument_scopes': 'list[str]',
        'instrument_event_types': 'list[str]'
    }

    attribute_map = {
        'instrument_event_ids': 'instrumentEventIds',
        'corporate_action_source_ids': 'corporateActionSourceIds',
        'lusid_instrument_ids': 'lusidInstrumentIds',
        'instrument_scopes': 'instrumentScopes',
        'instrument_event_types': 'instrumentEventTypes'
    }

    required_map = {
        'instrument_event_ids': 'optional',
        'corporate_action_source_ids': 'optional',
        'lusid_instrument_ids': 'optional',
        'instrument_scopes': 'optional',
        'instrument_event_types': 'optional'
    }

    def __init__(self, instrument_event_ids=None, corporate_action_source_ids=None, lusid_instrument_ids=None, instrument_scopes=None, instrument_event_types=None, local_vars_configuration=None):  # noqa: E501
        """FilterInstrumentEvents - a model defined in OpenAPI"
        
        :param instrument_event_ids:  The set of instrument events ids.
        :type instrument_event_ids: list[str]
        :param corporate_action_source_ids:  The corporate action sources in which to search for events.
        :type corporate_action_source_ids: list[lusid.ResourceId]
        :param lusid_instrument_ids:  The lusid identifers for instruments on which the events apply.
        :type lusid_instrument_ids: list[str]
        :param instrument_scopes:  The set of scopes in which the instruments of interest belong.
        :type instrument_scopes: list[str]
        :param instrument_event_types:  The subset of instrument event types.
        :type instrument_event_types: list[str]

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._instrument_event_ids = None
        self._corporate_action_source_ids = None
        self._lusid_instrument_ids = None
        self._instrument_scopes = None
        self._instrument_event_types = None
        self.discriminator = None

        self.instrument_event_ids = instrument_event_ids
        self.corporate_action_source_ids = corporate_action_source_ids
        self.lusid_instrument_ids = lusid_instrument_ids
        self.instrument_scopes = instrument_scopes
        self.instrument_event_types = instrument_event_types

    @property
    def instrument_event_ids(self):
        """Gets the instrument_event_ids of this FilterInstrumentEvents.  # noqa: E501

        The set of instrument events ids.  # noqa: E501

        :return: The instrument_event_ids of this FilterInstrumentEvents.  # noqa: E501
        :rtype: list[str]
        """
        return self._instrument_event_ids

    @instrument_event_ids.setter
    def instrument_event_ids(self, instrument_event_ids):
        """Sets the instrument_event_ids of this FilterInstrumentEvents.

        The set of instrument events ids.  # noqa: E501

        :param instrument_event_ids: The instrument_event_ids of this FilterInstrumentEvents.  # noqa: E501
        :type instrument_event_ids: list[str]
        """

        self._instrument_event_ids = instrument_event_ids

    @property
    def corporate_action_source_ids(self):
        """Gets the corporate_action_source_ids of this FilterInstrumentEvents.  # noqa: E501

        The corporate action sources in which to search for events.  # noqa: E501

        :return: The corporate_action_source_ids of this FilterInstrumentEvents.  # noqa: E501
        :rtype: list[lusid.ResourceId]
        """
        return self._corporate_action_source_ids

    @corporate_action_source_ids.setter
    def corporate_action_source_ids(self, corporate_action_source_ids):
        """Sets the corporate_action_source_ids of this FilterInstrumentEvents.

        The corporate action sources in which to search for events.  # noqa: E501

        :param corporate_action_source_ids: The corporate_action_source_ids of this FilterInstrumentEvents.  # noqa: E501
        :type corporate_action_source_ids: list[lusid.ResourceId]
        """

        self._corporate_action_source_ids = corporate_action_source_ids

    @property
    def lusid_instrument_ids(self):
        """Gets the lusid_instrument_ids of this FilterInstrumentEvents.  # noqa: E501

        The lusid identifers for instruments on which the events apply.  # noqa: E501

        :return: The lusid_instrument_ids of this FilterInstrumentEvents.  # noqa: E501
        :rtype: list[str]
        """
        return self._lusid_instrument_ids

    @lusid_instrument_ids.setter
    def lusid_instrument_ids(self, lusid_instrument_ids):
        """Sets the lusid_instrument_ids of this FilterInstrumentEvents.

        The lusid identifers for instruments on which the events apply.  # noqa: E501

        :param lusid_instrument_ids: The lusid_instrument_ids of this FilterInstrumentEvents.  # noqa: E501
        :type lusid_instrument_ids: list[str]
        """

        self._lusid_instrument_ids = lusid_instrument_ids

    @property
    def instrument_scopes(self):
        """Gets the instrument_scopes of this FilterInstrumentEvents.  # noqa: E501

        The set of scopes in which the instruments of interest belong.  # noqa: E501

        :return: The instrument_scopes of this FilterInstrumentEvents.  # noqa: E501
        :rtype: list[str]
        """
        return self._instrument_scopes

    @instrument_scopes.setter
    def instrument_scopes(self, instrument_scopes):
        """Sets the instrument_scopes of this FilterInstrumentEvents.

        The set of scopes in which the instruments of interest belong.  # noqa: E501

        :param instrument_scopes: The instrument_scopes of this FilterInstrumentEvents.  # noqa: E501
        :type instrument_scopes: list[str]
        """

        self._instrument_scopes = instrument_scopes

    @property
    def instrument_event_types(self):
        """Gets the instrument_event_types of this FilterInstrumentEvents.  # noqa: E501

        The subset of instrument event types.  # noqa: E501

        :return: The instrument_event_types of this FilterInstrumentEvents.  # noqa: E501
        :rtype: list[str]
        """
        return self._instrument_event_types

    @instrument_event_types.setter
    def instrument_event_types(self, instrument_event_types):
        """Sets the instrument_event_types of this FilterInstrumentEvents.

        The subset of instrument event types.  # noqa: E501

        :param instrument_event_types: The instrument_event_types of this FilterInstrumentEvents.  # noqa: E501
        :type instrument_event_types: list[str]
        """

        self._instrument_event_types = instrument_event_types

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterInstrumentEvents):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilterInstrumentEvents):
            return True

        return self.to_dict() != other.to_dict()
