{"version":3,"sources":["style.module.scss","SendGeometry.tsx","index.tsx"],"names":["module","exports","SendGeometry","props","_autoUpdate","ms","setTimeout","action","state","isPollinationModel","msg","_sendMessageTo","_setStateNow","console","log","render","className","styles","poCheckboxLabel","poCheckbox","type","defaultChecked","onChange","_onChange","disabled","onFocus","_onFocus","onBlur","_onBlur","poCheckboxSpan","label","msgObject","status","setState","prevState","data","uniqueId","options","isChecked","command","window","parent","chrome","webview","args","json","JSON","stringify","postMessage","event","check","target","checked","dotNetAction","isFocused","delay","initialState","initialAction","this","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2dfeb189.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poCheckboxLabel\":\"style_poCheckboxLabel__2IHB4\",\"poCheckboxSpan\":\"style_poCheckboxSpan__ltXcy\",\"poCheckbox\":\"style_poCheckbox__3Q56z\"};","import {\n  ComponentProps,\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from 'streamlit-component-lib'\nimport React, { \n  ReactNode } from 'react'\n\nimport styles from './style.module.scss';\n\ninterface Options {\n  layer: string\n  units: string\n}\n\ninterface State {\n  action: string\n  isPollinationModel: boolean\n  data: string\n  label: string\n  defaultChecked: boolean\n  uniqueId: string\n  options: Options\n  delay: number\n  isFocused: boolean\n  isChecked: boolean\n}\n\ndeclare global {\n  interface Window {\n    chrome: any;\n  }\n}\n\nclass SendGeometry extends StreamlitComponentBase<State> {\n\n  public constructor(props: ComponentProps) {\n    super(props)\n\n    // Values from user input\n    const data = this.props.args['data'] as string\n    const uniqueId = this.props.args['unique_id'] as string\n    const defaultChecked = this.props.args['default_checked'] as boolean\n    const options = this.props.args['options'] as Options\n    const label = this.props.args['label'] as string\n    const delay = this.props.args['delay'] as number\n    const isPollinationModel = this.props.args['is_pollination_model'] as boolean\n\n    const initialState = {\n      action: '',\n      data: data,\n      uniqueId: uniqueId,\n      defaultChecked: defaultChecked,\n      options: options,\n      label: label,\n      delay: delay,\n      isPollinationModel: isPollinationModel,\n      isChecked: defaultChecked ? true : false\n    } as State\n\n    this.state = {\n      ...initialState\n    }\n\n    // Send message to DotNet\n    if (defaultChecked)\n    {\n      const initialAction = isPollinationModel ? \n        'CombinedRenderingPollinationModel' : 'CombinedRendering';\n      this._sendMessageTo(initialAction);\n      // Update only the action\n      this.setState({action: initialAction});\n    }\n  }\n\n  // // Live refresh\n  // componentDidMount() {\n  //   console.log('[POLLINATION-DEBUG]: mount.');\n  //   Streamlit.setFrameHeight();\n  // }\n\n  componentWillUnmount()\n  {\n    if (this.state.isChecked)\n    {\n      // Disable draw\n      var action = this.state.isPollinationModel ?\n      'CombinedRenderingPollinationModel' : \n      'CombinedRendering';\n      let msg = this._sendMessageTo(action);\n      console.log('[POLLINATION-DEBUG]: unmount.');\n    }\n  }\n\n  private _autoUpdate = (ms: number) : void => {\n    setTimeout(() => {\n      // Disable draw firstly\n      var action = this.state.isPollinationModel ?\n      'CombinedRenderingPollinationModel' : \n      'CombinedRendering';\n      let msg = this._sendMessageTo(action);\n      // Save data inside the state\n      this._setStateNow(msg, true);\n      console.log('[POLLINATION-DEBUG]: auto-update.');\n    }, ms);\n  }\n\n  componentDidUpdate() {\n    if (this.state.isChecked && \n      this.state.data != this.props.args['data'])\n    {\n      this._autoUpdate(this.state.delay);\n    }\n  }\n\n  public render = (): ReactNode => {\n    return (\n      <label className={styles.poCheckboxLabel}>\n        <input \n          className={styles.poCheckbox}\n          type='checkbox' \n          defaultChecked={this.state.defaultChecked} \n          onChange={this._onChange} \n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}/>\n        <span className={styles.poCheckboxSpan}>\n          {this.state.label}\n        </span>\n      </label>\n    )\n  }\n\n  private _setStateNow = (msgObject: State, \n    status: boolean): void =>{\n    this.setState(\n      (prevState) => ({ \n        ...prevState, \n        action: msgObject.action,\n        data: msgObject.data,\n        uniqueId: msgObject.uniqueId,\n        options: msgObject.options,\n        isChecked: status\n      })\n    );\n    console.log('[POLLINATION-DEBUG]: JSON string sent.');\n  }\n\n  private _sendMessageTo = (command: string): State => {\n    if (typeof window.parent.chrome != 'undefined') {\n      if (typeof window.parent.chrome.webview == 'undefined')\n      {\n        console.log('[POLLINATION-DEBUG]: webview not found.');\n        return this.state;\n      }\n      \n      var msgObject = {\n        action: command,\n        data: this.props.args['data'],\n        uniqueId: this.props.args['unique_id'],\n        options: this.props.args['options']\n      } as State;\n\n      var json = JSON.stringify(msgObject);\n      window.parent.chrome.webview.postMessage(json);\n      return msgObject;\n    }\n    else\n    {\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\n      return this.state;\n    }\n  }\n\n  private _onChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    let check = event.target.checked;\n    let dotNetAction = (check) ? \n      'DrawGeometry' : \n      'DisableDraw';\n    if (this.state.isPollinationModel)\n    {\n      dotNetAction = (check) ? \n      'DrawPollinationModel' : \n      'DisableDrawPollinationModel';\n    }\n    let msg = this._sendMessageTo(dotNetAction);\n    this._setStateNow(msg, check);\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(SendGeometry)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SendGeometry from \"./SendGeometry\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SendGeometry />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}