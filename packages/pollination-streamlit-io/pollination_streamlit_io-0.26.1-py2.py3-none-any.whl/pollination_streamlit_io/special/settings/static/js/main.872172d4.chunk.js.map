{"version":3,"sources":["style.module.scss","SendSettings.tsx","index.tsx"],"names":["module","exports","SendSettings","props","render","className","styles","poCheckboxLabel","poCheckbox","type","defaultChecked","state","onChange","_onChange","disabled","onFocus","_onFocus","onBlur","_onBlur","poCheckboxSpan","_isSettingsOptions","obj","e","_sendMessageTo","window","parent","chrome","webview","console","log","data","args","isObj","String","msgObject","action","toString","startsWith","message","hostObjects","sync","settings","GetModelSettings","Streamlit","setComponentValue","JSON","parse","json","stringify","postMessage","_setStateNow","status","setState","prevState","isChecked","_autoUpdate","ms","setTimeout","msg","event","check","target","checked","isFocused","initialState","delay","this","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.872172d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poCheckboxLabel\":\"style_poCheckboxLabel__2IHB4\",\"poCheckboxSpan\":\"style_poCheckboxSpan__ltXcy\",\"poCheckbox\":\"style_poCheckbox__3Q56z\"};","import {\n  ComponentProps,\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from 'streamlit-component-lib'\nimport React, { \n  ReactNode } from 'react'\n\nimport styles from './style.module.scss';\n\ninterface Coordinates {\n  lat: number\n  lon: number\n}\n\ninterface SettingsOptions {\n  earth_anchor?: Coordinates\n  units?: number\n}\n\ninterface State {\n  action: string\n  defaultChecked: boolean\n  data: string|SettingsOptions;\n  delay: number\n  isFocused: boolean\n  isChecked: boolean\n}\n\ndeclare global {\n  interface Window {\n    chrome: any\n    genPollinationToken: any\n  }\n}\n\nclass SendSettings extends StreamlitComponentBase<State> {\n\n  public constructor(props: ComponentProps) {\n    super(props)\n\n    // Values from user input\n    const data = this.props.args['data']\n    const defaultChecked = this.props.args['default_checked'] as boolean\n    const delay = this.props.args['delay'] as number\n\n    const initialState = {\n      data: data,\n      defaultChecked: defaultChecked,\n      isChecked: defaultChecked ? true : false,\n      delay: delay\n    } as State\n\n    this.state = {\n      ...initialState\n    };\n    \n    // Send message to DotNet\n    if (defaultChecked && data)\n    {\n      this._sendMessageTo();\n    }\n  }\n\n  public render = (): ReactNode => {\n    return (\n      <label className={styles.poCheckboxLabel}>\n        <input \n          className={styles.poCheckbox}\n          type='checkbox' \n          defaultChecked={this.state.defaultChecked} \n          onChange={this._onChange} \n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}/>\n        <span className={styles.poCheckboxSpan}>\n          Settings\n        </span>\n      </label>\n    )\n  }\n\n  private _isSettingsOptions = (obj:any): boolean => {\n      if (!obj) return false;\n      try {\n          const check = obj as SettingsOptions;\n          return 'earth_anchor' in check || \n              'units' in check;\n      } catch (e) {\n          return false;\n      }\n  }\n\n  private _sendMessageTo = (): State => {\n    if (typeof window.parent.chrome != 'undefined') {\n      if (typeof window.parent.chrome.webview == 'undefined')\n      {\n        console.log('[POLLINATION-DEBUG]: webview not found.');\n        return this.state;\n      }\n      let data = this.props.args['data']\n\n      let isObj = false;\n      if (!data)\n      {\n        return {} as State;\n      }\n      else if (data instanceof(String))\n      {\n        isObj = false;\n      }\n      else if (this._isSettingsOptions(data))\n      {\n        isObj = true;\n      }\n\n      var msgObject = {\n        action: 'SetModelSettings',\n        data: data\n      } as State;\n      \n      console.log(`_sendMessageTo: ${data}`);\n      if (!isObj && data.toString()\n        .startsWith('SETTINGS'))\n      {\n        const message = window.parent.chrome.webview\n        .hostObjects.sync.settings.GetModelSettings();\n        Streamlit.setComponentValue(JSON.parse(message)); \n      } \n      else if (isObj)\n      {\n        var json = JSON.stringify(msgObject);\n        window.parent.chrome.webview.postMessage(json);\n      }\n\n      return msgObject;\n    }\n    else\n    {\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\n      return this.state;\n    }\n  }\n\n  private _setStateNow = (msgObject: State, \n    status: boolean): void =>{\n    this.setState(\n      (prevState) => ({ \n        ...prevState, \n        data: msgObject.data,\n        isChecked: status\n      })\n    );\n    console.log('[POLLINATION-DEBUG]: JSON string sent.');\n  }\n\n  private _autoUpdate = (ms: number) : void => {\n    setTimeout(() => {\n      let msg = this._sendMessageTo();\n      // Save data inside the state\n      this._setStateNow(msg, true);\n      console.log('[POLLINATION-DEBUG]: auto-update.');\n    }, ms);\n  }\n\n  componentDidUpdate() {\n    if (this.state.isChecked && \n      this.state.data &&\n      this.state.data !== this.props.args['data'])\n    {\n      this._autoUpdate(this.state.delay);\n    }\n  }\n\n  private _onChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    let check = event.target.checked as boolean;\n    let data = this.props.args['data']\n\n    this.setState({\n      isChecked: check, \n      data: data\n    });\n    if (check && this.state.data) {\n      console.log(`_onChange: ${data}`);\n      this._sendMessageTo();\n    }\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(SendSettings)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SendSettings from \"./SendSettings\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SendSettings />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}