{"version":3,"sources":["style.module.scss","SpecialSync.tsx","index.tsx"],"names":["module","exports","Platform","SpecialSync","props","render","className","styles","poCheckboxLabel","poCheckbox","type","defaultChecked","state","onChange","_onChange","disabled","onFocus","_onFocus","onBlur","_onBlur","poCheckboxSpan","_genToken","token","platform","d","delay","console","log","rhino","getResult","ms","Promise","resolve","reject","setTimeout","sync_token","window","parent","chrome","webview","hostObjects","sync","connection","PassToken","isChecked","then","result","Streamlit","setComponentValue","sketchup","event","check","target","checked","setState","isFocused","args","initialState","genPollinationToken","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,gBAAkB,+BAA+B,eAAiB,8BAA8B,WAAa,4B,+EC0B1HC,E,uGAAAA,O,uBAAAA,I,iBAAAA,I,kBAAAA,M,SAMCC,E,kDAEJ,WAAmBC,GAAwB,IAAD,uBACxC,cAAMA,IAmBDC,OAAS,WACd,OACE,2BAAOC,UAAWC,IAAOC,iBACvB,2BACEF,UAAWC,IAAOE,WAClBC,KAAK,WACLC,eAAgB,EAAKC,MAAMD,eAC3BE,SAAU,EAAKC,UACfC,SAAU,EAAKX,MAAMW,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,UACf,0BAAMb,UAAWC,IAAOa,gBAAxB,UA/BoC,EAsClCC,UAAY,SAACC,GAER,IADXC,EACU,uDADM,QAEVC,EAAI,EAAKZ,MAAMa,MAGrB,GAFAC,QAAQC,IAAI,EAAKf,MAAMa,OAEnBF,GAAUrB,EAASA,EAAS0B,OAChC,CACE,IAAMC,EAAY,SAACC,GAUjB,OATc,IAAIC,SAAQ,SAACC,EAASC,GAAV,OAC1BC,YAAW,WACP,IAAIC,EAAaC,OAAOC,OAAOC,OAAOC,QAAQC,YAC3CC,KAAKC,WAAWC,UAAUrB,GAE7BU,EADaG,KAEZL,OAMH,EAAKlB,MAAMgC,WACbf,EAAUL,GAAGqB,MAAK,SAAAC,GACdC,IAAUC,kBAAkBF,WAGzBvB,GAAUrB,EAASA,EAAS+C,WAEjC,EAAKrC,MAAMgC,WACbV,YAAW,kBAAMa,IAAUC,kBAAkB1B,KAAQE,IAnEjB,EAwElCV,UAAY,SAACoC,GACnB,IAAIC,EAAQD,EAAME,OAAOC,QACzB,EAAKC,SAAS,CAACV,UAAWO,KA1Ec,EA6ElClC,SAAW,WACjB,EAAKqC,SAAS,CAAEC,WAAW,KA9Ea,EAiFlCpC,QAAU,WAChB,EAAKmC,SAAS,CAAEC,WAAW,KA9E3B,IAAM5C,EAAiB,EAAKP,MAAMoD,KAAX,gBAGjBC,EAAe,CACnB9C,eAAgBA,EAChBiC,YAAWjC,EACXc,MALY,EAAKrB,MAAMoD,KAAX,OAL0B,OAaxC,EAAK5C,MAAL,eACK6C,GAGLrB,OAAOC,OAAOqB,oBAAsB,EAAKrC,UAjBD,E,uBAFlBsC,KAwFXC,cAAwBzD,GCrHvC0D,IAASxD,OACP,kBAAC,IAAMyD,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.4cb49abe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poCheckboxLabel\":\"style_poCheckboxLabel__2IHB4\",\"poCheckboxSpan\":\"style_poCheckboxSpan__ltXcy\",\"poCheckbox\":\"style_poCheckbox__3Q56z\"};","import {\r\n  ComponentProps,\r\n  withStreamlitConnection,\r\n  StreamlitComponentBase,\r\n  Streamlit,\r\n} from 'streamlit-component-lib'\r\nimport React, { \r\n  ReactNode } from 'react'\r\n\r\nimport styles from './style.module.scss';\r\n\r\ninterface State {\r\n  defaultChecked: boolean\r\n  delay: number\r\n  isFocused: boolean\r\n  isChecked: boolean\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    chrome: any\r\n    genPollinationToken: any\r\n    sketchup: any\r\n  }\r\n}\r\n\r\n// Define here the available hosts\r\nenum Platform {\r\n  sketchup,\r\n  rhino,\r\n  revit\r\n}\r\n\r\nclass SpecialSync extends StreamlitComponentBase<State> {\r\n\r\n  public constructor(props: ComponentProps) {\r\n    super(props)\r\n\r\n    // Values from user input\r\n    const defaultChecked = this.props.args['default_checked'] as boolean\r\n    const delay = this.props.args['delay'] as number\r\n\r\n    const initialState = {\r\n      defaultChecked: defaultChecked,\r\n      isChecked: defaultChecked ? true : false,\r\n      delay: delay\r\n    } as State\r\n\r\n    this.state = {\r\n      ...initialState\r\n    };\r\n    \r\n    window.parent.genPollinationToken = this._genToken;\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n    return (\r\n      <label className={styles.poCheckboxLabel}>\r\n        <input \r\n          className={styles.poCheckbox}\r\n          type='checkbox' \r\n          defaultChecked={this.state.defaultChecked} \r\n          onChange={this._onChange} \r\n          disabled={this.props.disabled}\r\n          onFocus={this._onFocus}\r\n          onBlur={this._onBlur}/>\r\n        <span className={styles.poCheckboxSpan}>\r\n          Sync\r\n        </span>\r\n      </label>\r\n    )\r\n  }\r\n\r\n  private _genToken = (token: string, \r\n    platform:string='rhino') \r\n    : void => {\r\n    const d = this.state.delay;\r\n    console.log(this.state.delay);\r\n\r\n    if (platform==Platform[Platform.rhino])\r\n    {\r\n      const getResult = (ms: number) => {\r\n        var promise = new Promise((resolve, reject) => \r\n        setTimeout(() => {\r\n            var sync_token = window.parent.chrome.webview.hostObjects\r\n              .sync.connection.PassToken(token);\r\n            let result = sync_token;\r\n            resolve(result);\r\n          }, ms)\r\n        );\r\n  \r\n        return promise;\r\n      };\r\n  \r\n      if (this.state.isChecked) {\r\n        getResult(d).then(result => {\r\n            Streamlit.setComponentValue(result);\r\n          });\r\n      }\r\n    } else if (platform==Platform[Platform.sketchup])\r\n    {\r\n      if (this.state.isChecked) {\r\n        setTimeout(() => Streamlit.setComponentValue(token), d);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    let check = event.target.checked;\r\n    this.setState({isChecked: check})\r\n  }\r\n\r\n  private _onFocus = (): void => {\r\n    this.setState({ isFocused: true })\r\n  }\r\n\r\n  private _onBlur = (): void => {\r\n    this.setState({ isFocused: false })\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(SpecialSync)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SpecialSync from \"./SpecialSync\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SpecialSync />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}