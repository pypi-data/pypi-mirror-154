{"version":3,"sources":["style.module.scss","SendGeometry.tsx","index.tsx"],"names":["module","exports","Platform","SendGeometry","props","render","labels","args","className","styles","poButton","onClick","_onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","style","margin","src","process","alt","platform","newState","toLowerCase","rhino","revit","_dotNetRun","sketchup","_rubyRun","_setStateNow","window","parent","message","action","data","uniqueId","options","json","JSON","stringify","send_geometry","console","log","state","chrome","webview","postMessage","setState","prevState","Streamlit","setComponentValue","isFocused","initialState","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c7deb0b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poButton\":\"style_poButton__3x8Ka\"};","import {\r\n  ComponentProps,\r\n  withStreamlitConnection,\r\n  StreamlitComponentBase,\r\n  Streamlit,\r\n} from 'streamlit-component-lib'\r\nimport React, { ReactNode } from 'react'\r\n\r\nimport styles from './style.module.scss';\r\n\r\n// Define here the available hosts\r\nenum Platform {\r\n  sketchup,\r\n  rhino,\r\n  revit\r\n}\r\n\r\ninterface Options {\r\n  layer: string\r\n  units: string\r\n}\r\n\r\ninterface State {\r\n  action: string\r\n  data: string\r\n  uniqueId: string\r\n  options: Options\r\n  platform: string\r\n  isFocused: boolean\r\n}\r\n\r\ninterface Labels {\r\n  [key: string]: string;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    chrome: any;\r\n    sketchup: any;\r\n  }\r\n}\r\n\r\nclass SendGeometry extends StreamlitComponentBase<State> {\r\n\r\n  public constructor(props: ComponentProps) {\r\n    super(props)\r\n\r\n    // Values from user input\r\n    const action = this.props.args['action'] as string;\r\n    const data = this.props.args['data'] as string;\r\n    const uniqueId = this.props.args['unique_id'] as string;\r\n    const options = this.props.args['options'] as Options;\r\n    const platform = this.props.args['platform'] as string;\r\n\r\n    const initialState = {\r\n      action: action,\r\n      data: data,\r\n      uniqueId: uniqueId,\r\n      options: options,\r\n      platform: platform.toLowerCase()\r\n    } as State\r\n\r\n    this.state = {\r\n      ...initialState\r\n    }\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n    let labels: Labels = {\r\n      'BakeGeometry': 'Bake Geometry',\r\n      'ClearGeometry': 'Clear Geometry',\r\n      'DrawGeometry': 'Draw Geometry',\r\n      'DisableDraw': 'Disable Draw',\r\n      'BakePollinationModel': 'Bake Pollination Model',\r\n      'AddResults' : 'Add Results',\r\n      'ClearResults' : 'Clear Results' \r\n    }\r\n\r\n    const imgStyle = {\r\n      margin: '0px 3px 2px 0px'\r\n    }\r\n\r\n    return (\r\n      <span>\r\n        { this.props.args['action'] in labels && (\r\n        <button\r\n          className={styles.poButton}\r\n          onClick={this._onClicked}\r\n          disabled={this.props.disabled}\r\n          onFocus={this._onFocus}\r\n          onBlur={this._onBlur}\r\n        >\r\n          <span>\r\n            <img style={imgStyle} src={process.env.PUBLIC_URL + '/img/pollination.png'} alt='logo' />\r\n          </span>\r\n          { labels[this.props.args['action']] }\r\n        </button>\r\n        )}\r\n      </span>\r\n    )\r\n  }\r\n\r\n  private _onClicked = (): void => {\r\n    const platform = this.props.args['platform'] as string;\r\n    let newState = { platform: platform.toLowerCase() } as State;\r\n    if (platform.toLowerCase() == Platform[Platform.rhino] || platform.toLowerCase() == Platform[Platform.revit]) {\r\n      newState = this._dotNetRun();\r\n    } else if (platform.toLowerCase() == Platform[Platform.sketchup]) {\r\n      newState = this._rubyRun(); \r\n    }\r\n    this._setStateNow(newState);\r\n  }\r\n\r\n  private _rubyRun = (): State => {\r\n    if (typeof window.parent.sketchup != 'undefined') \r\n    {\r\n      var message = {\r\n        action: this.props.args['action'],\r\n        data: this.props.args['data'],\r\n        uniqueId: this.props.args['unique_id'],\r\n        options: this.props.args['options']\r\n      };\r\n      var json = JSON.stringify(message);\r\n      window.parent.sketchup.send_geometry(json);\r\n\r\n      const platform = this.props.args['platform'] as string;\r\n\r\n      var newState = {\r\n        action: message.action,\r\n        data: message.data,\r\n        uniqueId: message.uniqueId,\r\n        options: message.options,\r\n        platform: platform.toLowerCase()\r\n      } as State;\r\n  \r\n      console.log('[POLLINATION-DEBUG]: JSON string sent.');\r\n      return newState;\r\n    }\r\n    else {\r\n      console.log('[POLLINATION-DEBUG]: sketchup not found.');\r\n      return this.state;\r\n    }\r\n  }\r\n\r\n  private _dotNetRun = (): State => {\r\n    if (typeof window.parent.chrome != 'undefined') {\r\n      if (typeof window.parent.chrome.webview == 'undefined')\r\n      {\r\n        console.log('[POLLINATION-DEBUG]: webview not found.');\r\n        return this.state;\r\n      }\r\n      \r\n      var message = {\r\n        action: this.props.args['action'],\r\n        data: this.props.args['data'],\r\n        uniqueId: this.props.args['unique_id'],\r\n        options: this.props.args['options']\r\n      };\r\n      var json = JSON.stringify(message);\r\n      window.parent.chrome.webview.postMessage(json);\r\n\r\n      const platform = this.props.args['platform'] as string;\r\n\r\n      var newState = {\r\n        action: message.action,\r\n        data: message.data,\r\n        uniqueId: message.uniqueId,\r\n        options: message.options,\r\n        platform: platform.toLowerCase()\r\n      } as State;\r\n  \r\n      console.log('[POLLINATION-DEBUG]: JSON string sent.');\r\n      return newState;\r\n    }\r\n    else\r\n    {\r\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\r\n      return this.state;\r\n    }\r\n  }\r\n\r\n  private _setStateNow = (newState: State): void => {\r\n    this.setState(\r\n      (prevState) => ({ \r\n        ...prevState, \r\n        action: newState.action,\r\n        data: newState.data,\r\n        uniqueId: newState.uniqueId,\r\n        options: newState.options\r\n      }),\r\n      () => Streamlit.setComponentValue(this.state.action)\r\n    );\r\n  }\r\n\r\n  private _onFocus = (): void => {\r\n    this.setState({ isFocused: true })\r\n  }\r\n\r\n  private _onBlur = (): void => {\r\n    this.setState({ isFocused: false })\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(SendGeometry)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SendGeometry from \"./SendGeometry\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SendGeometry />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}