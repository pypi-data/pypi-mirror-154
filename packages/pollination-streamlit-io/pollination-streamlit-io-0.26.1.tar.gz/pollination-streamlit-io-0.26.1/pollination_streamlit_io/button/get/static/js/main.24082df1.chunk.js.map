{"version":3,"sources":["style.module.scss","GetGeometry.tsx","index.tsx"],"names":["module","exports","Platform","GetGeometry","props","render","className","styles","poButton","onClick","_onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","style","margin","src","process","alt","state","buttonText","syncToken","_skpHandlerFnc","selection","window","parent","sketchup","args","get_model","onCompleted","res","console","log","message","JSON","parse","token","setState","geometry","Geometry","identifier","Identifier","Streamlit","setComponentValue","get_geometry","_rhinoHandlerFnc","chrome","webview","hostObjects","sync","hbjson","PassPollinationModel","model","PassJsonGeometry","arr","platform","toLowerCase","rhino","isFocused","isPollinationModel","initialState","this","stateIdentifiers","map","String","id","split","includes","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24082df1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poButton\":\"style_poButton__3x8Ka\"};","import {\r\n  ComponentProps,\r\n  withStreamlitConnection,\r\n  StreamlitComponentBase,\r\n  Streamlit,\r\n} from 'streamlit-component-lib'\r\nimport React, { ReactNode } from 'react'\r\n\r\nimport styles from './style.module.scss';\r\n\r\n// Define here the available hosts\r\nenum Platform {\r\n  sketchup,\r\n  rhino,\r\n  revit\r\n}\r\n\r\ninterface State {\r\n  geometry: any\r\n  identifier: any\r\n  isPollinationModel: boolean\r\n  platform: string\r\n  buttonText: string\r\n  syncToken: string\r\n  isFocused: boolean\r\n}\r\n\r\ninterface Message {\r\n  Geometry: any\r\n  Identifier: any\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    chrome: any;\r\n    sketchup: any;\r\n  }\r\n}\r\n\r\nclass GetGeometry extends StreamlitComponentBase<State> {\r\n\r\n  public constructor(props: ComponentProps) {\r\n    super(props)\r\n\r\n    // Values from user input\r\n    const isPollinationModel = this.props.args['is_pollination_model'] as boolean;\r\n    const platform = this.props.args['platform'] as string;\r\n    const buttonText = this.props.args['button_text'] as string;\r\n    const syncToken = this.props.args['sync_token'] as string;\r\n    \r\n    let btn_txt = '';\r\n    if (buttonText) {\r\n      btn_txt = buttonText;\r\n    } else {\r\n      btn_txt = isPollinationModel ? 'Get Pollination Model' : 'Get Geometry'\r\n    }\r\n    \r\n    const initialState = { \r\n      geometry: '', \r\n      identifier: '',\r\n      isPollinationModel: isPollinationModel,\r\n      buttonText: btn_txt,\r\n      syncToken: syncToken,\r\n      platform: platform.toLowerCase()\r\n    } as State\r\n\r\n    this.state = {\r\n      ...initialState\r\n    }\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n\r\n    const imgStyle = {\r\n      margin: '0px 3px 2px 0px'\r\n    }\r\n    \r\n    return (\r\n      <span>\r\n        <button\r\n          className={styles.poButton}\r\n          onClick={this._onClicked}\r\n          disabled={this.props.disabled}\r\n          onFocus={this._onFocus}\r\n          onBlur={this._onBlur}\r\n        >\r\n          <span>\r\n            <img style={imgStyle} \r\n            src={process.env.PUBLIC_URL + '/img/pollination.png'} \r\n            alt='logo' />\r\n          </span>{ this.state.buttonText }\r\n          {this.state.syncToken !== '' && ' - Sync'}\r\n        </button>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Empty identifier is not allowed\r\n    if (this.state.identifier === '')\r\n      return;\r\n    \r\n    // Same synctoken is not allowed\r\n    if (this.props.args['sync_token'] \r\n      === this.state.syncToken )\r\n      return;\r\n\r\n    // Try get array GUIDs\r\n    let stateIdentifiers = [];\r\n    if (this.state.platform == Platform[Platform.rhino]) {\r\n      stateIdentifiers = JSON\r\n      .parse(this.state.identifier) as Array<string>;\r\n    }\r\n    else if(this.state.platform == Platform[Platform.sketchup]) {\r\n      stateIdentifiers = this.state.identifier\r\n    } else\r\n    {\r\n      // TODO: revit\r\n      stateIdentifiers = [];\r\n    }\r\n    stateIdentifiers = stateIdentifiers.map(String)\r\n\r\n    // Empty GUIDs\r\n    if (!stateIdentifiers)\r\n      return;\r\n    \r\n    // Try get the key GUID as trigger\r\n    const id = this.props.args['sync_token']\r\n      .split(':', 1)[0];\r\n    \r\n    if (stateIdentifiers.includes(id)\r\n      && this.state.syncToken \r\n      !== this.props.args['sync_token'])\r\n    {\r\n      if (this.state.platform == Platform[Platform.rhino]) {\r\n        this._rhinoHandlerFnc();\r\n      }\r\n      else if (this.state.platform == Platform[Platform.sketchup]) {\r\n        this._skpHandlerFnc();\r\n      }\r\n      console.log('[POLLINATION-DEBUG]: auto-update.');\r\n    }\r\n  }\r\n\r\n  private _skpHandlerFnc = (selection: boolean=false): void => {\r\n    if (typeof window.parent.sketchup != 'undefined') \r\n    {\r\n      // ruby invoke\r\n      if (this.props.args['is_pollination_model']) {\r\n        window.parent.sketchup.get_model(selection, {\r\n          onCompleted: (res: string) => {\r\n            console.log('[POLLINATION-DEBUG]: sketchup ruby done.');\r\n            const message: Message = JSON.parse(res);\r\n            const token = this.props.args['sync_token'] as string;\r\n            this.setState( {...this.state,\r\n              syncToken: token,\r\n              geometry: message.Geometry,\r\n              identifier: message.Identifier}, \r\n              () => Streamlit.setComponentValue(this.state.geometry))\r\n          }});\r\n      } else {\r\n        window.parent.sketchup.get_geometry(this.props.args['key'],\r\n          selection, {\r\n          onCompleted: (res: string) => {\r\n            console.log('[POLLINATION-DEBUG]: sketchup ruby done.');\r\n            const message: Message = JSON.parse(res);\r\n            const token = this.props.args['sync_token'] as string;\r\n            this.setState( {...this.state,\r\n              syncToken: token,\r\n              geometry: message.Geometry,\r\n              identifier: message.Identifier}, \r\n              () => Streamlit.setComponentValue(this.state.geometry))\r\n          }});\r\n      }\r\n    }\r\n    else {\r\n      console.log('[POLLINATION-DEBUG]: sketchup not found.');\r\n    }\r\n  }\r\n\r\n  private _rhinoHandlerFnc = (selection: boolean=false): void => {\r\n    if (typeof window.parent.chrome !== 'undefined') {\r\n      if (typeof window.parent.chrome.webview === 'undefined')\r\n      {\r\n        console.log('[POLLINATION-DEBUG]: webview not found.');\r\n      } else {\r\n        let res: Message = {\r\n          Geometry: null,\r\n          Identifier: null\r\n        };\r\n        const token = this.props.args['sync_token'] as string;\r\n        if (!this.props.args['is_pollination_model']) {\r\n          res = window.parent.chrome.webview\r\n          .hostObjects.sync.geometry.PassJsonGeometry(\r\n            this.props.args['key'],\r\n            selection);\r\n          const arr = JSON.parse(res.Geometry); \r\n          this.setState( {...this.state, \r\n            syncToken: token,\r\n            geometry: arr,\r\n            identifier: res.Identifier}, \r\n            () => Streamlit.setComponentValue(this.state.geometry))\r\n        } else {\r\n          res = window.parent.chrome.webview\r\n          .hostObjects.sync.hbjson.PassPollinationModel(selection);\r\n          const model = JSON.parse(res.Geometry); \r\n          this.setState( {...this.state,\r\n            syncToken: token,\r\n            geometry: model,\r\n            identifier: res.Identifier}, \r\n            () => Streamlit.setComponentValue(this.state.geometry))       \r\n        }\r\n      }\r\n    }\r\n    else\r\n    {\r\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\r\n    }\r\n  }\r\n\r\n  private _onClicked = (): void => {\r\n    const platform = this.props.args['platform'] as string;\r\n    if (platform.toLowerCase() == Platform[Platform.rhino]) { \r\n      this._rhinoHandlerFnc(true); \r\n    } else if (platform.toLowerCase() == Platform[Platform.sketchup]) {\r\n      this._skpHandlerFnc(true);\r\n    }\r\n  }\r\n\r\n  private _onFocus = (): void => {\r\n    this.setState({ isFocused: true })\r\n  }\r\n\r\n  private _onBlur = (): void => {\r\n    this.setState({ isFocused: false })\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(GetGeometry)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport GetGeometry from \"./GetGeometry\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <GetGeometry />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}