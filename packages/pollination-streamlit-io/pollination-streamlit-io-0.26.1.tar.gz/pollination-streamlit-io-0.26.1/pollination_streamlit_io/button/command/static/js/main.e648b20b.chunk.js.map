{"version":3,"sources":["style.module.scss","RunCommand.tsx","index.tsx"],"names":["module","exports","RunCommand","props","render","className","styles","poButton","onClick","_onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","style","margin","src","process","alt","window","parent","chrome","webview","console","log","msgObject","action","commandString","args","commandOptions","json","JSON","stringify","postMessage","setState","prevState","Streamlit","setComponentValue","state","isFocused","initialState","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,SAAW,0B,4KCsBvBC,E,kDACJ,WAAmBC,GAAwB,IAAD,uBACxC,cAAMA,IAgBDC,OAAS,WAMd,OACE,8BACE,4BACEC,UAAWC,IAAOC,SAClBC,QAAS,EAAKC,WACdC,SAAU,EAAKP,MAAMO,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,SAEb,8BACE,yBAAKC,MAdI,CACfC,OAAQ,mBAaoBC,IAAKC,wBAAiDC,IAAI,UARpF,iBAzBoC,EAyClCV,WAAa,WACnB,GAAmC,oBAAxBW,OAAOC,OAAOC,OAAuB,CAC9C,GAA2C,oBAAhCF,OAAOC,OAAOC,OAAOC,QAG9B,YADAC,QAAQC,IAAI,2CAId,IAAIC,EAAY,CACdC,OAAQ,aACRC,cAAe,EAAKzB,MAAM0B,KAAX,eACfC,eAAgB,EAAK3B,MAAM0B,KAAX,iBAEdE,EAAOC,KAAKC,UAAUP,GAC1BN,OAAOC,OAAOC,OAAOC,QAAQW,YAAYH,GAEzC,EAAKI,UACH,SAACC,GAAD,mBAAC,eACIA,GADL,IAEER,cAAeF,EAAUE,cACzBE,eAAgBJ,EAAUI,oBAE5B,kBAAMO,IAAUC,kBAAkB,EAAKC,MAAMZ,WAE/CH,QAAQC,IAAI,+CAIZD,QAAQC,IAAI,2CArE0B,EAyElCb,SAAW,WACjB,EAAKuB,SAAS,CAAEK,WAAW,KA1Ea,EA6ElC1B,QAAU,WAChB,EAAKqB,SAAS,CAAEK,WAAW,KA1E3B,IAGMC,EAAe,CACnBd,OAAQ,aACRC,cALoB,EAAKzB,MAAM0B,KAAX,eAMpBC,eALqB,EAAK3B,MAAM0B,KAAX,iBALiB,OAYxC,EAAKU,MAAL,eACKE,GAbmC,E,uBADnBC,KAmFVC,cAAwBzC,GCtGvC0C,IAASxC,OACP,kBAAC,IAAMyC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.e648b20b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poButton\":\"style_poButton__3x8Ka\"};","import {\n  ComponentProps,\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from 'streamlit-component-lib'\nimport React, { ReactNode } from 'react'\n\nimport styles from './style.module.scss';\n\ninterface State {\n  action: string\n  commandString: string\n  commandOptions: string\n  isFocused: boolean\n}\n\ndeclare global {\n  interface Window {\n    chrome: any;\n  }\n}\n\nclass RunCommand extends StreamlitComponentBase<State> {\n  public constructor(props: ComponentProps) {\n    super(props)\n\n    // Values from user input\n    const commandString = this.props.args['command_string'] as string\n    const commandOptions = this.props.args['command_options'] as string\n\n    const initialState = { \n      action: 'RunCommand',\n      commandString: commandString, \n      commandOptions: commandOptions } as State\n\n    this.state = {\n      ...initialState\n    }\n  }\n\n  public render = (): ReactNode => {\n    \n    const imgStyle = {\n      margin: '0px 3px 2px 0px'\n    }\n    \n    return (\n      <span>\n        <button\n          className={styles.poButton}\n          onClick={this._onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          <span>\n            <img style={imgStyle} src={process.env.PUBLIC_URL + '/img/pollination.png'} alt='logo' />\n          </span>\n            Run Command\n        </button>\n      </span>\n    )\n  }\n\n  private _onClicked = (): void => {\n    if (typeof window.parent.chrome != 'undefined') {\n      if (typeof window.parent.chrome.webview == 'undefined')\n      {\n        console.log('[POLLINATION-DEBUG]: webview not found.');\n        return;\n      }\n      \n      var msgObject = {\n        action: 'RunCommand',\n        commandString: this.props.args['command_string'],\n        commandOptions: this.props.args['command_options']\n      };\n      var json = JSON.stringify(msgObject);\n      window.parent.chrome.webview.postMessage(json);\n\n      this.setState(\n        (prevState) => ({ \n          ...prevState, \n          commandString: msgObject.commandString,\n          commandOptions: msgObject.commandOptions\n        }),\n        () => Streamlit.setComponentValue(this.state.action)\n      );\n      console.log('[POLLINATION-DEBUG]: JSON string sent.');\n    }\n    else\n    {\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\n    }\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(RunCommand)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport RunCommand from \"./RunCommand\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <RunCommand />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}