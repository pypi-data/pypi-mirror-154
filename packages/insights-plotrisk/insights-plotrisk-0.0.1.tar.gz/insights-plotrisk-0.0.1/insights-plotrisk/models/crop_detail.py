# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from insights-plotrisk.configuration import Configuration


class CropDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crop': 'str',
        'harvest_date': 'datetime',
        'id': 'str',
        'sowing_date': 'datetime'
    }

    attribute_map = {
        'crop': 'crop',
        'harvest_date': 'harvestDate',
        'id': 'id',
        'sowing_date': 'sowingDate'
    }

    def __init__(self, crop=None, harvest_date=None, id=None, sowing_date=None, _configuration=None):  # noqa: E501
        """CropDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._crop = None
        self._harvest_date = None
        self._id = None
        self._sowing_date = None
        self.discriminator = None

        if crop is not None:
            self.crop = crop
        if harvest_date is not None:
            self.harvest_date = harvest_date
        if id is not None:
            self.id = id
        if sowing_date is not None:
            self.sowing_date = sowing_date

    @property
    def crop(self):
        """Gets the crop of this CropDetail.  # noqa: E501


        :return: The crop of this CropDetail.  # noqa: E501
        :rtype: str
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this CropDetail.


        :param crop: The crop of this CropDetail.  # noqa: E501
        :type: str
        """

        self._crop = crop

    @property
    def harvest_date(self):
        """Gets the harvest_date of this CropDetail.  # noqa: E501


        :return: The harvest_date of this CropDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._harvest_date

    @harvest_date.setter
    def harvest_date(self, harvest_date):
        """Sets the harvest_date of this CropDetail.


        :param harvest_date: The harvest_date of this CropDetail.  # noqa: E501
        :type: datetime
        """

        self._harvest_date = harvest_date

    @property
    def id(self):
        """Gets the id of this CropDetail.  # noqa: E501


        :return: The id of this CropDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CropDetail.


        :param id: The id of this CropDetail.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def sowing_date(self):
        """Gets the sowing_date of this CropDetail.  # noqa: E501


        :return: The sowing_date of this CropDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._sowing_date

    @sowing_date.setter
    def sowing_date(self, sowing_date):
        """Sets the sowing_date of this CropDetail.


        :param sowing_date: The sowing_date of this CropDetail.  # noqa: E501
        :type: datetime
        """

        self._sowing_date = sowing_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CropDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CropDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CropDetail):
            return True

        return self.to_dict() != other.to_dict()
