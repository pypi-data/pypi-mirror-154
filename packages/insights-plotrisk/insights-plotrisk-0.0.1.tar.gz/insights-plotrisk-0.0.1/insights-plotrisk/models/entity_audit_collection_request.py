# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from insights-plotrisk.configuration import Configuration


class EntityAuditCollectionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'str',
        'caller_id': 'str',
        'details': 'object',
        'entity_id': 'str',
        'entity_type': 'str',
        'external_id': 'str',
        'failure_type': 'str',
        'msg': 'str',
        'properties': 'object',
        'status': 'str',
        'tenant_type': 'str'
    }

    attribute_map = {
        'action_type': 'actionType',
        'caller_id': 'callerId',
        'details': 'details',
        'entity_id': 'entityId',
        'entity_type': 'entityType',
        'external_id': 'externalId',
        'failure_type': 'failureType',
        'msg': 'msg',
        'properties': 'properties',
        'status': 'status',
        'tenant_type': 'tenantType'
    }

    def __init__(self, action_type=None, caller_id=None, details=None, entity_id=None, entity_type=None, external_id=None, failure_type=None, msg=None, properties=None, status=None, tenant_type=None, _configuration=None):  # noqa: E501
        """EntityAuditCollectionRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._action_type = None
        self._caller_id = None
        self._details = None
        self._entity_id = None
        self._entity_type = None
        self._external_id = None
        self._failure_type = None
        self._msg = None
        self._properties = None
        self._status = None
        self._tenant_type = None
        self.discriminator = None

        if action_type is not None:
            self.action_type = action_type
        if caller_id is not None:
            self.caller_id = caller_id
        if details is not None:
            self.details = details
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_type is not None:
            self.entity_type = entity_type
        if external_id is not None:
            self.external_id = external_id
        if failure_type is not None:
            self.failure_type = failure_type
        if msg is not None:
            self.msg = msg
        if properties is not None:
            self.properties = properties
        if status is not None:
            self.status = status
        if tenant_type is not None:
            self.tenant_type = tenant_type

    @property
    def action_type(self):
        """Gets the action_type of this EntityAuditCollectionRequest.  # noqa: E501


        :return: The action_type of this EntityAuditCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this EntityAuditCollectionRequest.


        :param action_type: The action_type of this EntityAuditCollectionRequest.  # noqa: E501
        :type: str
        """

        self._action_type = action_type

    @property
    def caller_id(self):
        """Gets the caller_id of this EntityAuditCollectionRequest.  # noqa: E501


        :return: The caller_id of this EntityAuditCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._caller_id

    @caller_id.setter
    def caller_id(self, caller_id):
        """Sets the caller_id of this EntityAuditCollectionRequest.


        :param caller_id: The caller_id of this EntityAuditCollectionRequest.  # noqa: E501
        :type: str
        """

        self._caller_id = caller_id

    @property
    def details(self):
        """Gets the details of this EntityAuditCollectionRequest.  # noqa: E501


        :return: The details of this EntityAuditCollectionRequest.  # noqa: E501
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EntityAuditCollectionRequest.


        :param details: The details of this EntityAuditCollectionRequest.  # noqa: E501
        :type: object
        """

        self._details = details

    @property
    def entity_id(self):
        """Gets the entity_id of this EntityAuditCollectionRequest.  # noqa: E501


        :return: The entity_id of this EntityAuditCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this EntityAuditCollectionRequest.


        :param entity_id: The entity_id of this EntityAuditCollectionRequest.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this EntityAuditCollectionRequest.  # noqa: E501


        :return: The entity_type of this EntityAuditCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EntityAuditCollectionRequest.


        :param entity_type: The entity_type of this EntityAuditCollectionRequest.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def external_id(self):
        """Gets the external_id of this EntityAuditCollectionRequest.  # noqa: E501


        :return: The external_id of this EntityAuditCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this EntityAuditCollectionRequest.


        :param external_id: The external_id of this EntityAuditCollectionRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def failure_type(self):
        """Gets the failure_type of this EntityAuditCollectionRequest.  # noqa: E501


        :return: The failure_type of this EntityAuditCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._failure_type

    @failure_type.setter
    def failure_type(self, failure_type):
        """Sets the failure_type of this EntityAuditCollectionRequest.


        :param failure_type: The failure_type of this EntityAuditCollectionRequest.  # noqa: E501
        :type: str
        """

        self._failure_type = failure_type

    @property
    def msg(self):
        """Gets the msg of this EntityAuditCollectionRequest.  # noqa: E501


        :return: The msg of this EntityAuditCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this EntityAuditCollectionRequest.


        :param msg: The msg of this EntityAuditCollectionRequest.  # noqa: E501
        :type: str
        """

        self._msg = msg

    @property
    def properties(self):
        """Gets the properties of this EntityAuditCollectionRequest.  # noqa: E501


        :return: The properties of this EntityAuditCollectionRequest.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this EntityAuditCollectionRequest.


        :param properties: The properties of this EntityAuditCollectionRequest.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def status(self):
        """Gets the status of this EntityAuditCollectionRequest.  # noqa: E501


        :return: The status of this EntityAuditCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EntityAuditCollectionRequest.


        :param status: The status of this EntityAuditCollectionRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tenant_type(self):
        """Gets the tenant_type of this EntityAuditCollectionRequest.  # noqa: E501


        :return: The tenant_type of this EntityAuditCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._tenant_type

    @tenant_type.setter
    def tenant_type(self, tenant_type):
        """Sets the tenant_type of this EntityAuditCollectionRequest.


        :param tenant_type: The tenant_type of this EntityAuditCollectionRequest.  # noqa: E501
        :type: str
        """

        self._tenant_type = tenant_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityAuditCollectionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityAuditCollectionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntityAuditCollectionRequest):
            return True

        return self.to_dict() != other.to_dict()
