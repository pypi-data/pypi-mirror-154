# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from insights-plotrisk.configuration import Configuration


class BoundaryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coordinates': 'Geometry',
        'crop_details': 'list[CropDetail]',
        'external_id': 'str',
        'name': 'str',
        'org_id': 'str',
        'parent_ids': 'list[str]',
        'properties': 'object',
        'status': 'str',
        'type': 'str'
    }

    attribute_map = {
        'coordinates': 'coordinates',
        'crop_details': 'cropDetails',
        'external_id': 'externalId',
        'name': 'name',
        'org_id': 'orgId',
        'parent_ids': 'parentIds',
        'properties': 'properties',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, coordinates=None, crop_details=None, external_id=None, name=None, org_id=None, parent_ids=None, properties=None, status=None, type=None, _configuration=None):  # noqa: E501
        """BoundaryRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._coordinates = None
        self._crop_details = None
        self._external_id = None
        self._name = None
        self._org_id = None
        self._parent_ids = None
        self._properties = None
        self._status = None
        self._type = None
        self.discriminator = None

        if coordinates is not None:
            self.coordinates = coordinates
        if crop_details is not None:
            self.crop_details = crop_details
        if external_id is not None:
            self.external_id = external_id
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if parent_ids is not None:
            self.parent_ids = parent_ids
        if properties is not None:
            self.properties = properties
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type

    @property
    def coordinates(self):
        """Gets the coordinates of this BoundaryRequest.  # noqa: E501


        :return: The coordinates of this BoundaryRequest.  # noqa: E501
        :rtype: Geometry
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this BoundaryRequest.


        :param coordinates: The coordinates of this BoundaryRequest.  # noqa: E501
        :type: Geometry
        """

        self._coordinates = coordinates

    @property
    def crop_details(self):
        """Gets the crop_details of this BoundaryRequest.  # noqa: E501


        :return: The crop_details of this BoundaryRequest.  # noqa: E501
        :rtype: list[CropDetail]
        """
        return self._crop_details

    @crop_details.setter
    def crop_details(self, crop_details):
        """Sets the crop_details of this BoundaryRequest.


        :param crop_details: The crop_details of this BoundaryRequest.  # noqa: E501
        :type: list[CropDetail]
        """

        self._crop_details = crop_details

    @property
    def external_id(self):
        """Gets the external_id of this BoundaryRequest.  # noqa: E501


        :return: The external_id of this BoundaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this BoundaryRequest.


        :param external_id: The external_id of this BoundaryRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def name(self):
        """Gets the name of this BoundaryRequest.  # noqa: E501


        :return: The name of this BoundaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BoundaryRequest.


        :param name: The name of this BoundaryRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this BoundaryRequest.  # noqa: E501


        :return: The org_id of this BoundaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this BoundaryRequest.


        :param org_id: The org_id of this BoundaryRequest.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def parent_ids(self):
        """Gets the parent_ids of this BoundaryRequest.  # noqa: E501


        :return: The parent_ids of this BoundaryRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._parent_ids

    @parent_ids.setter
    def parent_ids(self, parent_ids):
        """Sets the parent_ids of this BoundaryRequest.


        :param parent_ids: The parent_ids of this BoundaryRequest.  # noqa: E501
        :type: list[str]
        """

        self._parent_ids = parent_ids

    @property
    def properties(self):
        """Gets the properties of this BoundaryRequest.  # noqa: E501


        :return: The properties of this BoundaryRequest.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this BoundaryRequest.


        :param properties: The properties of this BoundaryRequest.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def status(self):
        """Gets the status of this BoundaryRequest.  # noqa: E501


        :return: The status of this BoundaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BoundaryRequest.


        :param status: The status of this BoundaryRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this BoundaryRequest.  # noqa: E501


        :return: The type of this BoundaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BoundaryRequest.


        :param type: The type of this BoundaryRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["PLOT", "REGION", "SURVEY", "TILE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BoundaryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoundaryRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BoundaryRequest):
            return True

        return self.to_dict() != other.to_dict()
