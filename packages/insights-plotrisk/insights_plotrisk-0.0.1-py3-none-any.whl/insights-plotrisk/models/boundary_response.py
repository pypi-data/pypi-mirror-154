# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from insights-plotrisk.configuration import Configuration


class BoundaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area_in_hectares': 'float',
        'coordinates': 'Geometry',
        'created_date_time': 'datetime',
        'crop_details': 'list[CropDetail]',
        'current_level': 'str',
        'external_id': 'str',
        'geo_hierarchy': 'list[dict(str, str)]',
        'geohash': 'str',
        'id': 'str',
        'modified_date_time': 'datetime',
        'name': 'str',
        'org_id': 'str',
        'parent_ids': 'list[str]',
        'properties': 'object',
        'status': 'str',
        'tenant_type': 'str',
        'tile_details': 'dict(str, list[str])',
        'type': 'str'
    }

    attribute_map = {
        'area_in_hectares': 'areaInHectares',
        'coordinates': 'coordinates',
        'created_date_time': 'createdDateTime',
        'crop_details': 'cropDetails',
        'current_level': 'currentLevel',
        'external_id': 'externalId',
        'geo_hierarchy': 'geoHierarchy',
        'geohash': 'geohash',
        'id': 'id',
        'modified_date_time': 'modifiedDateTime',
        'name': 'name',
        'org_id': 'orgId',
        'parent_ids': 'parentIds',
        'properties': 'properties',
        'status': 'status',
        'tenant_type': 'tenantType',
        'tile_details': 'tileDetails',
        'type': 'type'
    }

    def __init__(self, area_in_hectares=None, coordinates=None, created_date_time=None, crop_details=None, current_level=None, external_id=None, geo_hierarchy=None, geohash=None, id=None, modified_date_time=None, name=None, org_id=None, parent_ids=None, properties=None, status=None, tenant_type=None, tile_details=None, type=None, _configuration=None):  # noqa: E501
        """BoundaryResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._area_in_hectares = None
        self._coordinates = None
        self._created_date_time = None
        self._crop_details = None
        self._current_level = None
        self._external_id = None
        self._geo_hierarchy = None
        self._geohash = None
        self._id = None
        self._modified_date_time = None
        self._name = None
        self._org_id = None
        self._parent_ids = None
        self._properties = None
        self._status = None
        self._tenant_type = None
        self._tile_details = None
        self._type = None
        self.discriminator = None

        if area_in_hectares is not None:
            self.area_in_hectares = area_in_hectares
        if coordinates is not None:
            self.coordinates = coordinates
        if created_date_time is not None:
            self.created_date_time = created_date_time
        if crop_details is not None:
            self.crop_details = crop_details
        if current_level is not None:
            self.current_level = current_level
        if external_id is not None:
            self.external_id = external_id
        if geo_hierarchy is not None:
            self.geo_hierarchy = geo_hierarchy
        if geohash is not None:
            self.geohash = geohash
        if id is not None:
            self.id = id
        if modified_date_time is not None:
            self.modified_date_time = modified_date_time
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if parent_ids is not None:
            self.parent_ids = parent_ids
        if properties is not None:
            self.properties = properties
        if status is not None:
            self.status = status
        if tenant_type is not None:
            self.tenant_type = tenant_type
        if tile_details is not None:
            self.tile_details = tile_details
        if type is not None:
            self.type = type

    @property
    def area_in_hectares(self):
        """Gets the area_in_hectares of this BoundaryResponse.  # noqa: E501


        :return: The area_in_hectares of this BoundaryResponse.  # noqa: E501
        :rtype: float
        """
        return self._area_in_hectares

    @area_in_hectares.setter
    def area_in_hectares(self, area_in_hectares):
        """Sets the area_in_hectares of this BoundaryResponse.


        :param area_in_hectares: The area_in_hectares of this BoundaryResponse.  # noqa: E501
        :type: float
        """

        self._area_in_hectares = area_in_hectares

    @property
    def coordinates(self):
        """Gets the coordinates of this BoundaryResponse.  # noqa: E501


        :return: The coordinates of this BoundaryResponse.  # noqa: E501
        :rtype: Geometry
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this BoundaryResponse.


        :param coordinates: The coordinates of this BoundaryResponse.  # noqa: E501
        :type: Geometry
        """

        self._coordinates = coordinates

    @property
    def created_date_time(self):
        """Gets the created_date_time of this BoundaryResponse.  # noqa: E501


        :return: The created_date_time of this BoundaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this BoundaryResponse.


        :param created_date_time: The created_date_time of this BoundaryResponse.  # noqa: E501
        :type: datetime
        """

        self._created_date_time = created_date_time

    @property
    def crop_details(self):
        """Gets the crop_details of this BoundaryResponse.  # noqa: E501


        :return: The crop_details of this BoundaryResponse.  # noqa: E501
        :rtype: list[CropDetail]
        """
        return self._crop_details

    @crop_details.setter
    def crop_details(self, crop_details):
        """Sets the crop_details of this BoundaryResponse.


        :param crop_details: The crop_details of this BoundaryResponse.  # noqa: E501
        :type: list[CropDetail]
        """

        self._crop_details = crop_details

    @property
    def current_level(self):
        """Gets the current_level of this BoundaryResponse.  # noqa: E501


        :return: The current_level of this BoundaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._current_level

    @current_level.setter
    def current_level(self, current_level):
        """Sets the current_level of this BoundaryResponse.


        :param current_level: The current_level of this BoundaryResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["LEVEL_1", "LEVEL_2", "LEVEL_3", "LEVEL_4", "LEVEL_5", "LEVEL_6", "LEVEL_7"]  # noqa: E501
        if (self._configuration.client_side_validation and
                current_level not in allowed_values):
            raise ValueError(
                "Invalid value for `current_level` ({0}), must be one of {1}"  # noqa: E501
                .format(current_level, allowed_values)
            )

        self._current_level = current_level

    @property
    def external_id(self):
        """Gets the external_id of this BoundaryResponse.  # noqa: E501


        :return: The external_id of this BoundaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this BoundaryResponse.


        :param external_id: The external_id of this BoundaryResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def geo_hierarchy(self):
        """Gets the geo_hierarchy of this BoundaryResponse.  # noqa: E501


        :return: The geo_hierarchy of this BoundaryResponse.  # noqa: E501
        :rtype: list[dict(str, str)]
        """
        return self._geo_hierarchy

    @geo_hierarchy.setter
    def geo_hierarchy(self, geo_hierarchy):
        """Sets the geo_hierarchy of this BoundaryResponse.


        :param geo_hierarchy: The geo_hierarchy of this BoundaryResponse.  # noqa: E501
        :type: list[dict(str, str)]
        """

        self._geo_hierarchy = geo_hierarchy

    @property
    def geohash(self):
        """Gets the geohash of this BoundaryResponse.  # noqa: E501


        :return: The geohash of this BoundaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._geohash

    @geohash.setter
    def geohash(self, geohash):
        """Sets the geohash of this BoundaryResponse.


        :param geohash: The geohash of this BoundaryResponse.  # noqa: E501
        :type: str
        """

        self._geohash = geohash

    @property
    def id(self):
        """Gets the id of this BoundaryResponse.  # noqa: E501


        :return: The id of this BoundaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BoundaryResponse.


        :param id: The id of this BoundaryResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def modified_date_time(self):
        """Gets the modified_date_time of this BoundaryResponse.  # noqa: E501


        :return: The modified_date_time of this BoundaryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date_time

    @modified_date_time.setter
    def modified_date_time(self, modified_date_time):
        """Sets the modified_date_time of this BoundaryResponse.


        :param modified_date_time: The modified_date_time of this BoundaryResponse.  # noqa: E501
        :type: datetime
        """

        self._modified_date_time = modified_date_time

    @property
    def name(self):
        """Gets the name of this BoundaryResponse.  # noqa: E501


        :return: The name of this BoundaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BoundaryResponse.


        :param name: The name of this BoundaryResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this BoundaryResponse.  # noqa: E501


        :return: The org_id of this BoundaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this BoundaryResponse.


        :param org_id: The org_id of this BoundaryResponse.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def parent_ids(self):
        """Gets the parent_ids of this BoundaryResponse.  # noqa: E501


        :return: The parent_ids of this BoundaryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._parent_ids

    @parent_ids.setter
    def parent_ids(self, parent_ids):
        """Sets the parent_ids of this BoundaryResponse.


        :param parent_ids: The parent_ids of this BoundaryResponse.  # noqa: E501
        :type: list[str]
        """

        self._parent_ids = parent_ids

    @property
    def properties(self):
        """Gets the properties of this BoundaryResponse.  # noqa: E501


        :return: The properties of this BoundaryResponse.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this BoundaryResponse.


        :param properties: The properties of this BoundaryResponse.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def status(self):
        """Gets the status of this BoundaryResponse.  # noqa: E501


        :return: The status of this BoundaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BoundaryResponse.


        :param status: The status of this BoundaryResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tenant_type(self):
        """Gets the tenant_type of this BoundaryResponse.  # noqa: E501


        :return: The tenant_type of this BoundaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_type

    @tenant_type.setter
    def tenant_type(self, tenant_type):
        """Sets the tenant_type of this BoundaryResponse.


        :param tenant_type: The tenant_type of this BoundaryResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMARTFARM", "SMARTFARM_PLUS", "SMARTRISK"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tenant_type not in allowed_values):
            raise ValueError(
                "Invalid value for `tenant_type` ({0}), must be one of {1}"  # noqa: E501
                .format(tenant_type, allowed_values)
            )

        self._tenant_type = tenant_type

    @property
    def tile_details(self):
        """Gets the tile_details of this BoundaryResponse.  # noqa: E501


        :return: The tile_details of this BoundaryResponse.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._tile_details

    @tile_details.setter
    def tile_details(self, tile_details):
        """Sets the tile_details of this BoundaryResponse.


        :param tile_details: The tile_details of this BoundaryResponse.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._tile_details = tile_details

    @property
    def type(self):
        """Gets the type of this BoundaryResponse.  # noqa: E501


        :return: The type of this BoundaryResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BoundaryResponse.


        :param type: The type of this BoundaryResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["PLOT", "REGION", "SURVEY", "TILE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BoundaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoundaryResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BoundaryResponse):
            return True

        return self.to_dict() != other.to_dict()
