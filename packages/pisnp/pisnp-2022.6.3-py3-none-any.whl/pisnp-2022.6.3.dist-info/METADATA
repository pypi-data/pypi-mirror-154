Metadata-Version: 2.1
Name: pisnp
Version: 2022.6.3
Summary: P is NP? (Polynomial is Non-polynomial?)
Author-email: "谢方圆 (XIE Fangyuan)" <xie.fangyuan@foxmail.com>
License: MIT License
        
        Copyright (c) 2022 谢方圆 (XIE Fangyuan)
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://gitee.com/xie-fangyuan/pisnp
Keywords: polynomial,non-polynomial
Classifier: Programming Language :: Python :: 3.10
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: MIT License
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: matplotlib
Requires-Dist: numpy
Requires-Dist: sty
Provides-Extra: dev
Requires-Dist: bumpver ; extra == 'dev'
Requires-Dist: build ; extra == 'dev'
Requires-Dist: twine ; extra == 'dev'

# PisNP

Version `2022.6.3`

P is NP? (Polynomial is Non-polynomial?)

## 1. Installation

```shell
conda create -n pisnp python=3.10
conda activate pisnp
pip install pisnp
```

## 2. Exact Cover

Solve a general exact cover problem:

```python
from pisnp.exact_cover import XExactCoverSolver

solver = XExactCoverSolver(
    universe={1, 2, 3, 4, 5, 6, 7},
    subsets={
        'A': {1, 4, 7},
        'B': {1, 4},
        'C': {4, 5, 7},
        'D': {3, 5, 6},
        'E': {2, 3, 6, 7},
        'F': {2, 7},
        'G': {1, 4, 5},
    },
)

for solution in solver.solve():
    print(solution)
    solver.display(solution=solution)
    print()
```

## 3. Sudoku

Solve a sudoku problem:

```python
from pisnp.sudoku import XSudokuSolver

solver = XSudokuSolver(board=[
    [6, 0, 0, 1, 0, 0, 0, 0, 8],
    [0, 0, 0, 8, 0, 0, 2, 0, 0],
    [0, 3, 8, 0, 5, 0, 1, 0, 0],
    [0, 0, 0, 0, 4, 0, 0, 9, 2],
    [0, 0, 4, 3, 0, 8, 6, 0, 0],
    [3, 7, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 3, 0, 7, 0, 5, 2, 6],
    [0, 0, 2, 0, 0, 4, 0, 0, 0],
    [9, 0, 7, 0, 0, 6, 0, 0, 1]
])

solutions = list(solver.solve())
print(f'number of solutions: {len(solutions)}')
for solution in solutions:
    solver.display(solution=solution)
    print()
```

## 4. Traveling Salesman

Solve a traveling salesman problem:

```python
from pisnp.traveling_salesman import (
    BacktrackTravelingSalesmanSolver,
    TravelingSalesmanGenerator,
)

_, costs = TravelingSalesmanGenerator.generate(
    num_cities=10,
    method=TravelingSalesmanGenerator.Method.random,
)
solver = BacktrackTravelingSalesmanSolver(costs=costs)
min_cost, min_path = solver.solve()
solver.display()
```

## 5. Unit Test

Run testcases in all files:

```shell
PYTHONPATH='src' python -m unittest discover -s tests
```

Run testcases in one file:

```shell
python -m unittest tests/test_exact_cover.py
```
