# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import imlf_pb2 as imlf__pb2


class ImlfServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.run_graph = channel.unary_unary(
                '/ImlfServer/run_graph',
                request_serializer=imlf__pb2.RunGraphRequest.SerializeToString,
                response_deserializer=imlf__pb2.Reply.FromString,
                )
        self.predict = channel.unary_unary(
                '/ImlfServer/predict',
                request_serializer=imlf__pb2.PredictRequest.SerializeToString,
                response_deserializer=imlf__pb2.Reply.FromString,
                )
        self.evaluate = channel.unary_unary(
                '/ImlfServer/evaluate',
                request_serializer=imlf__pb2.EvaluateRequest.SerializeToString,
                response_deserializer=imlf__pb2.Reply.FromString,
                )
        self.kill_run = channel.unary_unary(
                '/ImlfServer/kill_run',
                request_serializer=imlf__pb2.KillRunRequest.SerializeToString,
                response_deserializer=imlf__pb2.Reply.FromString,
                )
        self.kill_predict = channel.unary_unary(
                '/ImlfServer/kill_predict',
                request_serializer=imlf__pb2.KillPredictRequest.SerializeToString,
                response_deserializer=imlf__pb2.Reply.FromString,
                )
        self.get_module_info = channel.unary_unary(
                '/ImlfServer/get_module_info',
                request_serializer=imlf__pb2.GetModuleInfoRequest.SerializeToString,
                response_deserializer=imlf__pb2.Reply.FromString,
                )
        self.get_node_output = channel.unary_unary(
                '/ImlfServer/get_node_output',
                request_serializer=imlf__pb2.GetNodeOutputRequest.SerializeToString,
                response_deserializer=imlf__pb2.Reply.FromString,
                )
        self.check_before_evaluate = channel.unary_unary(
                '/ImlfServer/check_before_evaluate',
                request_serializer=imlf__pb2.CheckBeforeEvaluateRequest.SerializeToString,
                response_deserializer=imlf__pb2.Reply.FromString,
                )
        self.check_before_predict = channel.unary_unary(
                '/ImlfServer/check_before_predict',
                request_serializer=imlf__pb2.CheckBeforePredictRequest.SerializeToString,
                response_deserializer=imlf__pb2.Reply.FromString,
                )
        self.check_edge = channel.unary_unary(
                '/ImlfServer/check_edge',
                request_serializer=imlf__pb2.CheckEdgeRequest.SerializeToString,
                response_deserializer=imlf__pb2.Reply.FromString,
                )
        self.check_module_code = channel.unary_unary(
                '/ImlfServer/check_module_code',
                request_serializer=imlf__pb2.CheckModuleCodeRequest.SerializeToString,
                response_deserializer=imlf__pb2.Reply.FromString,
                )
        self.manual_evaluate = channel.unary_unary(
                '/ImlfServer/manual_evaluate',
                request_serializer=imlf__pb2.ManualEvaluateRequest.SerializeToString,
                response_deserializer=imlf__pb2.Reply.FromString,
                )


class ImlfServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def run_graph(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def evaluate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def kill_run(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def kill_predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_module_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_node_output(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_before_evaluate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_before_predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_edge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_module_code(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def manual_evaluate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImlfServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'run_graph': grpc.unary_unary_rpc_method_handler(
                    servicer.run_graph,
                    request_deserializer=imlf__pb2.RunGraphRequest.FromString,
                    response_serializer=imlf__pb2.Reply.SerializeToString,
            ),
            'predict': grpc.unary_unary_rpc_method_handler(
                    servicer.predict,
                    request_deserializer=imlf__pb2.PredictRequest.FromString,
                    response_serializer=imlf__pb2.Reply.SerializeToString,
            ),
            'evaluate': grpc.unary_unary_rpc_method_handler(
                    servicer.evaluate,
                    request_deserializer=imlf__pb2.EvaluateRequest.FromString,
                    response_serializer=imlf__pb2.Reply.SerializeToString,
            ),
            'kill_run': grpc.unary_unary_rpc_method_handler(
                    servicer.kill_run,
                    request_deserializer=imlf__pb2.KillRunRequest.FromString,
                    response_serializer=imlf__pb2.Reply.SerializeToString,
            ),
            'kill_predict': grpc.unary_unary_rpc_method_handler(
                    servicer.kill_predict,
                    request_deserializer=imlf__pb2.KillPredictRequest.FromString,
                    response_serializer=imlf__pb2.Reply.SerializeToString,
            ),
            'get_module_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_module_info,
                    request_deserializer=imlf__pb2.GetModuleInfoRequest.FromString,
                    response_serializer=imlf__pb2.Reply.SerializeToString,
            ),
            'get_node_output': grpc.unary_unary_rpc_method_handler(
                    servicer.get_node_output,
                    request_deserializer=imlf__pb2.GetNodeOutputRequest.FromString,
                    response_serializer=imlf__pb2.Reply.SerializeToString,
            ),
            'check_before_evaluate': grpc.unary_unary_rpc_method_handler(
                    servicer.check_before_evaluate,
                    request_deserializer=imlf__pb2.CheckBeforeEvaluateRequest.FromString,
                    response_serializer=imlf__pb2.Reply.SerializeToString,
            ),
            'check_before_predict': grpc.unary_unary_rpc_method_handler(
                    servicer.check_before_predict,
                    request_deserializer=imlf__pb2.CheckBeforePredictRequest.FromString,
                    response_serializer=imlf__pb2.Reply.SerializeToString,
            ),
            'check_edge': grpc.unary_unary_rpc_method_handler(
                    servicer.check_edge,
                    request_deserializer=imlf__pb2.CheckEdgeRequest.FromString,
                    response_serializer=imlf__pb2.Reply.SerializeToString,
            ),
            'check_module_code': grpc.unary_unary_rpc_method_handler(
                    servicer.check_module_code,
                    request_deserializer=imlf__pb2.CheckModuleCodeRequest.FromString,
                    response_serializer=imlf__pb2.Reply.SerializeToString,
            ),
            'manual_evaluate': grpc.unary_unary_rpc_method_handler(
                    servicer.manual_evaluate,
                    request_deserializer=imlf__pb2.ManualEvaluateRequest.FromString,
                    response_serializer=imlf__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ImlfServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImlfServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def run_graph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImlfServer/run_graph',
            imlf__pb2.RunGraphRequest.SerializeToString,
            imlf__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImlfServer/predict',
            imlf__pb2.PredictRequest.SerializeToString,
            imlf__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def evaluate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImlfServer/evaluate',
            imlf__pb2.EvaluateRequest.SerializeToString,
            imlf__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def kill_run(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImlfServer/kill_run',
            imlf__pb2.KillRunRequest.SerializeToString,
            imlf__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def kill_predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImlfServer/kill_predict',
            imlf__pb2.KillPredictRequest.SerializeToString,
            imlf__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_module_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImlfServer/get_module_info',
            imlf__pb2.GetModuleInfoRequest.SerializeToString,
            imlf__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_node_output(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImlfServer/get_node_output',
            imlf__pb2.GetNodeOutputRequest.SerializeToString,
            imlf__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_before_evaluate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImlfServer/check_before_evaluate',
            imlf__pb2.CheckBeforeEvaluateRequest.SerializeToString,
            imlf__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_before_predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImlfServer/check_before_predict',
            imlf__pb2.CheckBeforePredictRequest.SerializeToString,
            imlf__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_edge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImlfServer/check_edge',
            imlf__pb2.CheckEdgeRequest.SerializeToString,
            imlf__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_module_code(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImlfServer/check_module_code',
            imlf__pb2.CheckModuleCodeRequest.SerializeToString,
            imlf__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def manual_evaluate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImlfServer/manual_evaluate',
            imlf__pb2.ManualEvaluateRequest.SerializeToString,
            imlf__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
