# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import bot_pb2 as bot__pb2


class EchoStub(object):
    """The echo service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateBot = channel.unary_unary(
                '/echo.Echo/CreateBot',
                request_serializer=bot__pb2.Create.SerializeToString,
                response_deserializer=bot__pb2.EchoReply.FromString,
                )
        self.HedgeBot = channel.unary_unary(
                '/echo.Echo/HedgeBot',
                request_serializer=bot__pb2.Hedge.SerializeToString,
                response_deserializer=bot__pb2.EchoReply.FromString,
                )
        self.StopBot = channel.unary_unary(
                '/echo.Echo/StopBot',
                request_serializer=bot__pb2.Stop.SerializeToString,
                response_deserializer=bot__pb2.EchoReply.FromString,
                )


class EchoServicer(object):
    """The echo service definition.
    """

    def CreateBot(self, request, context):
        """Echo back reply.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HedgeBot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopBot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EchoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateBot': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBot,
                    request_deserializer=bot__pb2.Create.FromString,
                    response_serializer=bot__pb2.EchoReply.SerializeToString,
            ),
            'HedgeBot': grpc.unary_unary_rpc_method_handler(
                    servicer.HedgeBot,
                    request_deserializer=bot__pb2.Hedge.FromString,
                    response_serializer=bot__pb2.EchoReply.SerializeToString,
            ),
            'StopBot': grpc.unary_unary_rpc_method_handler(
                    servicer.StopBot,
                    request_deserializer=bot__pb2.Stop.FromString,
                    response_serializer=bot__pb2.EchoReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'echo.Echo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Echo(object):
    """The echo service definition.
    """

    @staticmethod
    def CreateBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/echo.Echo/CreateBot',
            bot__pb2.Create.SerializeToString,
            bot__pb2.EchoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HedgeBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/echo.Echo/HedgeBot',
            bot__pb2.Hedge.SerializeToString,
            bot__pb2.EchoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/echo.Echo/StopBot',
            bot__pb2.Stop.SerializeToString,
            bot__pb2.EchoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
