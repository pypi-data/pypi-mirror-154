# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNexusBlobstoreResult',
    'AwaitableGetNexusBlobstoreResult',
    'get_nexus_blobstore',
    'get_nexus_blobstore_output',
]

@pulumi.output_type
class GetNexusBlobstoreResult:
    """
    A collection of values returned by GetNexusBlobstore.
    """
    def __init__(__self__, available_space_in_bytes=None, blob_count=None, bucket_configuration=None, id=None, name=None, path=None, soft_quota=None, total_size_in_bytes=None, type=None):
        if available_space_in_bytes and not isinstance(available_space_in_bytes, int):
            raise TypeError("Expected argument 'available_space_in_bytes' to be a int")
        pulumi.set(__self__, "available_space_in_bytes", available_space_in_bytes)
        if blob_count and not isinstance(blob_count, int):
            raise TypeError("Expected argument 'blob_count' to be a int")
        pulumi.set(__self__, "blob_count", blob_count)
        if bucket_configuration and not isinstance(bucket_configuration, dict):
            raise TypeError("Expected argument 'bucket_configuration' to be a dict")
        pulumi.set(__self__, "bucket_configuration", bucket_configuration)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if soft_quota and not isinstance(soft_quota, dict):
            raise TypeError("Expected argument 'soft_quota' to be a dict")
        pulumi.set(__self__, "soft_quota", soft_quota)
        if total_size_in_bytes and not isinstance(total_size_in_bytes, int):
            raise TypeError("Expected argument 'total_size_in_bytes' to be a int")
        pulumi.set(__self__, "total_size_in_bytes", total_size_in_bytes)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="availableSpaceInBytes")
    def available_space_in_bytes(self) -> int:
        return pulumi.get(self, "available_space_in_bytes")

    @property
    @pulumi.getter(name="blobCount")
    def blob_count(self) -> int:
        return pulumi.get(self, "blob_count")

    @property
    @pulumi.getter(name="bucketConfiguration")
    def bucket_configuration(self) -> Optional['outputs.GetNexusBlobstoreBucketConfigurationResult']:
        return pulumi.get(self, "bucket_configuration")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="softQuota")
    def soft_quota(self) -> Optional['outputs.GetNexusBlobstoreSoftQuotaResult']:
        return pulumi.get(self, "soft_quota")

    @property
    @pulumi.getter(name="totalSizeInBytes")
    def total_size_in_bytes(self) -> int:
        return pulumi.get(self, "total_size_in_bytes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


class AwaitableGetNexusBlobstoreResult(GetNexusBlobstoreResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNexusBlobstoreResult(
            available_space_in_bytes=self.available_space_in_bytes,
            blob_count=self.blob_count,
            bucket_configuration=self.bucket_configuration,
            id=self.id,
            name=self.name,
            path=self.path,
            soft_quota=self.soft_quota,
            total_size_in_bytes=self.total_size_in_bytes,
            type=self.type)


def get_nexus_blobstore(bucket_configuration: Optional[pulumi.InputType['GetNexusBlobstoreBucketConfigurationArgs']] = None,
                        name: Optional[str] = None,
                        path: Optional[str] = None,
                        soft_quota: Optional[pulumi.InputType['GetNexusBlobstoreSoftQuotaArgs']] = None,
                        type: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNexusBlobstoreResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bucketConfiguration'] = bucket_configuration
    __args__['name'] = name
    __args__['path'] = path
    __args__['softQuota'] = soft_quota
    __args__['type'] = type
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nexus:index/getNexusBlobstore:GetNexusBlobstore', __args__, opts=opts, typ=GetNexusBlobstoreResult).value

    return AwaitableGetNexusBlobstoreResult(
        available_space_in_bytes=__ret__.available_space_in_bytes,
        blob_count=__ret__.blob_count,
        bucket_configuration=__ret__.bucket_configuration,
        id=__ret__.id,
        name=__ret__.name,
        path=__ret__.path,
        soft_quota=__ret__.soft_quota,
        total_size_in_bytes=__ret__.total_size_in_bytes,
        type=__ret__.type)


@_utilities.lift_output_func(get_nexus_blobstore)
def get_nexus_blobstore_output(bucket_configuration: Optional[pulumi.Input[Optional[pulumi.InputType['GetNexusBlobstoreBucketConfigurationArgs']]]] = None,
                               name: Optional[pulumi.Input[str]] = None,
                               path: Optional[pulumi.Input[Optional[str]]] = None,
                               soft_quota: Optional[pulumi.Input[Optional[pulumi.InputType['GetNexusBlobstoreSoftQuotaArgs']]]] = None,
                               type: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNexusBlobstoreResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
