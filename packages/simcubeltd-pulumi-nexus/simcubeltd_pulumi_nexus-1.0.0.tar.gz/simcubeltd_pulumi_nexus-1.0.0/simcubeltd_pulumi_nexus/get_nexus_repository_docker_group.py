# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetNexusRepositoryDockerGroupResult',
    'AwaitableGetNexusRepositoryDockerGroupResult',
    'get_nexus_repository_docker_group',
    'get_nexus_repository_docker_group_output',
]

@pulumi.output_type
class GetNexusRepositoryDockerGroupResult:
    """
    A collection of values returned by GetNexusRepositoryDockerGroup.
    """
    def __init__(__self__, dockers=None, groups=None, id=None, name=None, online=None, storages=None):
        if dockers and not isinstance(dockers, list):
            raise TypeError("Expected argument 'dockers' to be a list")
        pulumi.set(__self__, "dockers", dockers)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if online and not isinstance(online, bool):
            raise TypeError("Expected argument 'online' to be a bool")
        pulumi.set(__self__, "online", online)
        if storages and not isinstance(storages, list):
            raise TypeError("Expected argument 'storages' to be a list")
        pulumi.set(__self__, "storages", storages)

    @property
    @pulumi.getter
    def dockers(self) -> Sequence['outputs.GetNexusRepositoryDockerGroupDockerResult']:
        return pulumi.get(self, "dockers")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetNexusRepositoryDockerGroupGroupResult']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def online(self) -> bool:
        return pulumi.get(self, "online")

    @property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetNexusRepositoryDockerGroupStorageResult']:
        return pulumi.get(self, "storages")


class AwaitableGetNexusRepositoryDockerGroupResult(GetNexusRepositoryDockerGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNexusRepositoryDockerGroupResult(
            dockers=self.dockers,
            groups=self.groups,
            id=self.id,
            name=self.name,
            online=self.online,
            storages=self.storages)


def get_nexus_repository_docker_group(name: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNexusRepositoryDockerGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nexus:index/getNexusRepositoryDockerGroup:GetNexusRepositoryDockerGroup', __args__, opts=opts, typ=GetNexusRepositoryDockerGroupResult).value

    return AwaitableGetNexusRepositoryDockerGroupResult(
        dockers=__ret__.dockers,
        groups=__ret__.groups,
        id=__ret__.id,
        name=__ret__.name,
        online=__ret__.online,
        storages=__ret__.storages)


@_utilities.lift_output_func(get_nexus_repository_docker_group)
def get_nexus_repository_docker_group_output(name: Optional[pulumi.Input[str]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNexusRepositoryDockerGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
