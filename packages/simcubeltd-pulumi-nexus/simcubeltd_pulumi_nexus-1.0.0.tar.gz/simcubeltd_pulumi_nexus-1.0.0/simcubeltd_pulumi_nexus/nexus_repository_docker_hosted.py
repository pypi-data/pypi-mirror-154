# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NexusRepositoryDockerHostedArgs', 'NexusRepositoryDockerHosted']

@pulumi.input_type
class NexusRepositoryDockerHostedArgs:
    def __init__(__self__, *,
                 docker: pulumi.Input['NexusRepositoryDockerHostedDockerArgs'],
                 storage: pulumi.Input['NexusRepositoryDockerHostedStorageArgs'],
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerHostedCleanupArgs']]]] = None,
                 component: Optional[pulumi.Input['NexusRepositoryDockerHostedComponentArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 online: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a NexusRepositoryDockerHosted resource.
        :param pulumi.Input['NexusRepositoryDockerHostedDockerArgs'] docker: docker contains the configuration of the docker repository
        :param pulumi.Input['NexusRepositoryDockerHostedStorageArgs'] storage: The storage configuration of the repository
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerHostedCleanupArgs']]] cleanups: Cleanup policies
        :param pulumi.Input['NexusRepositoryDockerHostedComponentArgs'] component: Component configuration for the hosted repository
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        """
        pulumi.set(__self__, "docker", docker)
        pulumi.set(__self__, "storage", storage)
        if cleanups is not None:
            pulumi.set(__self__, "cleanups", cleanups)
        if component is not None:
            pulumi.set(__self__, "component", component)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if online is not None:
            pulumi.set(__self__, "online", online)

    @property
    @pulumi.getter
    def docker(self) -> pulumi.Input['NexusRepositoryDockerHostedDockerArgs']:
        """
        docker contains the configuration of the docker repository
        """
        return pulumi.get(self, "docker")

    @docker.setter
    def docker(self, value: pulumi.Input['NexusRepositoryDockerHostedDockerArgs']):
        pulumi.set(self, "docker", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input['NexusRepositoryDockerHostedStorageArgs']:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input['NexusRepositoryDockerHostedStorageArgs']):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def cleanups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerHostedCleanupArgs']]]]:
        """
        Cleanup policies
        """
        return pulumi.get(self, "cleanups")

    @cleanups.setter
    def cleanups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerHostedCleanupArgs']]]]):
        pulumi.set(self, "cleanups", value)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input['NexusRepositoryDockerHostedComponentArgs']]:
        """
        Component configuration for the hosted repository
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input['NexusRepositoryDockerHostedComponentArgs']]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def online(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @online.setter
    def online(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "online", value)


@pulumi.input_type
class _NexusRepositoryDockerHostedState:
    def __init__(__self__, *,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerHostedCleanupArgs']]]] = None,
                 component: Optional[pulumi.Input['NexusRepositoryDockerHostedComponentArgs']] = None,
                 docker: Optional[pulumi.Input['NexusRepositoryDockerHostedDockerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 storage: Optional[pulumi.Input['NexusRepositoryDockerHostedStorageArgs']] = None):
        """
        Input properties used for looking up and filtering NexusRepositoryDockerHosted resources.
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerHostedCleanupArgs']]] cleanups: Cleanup policies
        :param pulumi.Input['NexusRepositoryDockerHostedComponentArgs'] component: Component configuration for the hosted repository
        :param pulumi.Input['NexusRepositoryDockerHostedDockerArgs'] docker: docker contains the configuration of the docker repository
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input['NexusRepositoryDockerHostedStorageArgs'] storage: The storage configuration of the repository
        """
        if cleanups is not None:
            pulumi.set(__self__, "cleanups", cleanups)
        if component is not None:
            pulumi.set(__self__, "component", component)
        if docker is not None:
            pulumi.set(__self__, "docker", docker)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if online is not None:
            pulumi.set(__self__, "online", online)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def cleanups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerHostedCleanupArgs']]]]:
        """
        Cleanup policies
        """
        return pulumi.get(self, "cleanups")

    @cleanups.setter
    def cleanups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerHostedCleanupArgs']]]]):
        pulumi.set(self, "cleanups", value)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input['NexusRepositoryDockerHostedComponentArgs']]:
        """
        Component configuration for the hosted repository
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input['NexusRepositoryDockerHostedComponentArgs']]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def docker(self) -> Optional[pulumi.Input['NexusRepositoryDockerHostedDockerArgs']]:
        """
        docker contains the configuration of the docker repository
        """
        return pulumi.get(self, "docker")

    @docker.setter
    def docker(self, value: Optional[pulumi.Input['NexusRepositoryDockerHostedDockerArgs']]):
        pulumi.set(self, "docker", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def online(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @online.setter
    def online(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "online", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['NexusRepositoryDockerHostedStorageArgs']]:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['NexusRepositoryDockerHostedStorageArgs']]):
        pulumi.set(self, "storage", value)


class NexusRepositoryDockerHosted(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedCleanupArgs']]]]] = None,
                 component: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedComponentArgs']]] = None,
                 docker: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedDockerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedStorageArgs']]] = None,
                 __props__=None):
        """
        Create a NexusRepositoryDockerHosted resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedCleanupArgs']]]] cleanups: Cleanup policies
        :param pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedComponentArgs']] component: Component configuration for the hosted repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedDockerArgs']] docker: docker contains the configuration of the docker repository
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedStorageArgs']] storage: The storage configuration of the repository
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NexusRepositoryDockerHostedArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NexusRepositoryDockerHosted resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NexusRepositoryDockerHostedArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NexusRepositoryDockerHostedArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedCleanupArgs']]]]] = None,
                 component: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedComponentArgs']]] = None,
                 docker: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedDockerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedStorageArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NexusRepositoryDockerHostedArgs.__new__(NexusRepositoryDockerHostedArgs)

            __props__.__dict__["cleanups"] = cleanups
            __props__.__dict__["component"] = component
            if docker is None and not opts.urn:
                raise TypeError("Missing required property 'docker'")
            __props__.__dict__["docker"] = docker
            __props__.__dict__["name"] = name
            __props__.__dict__["online"] = online
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
        super(NexusRepositoryDockerHosted, __self__).__init__(
            'nexus:index/nexusRepositoryDockerHosted:NexusRepositoryDockerHosted',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedCleanupArgs']]]]] = None,
            component: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedComponentArgs']]] = None,
            docker: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedDockerArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            online: Optional[pulumi.Input[bool]] = None,
            storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedStorageArgs']]] = None) -> 'NexusRepositoryDockerHosted':
        """
        Get an existing NexusRepositoryDockerHosted resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedCleanupArgs']]]] cleanups: Cleanup policies
        :param pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedComponentArgs']] component: Component configuration for the hosted repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedDockerArgs']] docker: docker contains the configuration of the docker repository
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input[pulumi.InputType['NexusRepositoryDockerHostedStorageArgs']] storage: The storage configuration of the repository
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NexusRepositoryDockerHostedState.__new__(_NexusRepositoryDockerHostedState)

        __props__.__dict__["cleanups"] = cleanups
        __props__.__dict__["component"] = component
        __props__.__dict__["docker"] = docker
        __props__.__dict__["name"] = name
        __props__.__dict__["online"] = online
        __props__.__dict__["storage"] = storage
        return NexusRepositoryDockerHosted(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cleanups(self) -> pulumi.Output[Optional[Sequence['outputs.NexusRepositoryDockerHostedCleanup']]]:
        """
        Cleanup policies
        """
        return pulumi.get(self, "cleanups")

    @property
    @pulumi.getter
    def component(self) -> pulumi.Output['outputs.NexusRepositoryDockerHostedComponent']:
        """
        Component configuration for the hosted repository
        """
        return pulumi.get(self, "component")

    @property
    @pulumi.getter
    def docker(self) -> pulumi.Output['outputs.NexusRepositoryDockerHostedDocker']:
        """
        docker contains the configuration of the docker repository
        """
        return pulumi.get(self, "docker")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def online(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output['outputs.NexusRepositoryDockerHostedStorage']:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

