# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NexusSecurityLdapArgs', 'NexusSecurityLdap']

@pulumi.input_type
class NexusSecurityLdapArgs:
    def __init__(__self__, *,
                 auth_schema: pulumi.Input[str],
                 auth_username: pulumi.Input[str],
                 connection_retry_delay_seconds: pulumi.Input[int],
                 connection_timeout_seconds: pulumi.Input[int],
                 group_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 max_incident_count: pulumi.Input[int],
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 search_base: pulumi.Input[str],
                 auth_password: Optional[pulumi.Input[str]] = None,
                 auth_realm: Optional[pulumi.Input[str]] = None,
                 group_base_dn: Optional[pulumi.Input[str]] = None,
                 group_id_attribute: Optional[pulumi.Input[str]] = None,
                 group_member_attribute: Optional[pulumi.Input[str]] = None,
                 group_member_format: Optional[pulumi.Input[str]] = None,
                 group_object_class: Optional[pulumi.Input[str]] = None,
                 group_subtree: Optional[pulumi.Input[bool]] = None,
                 ldap_groups_as_roles: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 use_trust_store: Optional[pulumi.Input[bool]] = None,
                 user_base_dn: Optional[pulumi.Input[str]] = None,
                 user_email_address_attribute: Optional[pulumi.Input[str]] = None,
                 user_id_attribute: Optional[pulumi.Input[str]] = None,
                 user_ldap_filter: Optional[pulumi.Input[str]] = None,
                 user_member_of_attribute: Optional[pulumi.Input[str]] = None,
                 user_object_class: Optional[pulumi.Input[str]] = None,
                 user_password_attribute: Optional[pulumi.Input[str]] = None,
                 user_real_name_attribute: Optional[pulumi.Input[str]] = None,
                 user_subtree: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a NexusSecurityLdap resource.
        :param pulumi.Input[str] auth_schema: Authentication scheme used for connecting to LDAP server
        :param pulumi.Input[str] auth_username: This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
        :param pulumi.Input[int] connection_retry_delay_seconds: How long to wait before retrying
        :param pulumi.Input[int] connection_timeout_seconds: How long to wait before timeout
        :param pulumi.Input[str] group_type: Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
               Required if ldapGroupsAsRoles is true.
        :param pulumi.Input[str] host: LDAP server connection hostname
        :param pulumi.Input[int] max_incident_count: How many retry attempts
        :param pulumi.Input[int] port: LDAP server connection port to use
        :param pulumi.Input[str] protocol: LDAP server connection Protocol to use
        :param pulumi.Input[str] search_base: LDAP location to be added to the connection URL
        :param pulumi.Input[str] auth_password: The password to bind with. Required if authScheme other than none.
        :param pulumi.Input[str] auth_realm: The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
        :param pulumi.Input[str] group_base_dn: The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
               form the full Group search base DN.
        :param pulumi.Input[str] group_id_attribute: This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
        :param pulumi.Input[str] group_member_attribute: LDAP attribute containing the usernames for the group. Required if groupType is static
        :param pulumi.Input[str] group_member_format: The format of user ID stored in the group member attribute. Required if groupType is static
        :param pulumi.Input[str] group_object_class: LDAP class for group objects. Required if groupType is static
        :param pulumi.Input[bool] group_subtree: Are groups located in structures below the group base DN
        :param pulumi.Input[bool] ldap_groups_as_roles: Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
        :param pulumi.Input[str] name: LDAP server name
        :param pulumi.Input[bool] use_trust_store: Whether to use certificates stored in Nexus Repository Manager's truststore
        :param pulumi.Input[str] user_base_dn: The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
               form the full User search base DN.
        :param pulumi.Input[str] user_email_address_attribute: This is used to find an email address given the user ID
        :param pulumi.Input[str] user_id_attribute: This is used to find a user given its user ID
        :param pulumi.Input[str] user_ldap_filter: LDAP search filter to limit user search
        :param pulumi.Input[str] user_member_of_attribute: Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
               dynamic
        :param pulumi.Input[str] user_object_class: LDAP class for user objects
        :param pulumi.Input[str] user_password_attribute: If this field is blank the user will be authenticated against a bind with the LDAP server
        :param pulumi.Input[str] user_real_name_attribute: This is used to find a real name given the user ID
        :param pulumi.Input[bool] user_subtree: Are users located in structures below the user base DN?
        """
        pulumi.set(__self__, "auth_schema", auth_schema)
        pulumi.set(__self__, "auth_username", auth_username)
        pulumi.set(__self__, "connection_retry_delay_seconds", connection_retry_delay_seconds)
        pulumi.set(__self__, "connection_timeout_seconds", connection_timeout_seconds)
        pulumi.set(__self__, "group_type", group_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "max_incident_count", max_incident_count)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "search_base", search_base)
        if auth_password is not None:
            pulumi.set(__self__, "auth_password", auth_password)
        if auth_realm is not None:
            pulumi.set(__self__, "auth_realm", auth_realm)
        if group_base_dn is not None:
            pulumi.set(__self__, "group_base_dn", group_base_dn)
        if group_id_attribute is not None:
            pulumi.set(__self__, "group_id_attribute", group_id_attribute)
        if group_member_attribute is not None:
            pulumi.set(__self__, "group_member_attribute", group_member_attribute)
        if group_member_format is not None:
            pulumi.set(__self__, "group_member_format", group_member_format)
        if group_object_class is not None:
            pulumi.set(__self__, "group_object_class", group_object_class)
        if group_subtree is not None:
            pulumi.set(__self__, "group_subtree", group_subtree)
        if ldap_groups_as_roles is not None:
            pulumi.set(__self__, "ldap_groups_as_roles", ldap_groups_as_roles)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if use_trust_store is not None:
            pulumi.set(__self__, "use_trust_store", use_trust_store)
        if user_base_dn is not None:
            pulumi.set(__self__, "user_base_dn", user_base_dn)
        if user_email_address_attribute is not None:
            pulumi.set(__self__, "user_email_address_attribute", user_email_address_attribute)
        if user_id_attribute is not None:
            pulumi.set(__self__, "user_id_attribute", user_id_attribute)
        if user_ldap_filter is not None:
            pulumi.set(__self__, "user_ldap_filter", user_ldap_filter)
        if user_member_of_attribute is not None:
            pulumi.set(__self__, "user_member_of_attribute", user_member_of_attribute)
        if user_object_class is not None:
            pulumi.set(__self__, "user_object_class", user_object_class)
        if user_password_attribute is not None:
            pulumi.set(__self__, "user_password_attribute", user_password_attribute)
        if user_real_name_attribute is not None:
            pulumi.set(__self__, "user_real_name_attribute", user_real_name_attribute)
        if user_subtree is not None:
            pulumi.set(__self__, "user_subtree", user_subtree)

    @property
    @pulumi.getter(name="authSchema")
    def auth_schema(self) -> pulumi.Input[str]:
        """
        Authentication scheme used for connecting to LDAP server
        """
        return pulumi.get(self, "auth_schema")

    @auth_schema.setter
    def auth_schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_schema", value)

    @property
    @pulumi.getter(name="authUsername")
    def auth_username(self) -> pulumi.Input[str]:
        """
        This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
        """
        return pulumi.get(self, "auth_username")

    @auth_username.setter
    def auth_username(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_username", value)

    @property
    @pulumi.getter(name="connectionRetryDelaySeconds")
    def connection_retry_delay_seconds(self) -> pulumi.Input[int]:
        """
        How long to wait before retrying
        """
        return pulumi.get(self, "connection_retry_delay_seconds")

    @connection_retry_delay_seconds.setter
    def connection_retry_delay_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "connection_retry_delay_seconds", value)

    @property
    @pulumi.getter(name="connectionTimeoutSeconds")
    def connection_timeout_seconds(self) -> pulumi.Input[int]:
        """
        How long to wait before timeout
        """
        return pulumi.get(self, "connection_timeout_seconds")

    @connection_timeout_seconds.setter
    def connection_timeout_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "connection_timeout_seconds", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Input[str]:
        """
        Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
        Required if ldapGroupsAsRoles is true.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        LDAP server connection hostname
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="maxIncidentCount")
    def max_incident_count(self) -> pulumi.Input[int]:
        """
        How many retry attempts
        """
        return pulumi.get(self, "max_incident_count")

    @max_incident_count.setter
    def max_incident_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_incident_count", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        LDAP server connection port to use
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        LDAP server connection Protocol to use
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="searchBase")
    def search_base(self) -> pulumi.Input[str]:
        """
        LDAP location to be added to the connection URL
        """
        return pulumi.get(self, "search_base")

    @search_base.setter
    def search_base(self, value: pulumi.Input[str]):
        pulumi.set(self, "search_base", value)

    @property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password to bind with. Required if authScheme other than none.
        """
        return pulumi.get(self, "auth_password")

    @auth_password.setter
    def auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password", value)

    @property
    @pulumi.getter(name="authRealm")
    def auth_realm(self) -> Optional[pulumi.Input[str]]:
        """
        The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
        """
        return pulumi.get(self, "auth_realm")

    @auth_realm.setter
    def auth_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_realm", value)

    @property
    @pulumi.getter(name="groupBaseDn")
    def group_base_dn(self) -> Optional[pulumi.Input[str]]:
        """
        The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
        form the full Group search base DN.
        """
        return pulumi.get(self, "group_base_dn")

    @group_base_dn.setter
    def group_base_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_base_dn", value)

    @property
    @pulumi.getter(name="groupIdAttribute")
    def group_id_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
        """
        return pulumi.get(self, "group_id_attribute")

    @group_id_attribute.setter
    def group_id_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id_attribute", value)

    @property
    @pulumi.getter(name="groupMemberAttribute")
    def group_member_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP attribute containing the usernames for the group. Required if groupType is static
        """
        return pulumi.get(self, "group_member_attribute")

    @group_member_attribute.setter
    def group_member_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_member_attribute", value)

    @property
    @pulumi.getter(name="groupMemberFormat")
    def group_member_format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of user ID stored in the group member attribute. Required if groupType is static
        """
        return pulumi.get(self, "group_member_format")

    @group_member_format.setter
    def group_member_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_member_format", value)

    @property
    @pulumi.getter(name="groupObjectClass")
    def group_object_class(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP class for group objects. Required if groupType is static
        """
        return pulumi.get(self, "group_object_class")

    @group_object_class.setter
    def group_object_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_object_class", value)

    @property
    @pulumi.getter(name="groupSubtree")
    def group_subtree(self) -> Optional[pulumi.Input[bool]]:
        """
        Are groups located in structures below the group base DN
        """
        return pulumi.get(self, "group_subtree")

    @group_subtree.setter
    def group_subtree(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "group_subtree", value)

    @property
    @pulumi.getter(name="ldapGroupsAsRoles")
    def ldap_groups_as_roles(self) -> Optional[pulumi.Input[bool]]:
        """
        Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
        """
        return pulumi.get(self, "ldap_groups_as_roles")

    @ldap_groups_as_roles.setter
    def ldap_groups_as_roles(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ldap_groups_as_roles", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP server name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use certificates stored in Nexus Repository Manager's truststore
        """
        return pulumi.get(self, "use_trust_store")

    @use_trust_store.setter
    def use_trust_store(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_trust_store", value)

    @property
    @pulumi.getter(name="userBaseDn")
    def user_base_dn(self) -> Optional[pulumi.Input[str]]:
        """
        The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
        form the full User search base DN.
        """
        return pulumi.get(self, "user_base_dn")

    @user_base_dn.setter
    def user_base_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_base_dn", value)

    @property
    @pulumi.getter(name="userEmailAddressAttribute")
    def user_email_address_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        This is used to find an email address given the user ID
        """
        return pulumi.get(self, "user_email_address_attribute")

    @user_email_address_attribute.setter
    def user_email_address_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_email_address_attribute", value)

    @property
    @pulumi.getter(name="userIdAttribute")
    def user_id_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        This is used to find a user given its user ID
        """
        return pulumi.get(self, "user_id_attribute")

    @user_id_attribute.setter
    def user_id_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id_attribute", value)

    @property
    @pulumi.getter(name="userLdapFilter")
    def user_ldap_filter(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP search filter to limit user search
        """
        return pulumi.get(self, "user_ldap_filter")

    @user_ldap_filter.setter
    def user_ldap_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_ldap_filter", value)

    @property
    @pulumi.getter(name="userMemberOfAttribute")
    def user_member_of_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
        dynamic
        """
        return pulumi.get(self, "user_member_of_attribute")

    @user_member_of_attribute.setter
    def user_member_of_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_member_of_attribute", value)

    @property
    @pulumi.getter(name="userObjectClass")
    def user_object_class(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP class for user objects
        """
        return pulumi.get(self, "user_object_class")

    @user_object_class.setter
    def user_object_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_object_class", value)

    @property
    @pulumi.getter(name="userPasswordAttribute")
    def user_password_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        If this field is blank the user will be authenticated against a bind with the LDAP server
        """
        return pulumi.get(self, "user_password_attribute")

    @user_password_attribute.setter
    def user_password_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_password_attribute", value)

    @property
    @pulumi.getter(name="userRealNameAttribute")
    def user_real_name_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        This is used to find a real name given the user ID
        """
        return pulumi.get(self, "user_real_name_attribute")

    @user_real_name_attribute.setter
    def user_real_name_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_real_name_attribute", value)

    @property
    @pulumi.getter(name="userSubtree")
    def user_subtree(self) -> Optional[pulumi.Input[bool]]:
        """
        Are users located in structures below the user base DN?
        """
        return pulumi.get(self, "user_subtree")

    @user_subtree.setter
    def user_subtree(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_subtree", value)


@pulumi.input_type
class _NexusSecurityLdapState:
    def __init__(__self__, *,
                 auth_password: Optional[pulumi.Input[str]] = None,
                 auth_realm: Optional[pulumi.Input[str]] = None,
                 auth_schema: Optional[pulumi.Input[str]] = None,
                 auth_username: Optional[pulumi.Input[str]] = None,
                 connection_retry_delay_seconds: Optional[pulumi.Input[int]] = None,
                 connection_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 group_base_dn: Optional[pulumi.Input[str]] = None,
                 group_id_attribute: Optional[pulumi.Input[str]] = None,
                 group_member_attribute: Optional[pulumi.Input[str]] = None,
                 group_member_format: Optional[pulumi.Input[str]] = None,
                 group_object_class: Optional[pulumi.Input[str]] = None,
                 group_subtree: Optional[pulumi.Input[bool]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 ldap_groups_as_roles: Optional[pulumi.Input[bool]] = None,
                 max_incident_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 search_base: Optional[pulumi.Input[str]] = None,
                 use_trust_store: Optional[pulumi.Input[bool]] = None,
                 user_base_dn: Optional[pulumi.Input[str]] = None,
                 user_email_address_attribute: Optional[pulumi.Input[str]] = None,
                 user_id_attribute: Optional[pulumi.Input[str]] = None,
                 user_ldap_filter: Optional[pulumi.Input[str]] = None,
                 user_member_of_attribute: Optional[pulumi.Input[str]] = None,
                 user_object_class: Optional[pulumi.Input[str]] = None,
                 user_password_attribute: Optional[pulumi.Input[str]] = None,
                 user_real_name_attribute: Optional[pulumi.Input[str]] = None,
                 user_subtree: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering NexusSecurityLdap resources.
        :param pulumi.Input[str] auth_password: The password to bind with. Required if authScheme other than none.
        :param pulumi.Input[str] auth_realm: The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
        :param pulumi.Input[str] auth_schema: Authentication scheme used for connecting to LDAP server
        :param pulumi.Input[str] auth_username: This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
        :param pulumi.Input[int] connection_retry_delay_seconds: How long to wait before retrying
        :param pulumi.Input[int] connection_timeout_seconds: How long to wait before timeout
        :param pulumi.Input[str] group_base_dn: The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
               form the full Group search base DN.
        :param pulumi.Input[str] group_id_attribute: This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
        :param pulumi.Input[str] group_member_attribute: LDAP attribute containing the usernames for the group. Required if groupType is static
        :param pulumi.Input[str] group_member_format: The format of user ID stored in the group member attribute. Required if groupType is static
        :param pulumi.Input[str] group_object_class: LDAP class for group objects. Required if groupType is static
        :param pulumi.Input[bool] group_subtree: Are groups located in structures below the group base DN
        :param pulumi.Input[str] group_type: Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
               Required if ldapGroupsAsRoles is true.
        :param pulumi.Input[str] host: LDAP server connection hostname
        :param pulumi.Input[bool] ldap_groups_as_roles: Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
        :param pulumi.Input[int] max_incident_count: How many retry attempts
        :param pulumi.Input[str] name: LDAP server name
        :param pulumi.Input[int] port: LDAP server connection port to use
        :param pulumi.Input[str] protocol: LDAP server connection Protocol to use
        :param pulumi.Input[str] search_base: LDAP location to be added to the connection URL
        :param pulumi.Input[bool] use_trust_store: Whether to use certificates stored in Nexus Repository Manager's truststore
        :param pulumi.Input[str] user_base_dn: The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
               form the full User search base DN.
        :param pulumi.Input[str] user_email_address_attribute: This is used to find an email address given the user ID
        :param pulumi.Input[str] user_id_attribute: This is used to find a user given its user ID
        :param pulumi.Input[str] user_ldap_filter: LDAP search filter to limit user search
        :param pulumi.Input[str] user_member_of_attribute: Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
               dynamic
        :param pulumi.Input[str] user_object_class: LDAP class for user objects
        :param pulumi.Input[str] user_password_attribute: If this field is blank the user will be authenticated against a bind with the LDAP server
        :param pulumi.Input[str] user_real_name_attribute: This is used to find a real name given the user ID
        :param pulumi.Input[bool] user_subtree: Are users located in structures below the user base DN?
        """
        if auth_password is not None:
            pulumi.set(__self__, "auth_password", auth_password)
        if auth_realm is not None:
            pulumi.set(__self__, "auth_realm", auth_realm)
        if auth_schema is not None:
            pulumi.set(__self__, "auth_schema", auth_schema)
        if auth_username is not None:
            pulumi.set(__self__, "auth_username", auth_username)
        if connection_retry_delay_seconds is not None:
            pulumi.set(__self__, "connection_retry_delay_seconds", connection_retry_delay_seconds)
        if connection_timeout_seconds is not None:
            pulumi.set(__self__, "connection_timeout_seconds", connection_timeout_seconds)
        if group_base_dn is not None:
            pulumi.set(__self__, "group_base_dn", group_base_dn)
        if group_id_attribute is not None:
            pulumi.set(__self__, "group_id_attribute", group_id_attribute)
        if group_member_attribute is not None:
            pulumi.set(__self__, "group_member_attribute", group_member_attribute)
        if group_member_format is not None:
            pulumi.set(__self__, "group_member_format", group_member_format)
        if group_object_class is not None:
            pulumi.set(__self__, "group_object_class", group_object_class)
        if group_subtree is not None:
            pulumi.set(__self__, "group_subtree", group_subtree)
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ldap_groups_as_roles is not None:
            pulumi.set(__self__, "ldap_groups_as_roles", ldap_groups_as_roles)
        if max_incident_count is not None:
            pulumi.set(__self__, "max_incident_count", max_incident_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if search_base is not None:
            pulumi.set(__self__, "search_base", search_base)
        if use_trust_store is not None:
            pulumi.set(__self__, "use_trust_store", use_trust_store)
        if user_base_dn is not None:
            pulumi.set(__self__, "user_base_dn", user_base_dn)
        if user_email_address_attribute is not None:
            pulumi.set(__self__, "user_email_address_attribute", user_email_address_attribute)
        if user_id_attribute is not None:
            pulumi.set(__self__, "user_id_attribute", user_id_attribute)
        if user_ldap_filter is not None:
            pulumi.set(__self__, "user_ldap_filter", user_ldap_filter)
        if user_member_of_attribute is not None:
            pulumi.set(__self__, "user_member_of_attribute", user_member_of_attribute)
        if user_object_class is not None:
            pulumi.set(__self__, "user_object_class", user_object_class)
        if user_password_attribute is not None:
            pulumi.set(__self__, "user_password_attribute", user_password_attribute)
        if user_real_name_attribute is not None:
            pulumi.set(__self__, "user_real_name_attribute", user_real_name_attribute)
        if user_subtree is not None:
            pulumi.set(__self__, "user_subtree", user_subtree)

    @property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password to bind with. Required if authScheme other than none.
        """
        return pulumi.get(self, "auth_password")

    @auth_password.setter
    def auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password", value)

    @property
    @pulumi.getter(name="authRealm")
    def auth_realm(self) -> Optional[pulumi.Input[str]]:
        """
        The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
        """
        return pulumi.get(self, "auth_realm")

    @auth_realm.setter
    def auth_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_realm", value)

    @property
    @pulumi.getter(name="authSchema")
    def auth_schema(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication scheme used for connecting to LDAP server
        """
        return pulumi.get(self, "auth_schema")

    @auth_schema.setter
    def auth_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_schema", value)

    @property
    @pulumi.getter(name="authUsername")
    def auth_username(self) -> Optional[pulumi.Input[str]]:
        """
        This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
        """
        return pulumi.get(self, "auth_username")

    @auth_username.setter
    def auth_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_username", value)

    @property
    @pulumi.getter(name="connectionRetryDelaySeconds")
    def connection_retry_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How long to wait before retrying
        """
        return pulumi.get(self, "connection_retry_delay_seconds")

    @connection_retry_delay_seconds.setter
    def connection_retry_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_retry_delay_seconds", value)

    @property
    @pulumi.getter(name="connectionTimeoutSeconds")
    def connection_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How long to wait before timeout
        """
        return pulumi.get(self, "connection_timeout_seconds")

    @connection_timeout_seconds.setter
    def connection_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_timeout_seconds", value)

    @property
    @pulumi.getter(name="groupBaseDn")
    def group_base_dn(self) -> Optional[pulumi.Input[str]]:
        """
        The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
        form the full Group search base DN.
        """
        return pulumi.get(self, "group_base_dn")

    @group_base_dn.setter
    def group_base_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_base_dn", value)

    @property
    @pulumi.getter(name="groupIdAttribute")
    def group_id_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
        """
        return pulumi.get(self, "group_id_attribute")

    @group_id_attribute.setter
    def group_id_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id_attribute", value)

    @property
    @pulumi.getter(name="groupMemberAttribute")
    def group_member_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP attribute containing the usernames for the group. Required if groupType is static
        """
        return pulumi.get(self, "group_member_attribute")

    @group_member_attribute.setter
    def group_member_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_member_attribute", value)

    @property
    @pulumi.getter(name="groupMemberFormat")
    def group_member_format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of user ID stored in the group member attribute. Required if groupType is static
        """
        return pulumi.get(self, "group_member_format")

    @group_member_format.setter
    def group_member_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_member_format", value)

    @property
    @pulumi.getter(name="groupObjectClass")
    def group_object_class(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP class for group objects. Required if groupType is static
        """
        return pulumi.get(self, "group_object_class")

    @group_object_class.setter
    def group_object_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_object_class", value)

    @property
    @pulumi.getter(name="groupSubtree")
    def group_subtree(self) -> Optional[pulumi.Input[bool]]:
        """
        Are groups located in structures below the group base DN
        """
        return pulumi.get(self, "group_subtree")

    @group_subtree.setter
    def group_subtree(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "group_subtree", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input[str]]:
        """
        Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
        Required if ldapGroupsAsRoles is true.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP server connection hostname
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="ldapGroupsAsRoles")
    def ldap_groups_as_roles(self) -> Optional[pulumi.Input[bool]]:
        """
        Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
        """
        return pulumi.get(self, "ldap_groups_as_roles")

    @ldap_groups_as_roles.setter
    def ldap_groups_as_roles(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ldap_groups_as_roles", value)

    @property
    @pulumi.getter(name="maxIncidentCount")
    def max_incident_count(self) -> Optional[pulumi.Input[int]]:
        """
        How many retry attempts
        """
        return pulumi.get(self, "max_incident_count")

    @max_incident_count.setter
    def max_incident_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_incident_count", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP server name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        LDAP server connection port to use
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP server connection Protocol to use
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="searchBase")
    def search_base(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP location to be added to the connection URL
        """
        return pulumi.get(self, "search_base")

    @search_base.setter
    def search_base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_base", value)

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use certificates stored in Nexus Repository Manager's truststore
        """
        return pulumi.get(self, "use_trust_store")

    @use_trust_store.setter
    def use_trust_store(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_trust_store", value)

    @property
    @pulumi.getter(name="userBaseDn")
    def user_base_dn(self) -> Optional[pulumi.Input[str]]:
        """
        The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
        form the full User search base DN.
        """
        return pulumi.get(self, "user_base_dn")

    @user_base_dn.setter
    def user_base_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_base_dn", value)

    @property
    @pulumi.getter(name="userEmailAddressAttribute")
    def user_email_address_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        This is used to find an email address given the user ID
        """
        return pulumi.get(self, "user_email_address_attribute")

    @user_email_address_attribute.setter
    def user_email_address_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_email_address_attribute", value)

    @property
    @pulumi.getter(name="userIdAttribute")
    def user_id_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        This is used to find a user given its user ID
        """
        return pulumi.get(self, "user_id_attribute")

    @user_id_attribute.setter
    def user_id_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id_attribute", value)

    @property
    @pulumi.getter(name="userLdapFilter")
    def user_ldap_filter(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP search filter to limit user search
        """
        return pulumi.get(self, "user_ldap_filter")

    @user_ldap_filter.setter
    def user_ldap_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_ldap_filter", value)

    @property
    @pulumi.getter(name="userMemberOfAttribute")
    def user_member_of_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
        dynamic
        """
        return pulumi.get(self, "user_member_of_attribute")

    @user_member_of_attribute.setter
    def user_member_of_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_member_of_attribute", value)

    @property
    @pulumi.getter(name="userObjectClass")
    def user_object_class(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP class for user objects
        """
        return pulumi.get(self, "user_object_class")

    @user_object_class.setter
    def user_object_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_object_class", value)

    @property
    @pulumi.getter(name="userPasswordAttribute")
    def user_password_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        If this field is blank the user will be authenticated against a bind with the LDAP server
        """
        return pulumi.get(self, "user_password_attribute")

    @user_password_attribute.setter
    def user_password_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_password_attribute", value)

    @property
    @pulumi.getter(name="userRealNameAttribute")
    def user_real_name_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        This is used to find a real name given the user ID
        """
        return pulumi.get(self, "user_real_name_attribute")

    @user_real_name_attribute.setter
    def user_real_name_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_real_name_attribute", value)

    @property
    @pulumi.getter(name="userSubtree")
    def user_subtree(self) -> Optional[pulumi.Input[bool]]:
        """
        Are users located in structures below the user base DN?
        """
        return pulumi.get(self, "user_subtree")

    @user_subtree.setter
    def user_subtree(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_subtree", value)


class NexusSecurityLdap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_password: Optional[pulumi.Input[str]] = None,
                 auth_realm: Optional[pulumi.Input[str]] = None,
                 auth_schema: Optional[pulumi.Input[str]] = None,
                 auth_username: Optional[pulumi.Input[str]] = None,
                 connection_retry_delay_seconds: Optional[pulumi.Input[int]] = None,
                 connection_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 group_base_dn: Optional[pulumi.Input[str]] = None,
                 group_id_attribute: Optional[pulumi.Input[str]] = None,
                 group_member_attribute: Optional[pulumi.Input[str]] = None,
                 group_member_format: Optional[pulumi.Input[str]] = None,
                 group_object_class: Optional[pulumi.Input[str]] = None,
                 group_subtree: Optional[pulumi.Input[bool]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 ldap_groups_as_roles: Optional[pulumi.Input[bool]] = None,
                 max_incident_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 search_base: Optional[pulumi.Input[str]] = None,
                 use_trust_store: Optional[pulumi.Input[bool]] = None,
                 user_base_dn: Optional[pulumi.Input[str]] = None,
                 user_email_address_attribute: Optional[pulumi.Input[str]] = None,
                 user_id_attribute: Optional[pulumi.Input[str]] = None,
                 user_ldap_filter: Optional[pulumi.Input[str]] = None,
                 user_member_of_attribute: Optional[pulumi.Input[str]] = None,
                 user_object_class: Optional[pulumi.Input[str]] = None,
                 user_password_attribute: Optional[pulumi.Input[str]] = None,
                 user_real_name_attribute: Optional[pulumi.Input[str]] = None,
                 user_subtree: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a NexusSecurityLdap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_password: The password to bind with. Required if authScheme other than none.
        :param pulumi.Input[str] auth_realm: The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
        :param pulumi.Input[str] auth_schema: Authentication scheme used for connecting to LDAP server
        :param pulumi.Input[str] auth_username: This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
        :param pulumi.Input[int] connection_retry_delay_seconds: How long to wait before retrying
        :param pulumi.Input[int] connection_timeout_seconds: How long to wait before timeout
        :param pulumi.Input[str] group_base_dn: The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
               form the full Group search base DN.
        :param pulumi.Input[str] group_id_attribute: This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
        :param pulumi.Input[str] group_member_attribute: LDAP attribute containing the usernames for the group. Required if groupType is static
        :param pulumi.Input[str] group_member_format: The format of user ID stored in the group member attribute. Required if groupType is static
        :param pulumi.Input[str] group_object_class: LDAP class for group objects. Required if groupType is static
        :param pulumi.Input[bool] group_subtree: Are groups located in structures below the group base DN
        :param pulumi.Input[str] group_type: Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
               Required if ldapGroupsAsRoles is true.
        :param pulumi.Input[str] host: LDAP server connection hostname
        :param pulumi.Input[bool] ldap_groups_as_roles: Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
        :param pulumi.Input[int] max_incident_count: How many retry attempts
        :param pulumi.Input[str] name: LDAP server name
        :param pulumi.Input[int] port: LDAP server connection port to use
        :param pulumi.Input[str] protocol: LDAP server connection Protocol to use
        :param pulumi.Input[str] search_base: LDAP location to be added to the connection URL
        :param pulumi.Input[bool] use_trust_store: Whether to use certificates stored in Nexus Repository Manager's truststore
        :param pulumi.Input[str] user_base_dn: The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
               form the full User search base DN.
        :param pulumi.Input[str] user_email_address_attribute: This is used to find an email address given the user ID
        :param pulumi.Input[str] user_id_attribute: This is used to find a user given its user ID
        :param pulumi.Input[str] user_ldap_filter: LDAP search filter to limit user search
        :param pulumi.Input[str] user_member_of_attribute: Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
               dynamic
        :param pulumi.Input[str] user_object_class: LDAP class for user objects
        :param pulumi.Input[str] user_password_attribute: If this field is blank the user will be authenticated against a bind with the LDAP server
        :param pulumi.Input[str] user_real_name_attribute: This is used to find a real name given the user ID
        :param pulumi.Input[bool] user_subtree: Are users located in structures below the user base DN?
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NexusSecurityLdapArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NexusSecurityLdap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NexusSecurityLdapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NexusSecurityLdapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_password: Optional[pulumi.Input[str]] = None,
                 auth_realm: Optional[pulumi.Input[str]] = None,
                 auth_schema: Optional[pulumi.Input[str]] = None,
                 auth_username: Optional[pulumi.Input[str]] = None,
                 connection_retry_delay_seconds: Optional[pulumi.Input[int]] = None,
                 connection_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 group_base_dn: Optional[pulumi.Input[str]] = None,
                 group_id_attribute: Optional[pulumi.Input[str]] = None,
                 group_member_attribute: Optional[pulumi.Input[str]] = None,
                 group_member_format: Optional[pulumi.Input[str]] = None,
                 group_object_class: Optional[pulumi.Input[str]] = None,
                 group_subtree: Optional[pulumi.Input[bool]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 ldap_groups_as_roles: Optional[pulumi.Input[bool]] = None,
                 max_incident_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 search_base: Optional[pulumi.Input[str]] = None,
                 use_trust_store: Optional[pulumi.Input[bool]] = None,
                 user_base_dn: Optional[pulumi.Input[str]] = None,
                 user_email_address_attribute: Optional[pulumi.Input[str]] = None,
                 user_id_attribute: Optional[pulumi.Input[str]] = None,
                 user_ldap_filter: Optional[pulumi.Input[str]] = None,
                 user_member_of_attribute: Optional[pulumi.Input[str]] = None,
                 user_object_class: Optional[pulumi.Input[str]] = None,
                 user_password_attribute: Optional[pulumi.Input[str]] = None,
                 user_real_name_attribute: Optional[pulumi.Input[str]] = None,
                 user_subtree: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NexusSecurityLdapArgs.__new__(NexusSecurityLdapArgs)

            __props__.__dict__["auth_password"] = auth_password
            __props__.__dict__["auth_realm"] = auth_realm
            if auth_schema is None and not opts.urn:
                raise TypeError("Missing required property 'auth_schema'")
            __props__.__dict__["auth_schema"] = auth_schema
            if auth_username is None and not opts.urn:
                raise TypeError("Missing required property 'auth_username'")
            __props__.__dict__["auth_username"] = auth_username
            if connection_retry_delay_seconds is None and not opts.urn:
                raise TypeError("Missing required property 'connection_retry_delay_seconds'")
            __props__.__dict__["connection_retry_delay_seconds"] = connection_retry_delay_seconds
            if connection_timeout_seconds is None and not opts.urn:
                raise TypeError("Missing required property 'connection_timeout_seconds'")
            __props__.__dict__["connection_timeout_seconds"] = connection_timeout_seconds
            __props__.__dict__["group_base_dn"] = group_base_dn
            __props__.__dict__["group_id_attribute"] = group_id_attribute
            __props__.__dict__["group_member_attribute"] = group_member_attribute
            __props__.__dict__["group_member_format"] = group_member_format
            __props__.__dict__["group_object_class"] = group_object_class
            __props__.__dict__["group_subtree"] = group_subtree
            if group_type is None and not opts.urn:
                raise TypeError("Missing required property 'group_type'")
            __props__.__dict__["group_type"] = group_type
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["ldap_groups_as_roles"] = ldap_groups_as_roles
            if max_incident_count is None and not opts.urn:
                raise TypeError("Missing required property 'max_incident_count'")
            __props__.__dict__["max_incident_count"] = max_incident_count
            __props__.__dict__["name"] = name
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if search_base is None and not opts.urn:
                raise TypeError("Missing required property 'search_base'")
            __props__.__dict__["search_base"] = search_base
            __props__.__dict__["use_trust_store"] = use_trust_store
            __props__.__dict__["user_base_dn"] = user_base_dn
            __props__.__dict__["user_email_address_attribute"] = user_email_address_attribute
            __props__.__dict__["user_id_attribute"] = user_id_attribute
            __props__.__dict__["user_ldap_filter"] = user_ldap_filter
            __props__.__dict__["user_member_of_attribute"] = user_member_of_attribute
            __props__.__dict__["user_object_class"] = user_object_class
            __props__.__dict__["user_password_attribute"] = user_password_attribute
            __props__.__dict__["user_real_name_attribute"] = user_real_name_attribute
            __props__.__dict__["user_subtree"] = user_subtree
        super(NexusSecurityLdap, __self__).__init__(
            'nexus:index/nexusSecurityLdap:NexusSecurityLdap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_password: Optional[pulumi.Input[str]] = None,
            auth_realm: Optional[pulumi.Input[str]] = None,
            auth_schema: Optional[pulumi.Input[str]] = None,
            auth_username: Optional[pulumi.Input[str]] = None,
            connection_retry_delay_seconds: Optional[pulumi.Input[int]] = None,
            connection_timeout_seconds: Optional[pulumi.Input[int]] = None,
            group_base_dn: Optional[pulumi.Input[str]] = None,
            group_id_attribute: Optional[pulumi.Input[str]] = None,
            group_member_attribute: Optional[pulumi.Input[str]] = None,
            group_member_format: Optional[pulumi.Input[str]] = None,
            group_object_class: Optional[pulumi.Input[str]] = None,
            group_subtree: Optional[pulumi.Input[bool]] = None,
            group_type: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            ldap_groups_as_roles: Optional[pulumi.Input[bool]] = None,
            max_incident_count: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            search_base: Optional[pulumi.Input[str]] = None,
            use_trust_store: Optional[pulumi.Input[bool]] = None,
            user_base_dn: Optional[pulumi.Input[str]] = None,
            user_email_address_attribute: Optional[pulumi.Input[str]] = None,
            user_id_attribute: Optional[pulumi.Input[str]] = None,
            user_ldap_filter: Optional[pulumi.Input[str]] = None,
            user_member_of_attribute: Optional[pulumi.Input[str]] = None,
            user_object_class: Optional[pulumi.Input[str]] = None,
            user_password_attribute: Optional[pulumi.Input[str]] = None,
            user_real_name_attribute: Optional[pulumi.Input[str]] = None,
            user_subtree: Optional[pulumi.Input[bool]] = None) -> 'NexusSecurityLdap':
        """
        Get an existing NexusSecurityLdap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_password: The password to bind with. Required if authScheme other than none.
        :param pulumi.Input[str] auth_realm: The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
        :param pulumi.Input[str] auth_schema: Authentication scheme used for connecting to LDAP server
        :param pulumi.Input[str] auth_username: This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
        :param pulumi.Input[int] connection_retry_delay_seconds: How long to wait before retrying
        :param pulumi.Input[int] connection_timeout_seconds: How long to wait before timeout
        :param pulumi.Input[str] group_base_dn: The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
               form the full Group search base DN.
        :param pulumi.Input[str] group_id_attribute: This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
        :param pulumi.Input[str] group_member_attribute: LDAP attribute containing the usernames for the group. Required if groupType is static
        :param pulumi.Input[str] group_member_format: The format of user ID stored in the group member attribute. Required if groupType is static
        :param pulumi.Input[str] group_object_class: LDAP class for group objects. Required if groupType is static
        :param pulumi.Input[bool] group_subtree: Are groups located in structures below the group base DN
        :param pulumi.Input[str] group_type: Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
               Required if ldapGroupsAsRoles is true.
        :param pulumi.Input[str] host: LDAP server connection hostname
        :param pulumi.Input[bool] ldap_groups_as_roles: Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
        :param pulumi.Input[int] max_incident_count: How many retry attempts
        :param pulumi.Input[str] name: LDAP server name
        :param pulumi.Input[int] port: LDAP server connection port to use
        :param pulumi.Input[str] protocol: LDAP server connection Protocol to use
        :param pulumi.Input[str] search_base: LDAP location to be added to the connection URL
        :param pulumi.Input[bool] use_trust_store: Whether to use certificates stored in Nexus Repository Manager's truststore
        :param pulumi.Input[str] user_base_dn: The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
               form the full User search base DN.
        :param pulumi.Input[str] user_email_address_attribute: This is used to find an email address given the user ID
        :param pulumi.Input[str] user_id_attribute: This is used to find a user given its user ID
        :param pulumi.Input[str] user_ldap_filter: LDAP search filter to limit user search
        :param pulumi.Input[str] user_member_of_attribute: Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
               dynamic
        :param pulumi.Input[str] user_object_class: LDAP class for user objects
        :param pulumi.Input[str] user_password_attribute: If this field is blank the user will be authenticated against a bind with the LDAP server
        :param pulumi.Input[str] user_real_name_attribute: This is used to find a real name given the user ID
        :param pulumi.Input[bool] user_subtree: Are users located in structures below the user base DN?
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NexusSecurityLdapState.__new__(_NexusSecurityLdapState)

        __props__.__dict__["auth_password"] = auth_password
        __props__.__dict__["auth_realm"] = auth_realm
        __props__.__dict__["auth_schema"] = auth_schema
        __props__.__dict__["auth_username"] = auth_username
        __props__.__dict__["connection_retry_delay_seconds"] = connection_retry_delay_seconds
        __props__.__dict__["connection_timeout_seconds"] = connection_timeout_seconds
        __props__.__dict__["group_base_dn"] = group_base_dn
        __props__.__dict__["group_id_attribute"] = group_id_attribute
        __props__.__dict__["group_member_attribute"] = group_member_attribute
        __props__.__dict__["group_member_format"] = group_member_format
        __props__.__dict__["group_object_class"] = group_object_class
        __props__.__dict__["group_subtree"] = group_subtree
        __props__.__dict__["group_type"] = group_type
        __props__.__dict__["host"] = host
        __props__.__dict__["ldap_groups_as_roles"] = ldap_groups_as_roles
        __props__.__dict__["max_incident_count"] = max_incident_count
        __props__.__dict__["name"] = name
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["search_base"] = search_base
        __props__.__dict__["use_trust_store"] = use_trust_store
        __props__.__dict__["user_base_dn"] = user_base_dn
        __props__.__dict__["user_email_address_attribute"] = user_email_address_attribute
        __props__.__dict__["user_id_attribute"] = user_id_attribute
        __props__.__dict__["user_ldap_filter"] = user_ldap_filter
        __props__.__dict__["user_member_of_attribute"] = user_member_of_attribute
        __props__.__dict__["user_object_class"] = user_object_class
        __props__.__dict__["user_password_attribute"] = user_password_attribute
        __props__.__dict__["user_real_name_attribute"] = user_real_name_attribute
        __props__.__dict__["user_subtree"] = user_subtree
        return NexusSecurityLdap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> pulumi.Output[Optional[str]]:
        """
        The password to bind with. Required if authScheme other than none.
        """
        return pulumi.get(self, "auth_password")

    @property
    @pulumi.getter(name="authRealm")
    def auth_realm(self) -> pulumi.Output[Optional[str]]:
        """
        The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
        """
        return pulumi.get(self, "auth_realm")

    @property
    @pulumi.getter(name="authSchema")
    def auth_schema(self) -> pulumi.Output[str]:
        """
        Authentication scheme used for connecting to LDAP server
        """
        return pulumi.get(self, "auth_schema")

    @property
    @pulumi.getter(name="authUsername")
    def auth_username(self) -> pulumi.Output[str]:
        """
        This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
        """
        return pulumi.get(self, "auth_username")

    @property
    @pulumi.getter(name="connectionRetryDelaySeconds")
    def connection_retry_delay_seconds(self) -> pulumi.Output[int]:
        """
        How long to wait before retrying
        """
        return pulumi.get(self, "connection_retry_delay_seconds")

    @property
    @pulumi.getter(name="connectionTimeoutSeconds")
    def connection_timeout_seconds(self) -> pulumi.Output[int]:
        """
        How long to wait before timeout
        """
        return pulumi.get(self, "connection_timeout_seconds")

    @property
    @pulumi.getter(name="groupBaseDn")
    def group_base_dn(self) -> pulumi.Output[Optional[str]]:
        """
        The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
        form the full Group search base DN.
        """
        return pulumi.get(self, "group_base_dn")

    @property
    @pulumi.getter(name="groupIdAttribute")
    def group_id_attribute(self) -> pulumi.Output[Optional[str]]:
        """
        This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
        """
        return pulumi.get(self, "group_id_attribute")

    @property
    @pulumi.getter(name="groupMemberAttribute")
    def group_member_attribute(self) -> pulumi.Output[Optional[str]]:
        """
        LDAP attribute containing the usernames for the group. Required if groupType is static
        """
        return pulumi.get(self, "group_member_attribute")

    @property
    @pulumi.getter(name="groupMemberFormat")
    def group_member_format(self) -> pulumi.Output[Optional[str]]:
        """
        The format of user ID stored in the group member attribute. Required if groupType is static
        """
        return pulumi.get(self, "group_member_format")

    @property
    @pulumi.getter(name="groupObjectClass")
    def group_object_class(self) -> pulumi.Output[Optional[str]]:
        """
        LDAP class for group objects. Required if groupType is static
        """
        return pulumi.get(self, "group_object_class")

    @property
    @pulumi.getter(name="groupSubtree")
    def group_subtree(self) -> pulumi.Output[Optional[bool]]:
        """
        Are groups located in structures below the group base DN
        """
        return pulumi.get(self, "group_subtree")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Output[str]:
        """
        Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
        Required if ldapGroupsAsRoles is true.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        LDAP server connection hostname
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="ldapGroupsAsRoles")
    def ldap_groups_as_roles(self) -> pulumi.Output[Optional[bool]]:
        """
        Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
        """
        return pulumi.get(self, "ldap_groups_as_roles")

    @property
    @pulumi.getter(name="maxIncidentCount")
    def max_incident_count(self) -> pulumi.Output[int]:
        """
        How many retry attempts
        """
        return pulumi.get(self, "max_incident_count")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        LDAP server name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        LDAP server connection port to use
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        LDAP server connection Protocol to use
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="searchBase")
    def search_base(self) -> pulumi.Output[str]:
        """
        LDAP location to be added to the connection URL
        """
        return pulumi.get(self, "search_base")

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to use certificates stored in Nexus Repository Manager's truststore
        """
        return pulumi.get(self, "use_trust_store")

    @property
    @pulumi.getter(name="userBaseDn")
    def user_base_dn(self) -> pulumi.Output[Optional[str]]:
        """
        The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
        form the full User search base DN.
        """
        return pulumi.get(self, "user_base_dn")

    @property
    @pulumi.getter(name="userEmailAddressAttribute")
    def user_email_address_attribute(self) -> pulumi.Output[Optional[str]]:
        """
        This is used to find an email address given the user ID
        """
        return pulumi.get(self, "user_email_address_attribute")

    @property
    @pulumi.getter(name="userIdAttribute")
    def user_id_attribute(self) -> pulumi.Output[Optional[str]]:
        """
        This is used to find a user given its user ID
        """
        return pulumi.get(self, "user_id_attribute")

    @property
    @pulumi.getter(name="userLdapFilter")
    def user_ldap_filter(self) -> pulumi.Output[Optional[str]]:
        """
        LDAP search filter to limit user search
        """
        return pulumi.get(self, "user_ldap_filter")

    @property
    @pulumi.getter(name="userMemberOfAttribute")
    def user_member_of_attribute(self) -> pulumi.Output[Optional[str]]:
        """
        Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
        dynamic
        """
        return pulumi.get(self, "user_member_of_attribute")

    @property
    @pulumi.getter(name="userObjectClass")
    def user_object_class(self) -> pulumi.Output[Optional[str]]:
        """
        LDAP class for user objects
        """
        return pulumi.get(self, "user_object_class")

    @property
    @pulumi.getter(name="userPasswordAttribute")
    def user_password_attribute(self) -> pulumi.Output[Optional[str]]:
        """
        If this field is blank the user will be authenticated against a bind with the LDAP server
        """
        return pulumi.get(self, "user_password_attribute")

    @property
    @pulumi.getter(name="userRealNameAttribute")
    def user_real_name_attribute(self) -> pulumi.Output[Optional[str]]:
        """
        This is used to find a real name given the user ID
        """
        return pulumi.get(self, "user_real_name_attribute")

    @property
    @pulumi.getter(name="userSubtree")
    def user_subtree(self) -> pulumi.Output[Optional[bool]]:
        """
        Are users located in structures below the user base DN?
        """
        return pulumi.get(self, "user_subtree")

