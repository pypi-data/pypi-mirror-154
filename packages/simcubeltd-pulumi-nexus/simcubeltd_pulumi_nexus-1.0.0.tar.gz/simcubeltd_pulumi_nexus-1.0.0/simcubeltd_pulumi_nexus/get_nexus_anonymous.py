# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNexusAnonymousResult',
    'AwaitableGetNexusAnonymousResult',
    'get_nexus_anonymous',
]

@pulumi.output_type
class GetNexusAnonymousResult:
    """
    A collection of values returned by GetNexusAnonymous.
    """
    def __init__(__self__, enabled=None, id=None, realm_name=None, user_id=None):
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if realm_name and not isinstance(realm_name, str):
            raise TypeError("Expected argument 'realm_name' to be a str")
        pulumi.set(__self__, "realm_name", realm_name)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> str:
        return pulumi.get(self, "realm_name")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")


class AwaitableGetNexusAnonymousResult(GetNexusAnonymousResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNexusAnonymousResult(
            enabled=self.enabled,
            id=self.id,
            realm_name=self.realm_name,
            user_id=self.user_id)


def get_nexus_anonymous(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNexusAnonymousResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nexus:index/getNexusAnonymous:GetNexusAnonymous', __args__, opts=opts, typ=GetNexusAnonymousResult).value

    return AwaitableGetNexusAnonymousResult(
        enabled=__ret__.enabled,
        id=__ret__.id,
        realm_name=__ret__.realm_name,
        user_id=__ret__.user_id)
