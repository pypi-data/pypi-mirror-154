# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NexusRepositoryAptProxyArgs', 'NexusRepositoryAptProxy']

@pulumi.input_type
class NexusRepositoryAptProxyArgs:
    def __init__(__self__, *,
                 distribution: pulumi.Input[str],
                 flat: pulumi.Input[bool],
                 proxy: pulumi.Input['NexusRepositoryAptProxyProxyArgs'],
                 storage: pulumi.Input['NexusRepositoryAptProxyStorageArgs'],
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptProxyCleanupArgs']]]] = None,
                 http_client: Optional[pulumi.Input['NexusRepositoryAptProxyHttpClientArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_cache: Optional[pulumi.Input['NexusRepositoryAptProxyNegativeCacheArgs']] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 routing_rule: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NexusRepositoryAptProxy resource.
        :param pulumi.Input[str] distribution: Distribution to fetch
        :param pulumi.Input[bool] flat: Distribution to fetch
        :param pulumi.Input['NexusRepositoryAptProxyProxyArgs'] proxy: Configuration for the proxy repository
        :param pulumi.Input['NexusRepositoryAptProxyStorageArgs'] storage: The storage configuration of the repository
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptProxyCleanupArgs']]] cleanups: Cleanup policies
        :param pulumi.Input['NexusRepositoryAptProxyHttpClientArgs'] http_client: HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input['NexusRepositoryAptProxyNegativeCacheArgs'] negative_cache: Configuration of the negative cache handling
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input[str] routing_rule: The name of the routing rule assigned to this repository
        """
        pulumi.set(__self__, "distribution", distribution)
        pulumi.set(__self__, "flat", flat)
        pulumi.set(__self__, "proxy", proxy)
        pulumi.set(__self__, "storage", storage)
        if cleanups is not None:
            pulumi.set(__self__, "cleanups", cleanups)
        if http_client is not None:
            pulumi.set(__self__, "http_client", http_client)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if negative_cache is not None:
            pulumi.set(__self__, "negative_cache", negative_cache)
        if online is not None:
            pulumi.set(__self__, "online", online)
        if routing_rule is not None:
            pulumi.set(__self__, "routing_rule", routing_rule)

    @property
    @pulumi.getter
    def distribution(self) -> pulumi.Input[str]:
        """
        Distribution to fetch
        """
        return pulumi.get(self, "distribution")

    @distribution.setter
    def distribution(self, value: pulumi.Input[str]):
        pulumi.set(self, "distribution", value)

    @property
    @pulumi.getter
    def flat(self) -> pulumi.Input[bool]:
        """
        Distribution to fetch
        """
        return pulumi.get(self, "flat")

    @flat.setter
    def flat(self, value: pulumi.Input[bool]):
        pulumi.set(self, "flat", value)

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Input['NexusRepositoryAptProxyProxyArgs']:
        """
        Configuration for the proxy repository
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: pulumi.Input['NexusRepositoryAptProxyProxyArgs']):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input['NexusRepositoryAptProxyStorageArgs']:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input['NexusRepositoryAptProxyStorageArgs']):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def cleanups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptProxyCleanupArgs']]]]:
        """
        Cleanup policies
        """
        return pulumi.get(self, "cleanups")

    @cleanups.setter
    def cleanups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptProxyCleanupArgs']]]]):
        pulumi.set(self, "cleanups", value)

    @property
    @pulumi.getter(name="httpClient")
    def http_client(self) -> Optional[pulumi.Input['NexusRepositoryAptProxyHttpClientArgs']]:
        """
        HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        """
        return pulumi.get(self, "http_client")

    @http_client.setter
    def http_client(self, value: Optional[pulumi.Input['NexusRepositoryAptProxyHttpClientArgs']]):
        pulumi.set(self, "http_client", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> Optional[pulumi.Input['NexusRepositoryAptProxyNegativeCacheArgs']]:
        """
        Configuration of the negative cache handling
        """
        return pulumi.get(self, "negative_cache")

    @negative_cache.setter
    def negative_cache(self, value: Optional[pulumi.Input['NexusRepositoryAptProxyNegativeCacheArgs']]):
        pulumi.set(self, "negative_cache", value)

    @property
    @pulumi.getter
    def online(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @online.setter
    def online(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "online", value)

    @property
    @pulumi.getter(name="routingRule")
    def routing_rule(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the routing rule assigned to this repository
        """
        return pulumi.get(self, "routing_rule")

    @routing_rule.setter
    def routing_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_rule", value)


@pulumi.input_type
class _NexusRepositoryAptProxyState:
    def __init__(__self__, *,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptProxyCleanupArgs']]]] = None,
                 distribution: Optional[pulumi.Input[str]] = None,
                 flat: Optional[pulumi.Input[bool]] = None,
                 http_client: Optional[pulumi.Input['NexusRepositoryAptProxyHttpClientArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_cache: Optional[pulumi.Input['NexusRepositoryAptProxyNegativeCacheArgs']] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input['NexusRepositoryAptProxyProxyArgs']] = None,
                 routing_rule: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input['NexusRepositoryAptProxyStorageArgs']] = None):
        """
        Input properties used for looking up and filtering NexusRepositoryAptProxy resources.
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptProxyCleanupArgs']]] cleanups: Cleanup policies
        :param pulumi.Input[str] distribution: Distribution to fetch
        :param pulumi.Input[bool] flat: Distribution to fetch
        :param pulumi.Input['NexusRepositoryAptProxyHttpClientArgs'] http_client: HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input['NexusRepositoryAptProxyNegativeCacheArgs'] negative_cache: Configuration of the negative cache handling
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input['NexusRepositoryAptProxyProxyArgs'] proxy: Configuration for the proxy repository
        :param pulumi.Input[str] routing_rule: The name of the routing rule assigned to this repository
        :param pulumi.Input['NexusRepositoryAptProxyStorageArgs'] storage: The storage configuration of the repository
        """
        if cleanups is not None:
            pulumi.set(__self__, "cleanups", cleanups)
        if distribution is not None:
            pulumi.set(__self__, "distribution", distribution)
        if flat is not None:
            pulumi.set(__self__, "flat", flat)
        if http_client is not None:
            pulumi.set(__self__, "http_client", http_client)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if negative_cache is not None:
            pulumi.set(__self__, "negative_cache", negative_cache)
        if online is not None:
            pulumi.set(__self__, "online", online)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if routing_rule is not None:
            pulumi.set(__self__, "routing_rule", routing_rule)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def cleanups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptProxyCleanupArgs']]]]:
        """
        Cleanup policies
        """
        return pulumi.get(self, "cleanups")

    @cleanups.setter
    def cleanups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptProxyCleanupArgs']]]]):
        pulumi.set(self, "cleanups", value)

    @property
    @pulumi.getter
    def distribution(self) -> Optional[pulumi.Input[str]]:
        """
        Distribution to fetch
        """
        return pulumi.get(self, "distribution")

    @distribution.setter
    def distribution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribution", value)

    @property
    @pulumi.getter
    def flat(self) -> Optional[pulumi.Input[bool]]:
        """
        Distribution to fetch
        """
        return pulumi.get(self, "flat")

    @flat.setter
    def flat(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flat", value)

    @property
    @pulumi.getter(name="httpClient")
    def http_client(self) -> Optional[pulumi.Input['NexusRepositoryAptProxyHttpClientArgs']]:
        """
        HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        """
        return pulumi.get(self, "http_client")

    @http_client.setter
    def http_client(self, value: Optional[pulumi.Input['NexusRepositoryAptProxyHttpClientArgs']]):
        pulumi.set(self, "http_client", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> Optional[pulumi.Input['NexusRepositoryAptProxyNegativeCacheArgs']]:
        """
        Configuration of the negative cache handling
        """
        return pulumi.get(self, "negative_cache")

    @negative_cache.setter
    def negative_cache(self, value: Optional[pulumi.Input['NexusRepositoryAptProxyNegativeCacheArgs']]):
        pulumi.set(self, "negative_cache", value)

    @property
    @pulumi.getter
    def online(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @online.setter
    def online(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "online", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['NexusRepositoryAptProxyProxyArgs']]:
        """
        Configuration for the proxy repository
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['NexusRepositoryAptProxyProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="routingRule")
    def routing_rule(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the routing rule assigned to this repository
        """
        return pulumi.get(self, "routing_rule")

    @routing_rule.setter
    def routing_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_rule", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['NexusRepositoryAptProxyStorageArgs']]:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['NexusRepositoryAptProxyStorageArgs']]):
        pulumi.set(self, "storage", value)


class NexusRepositoryAptProxy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyCleanupArgs']]]]] = None,
                 distribution: Optional[pulumi.Input[str]] = None,
                 flat: Optional[pulumi.Input[bool]] = None,
                 http_client: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyHttpClientArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_cache: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyNegativeCacheArgs']]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyProxyArgs']]] = None,
                 routing_rule: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyStorageArgs']]] = None,
                 __props__=None):
        """
        Create a NexusRepositoryAptProxy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyCleanupArgs']]]] cleanups: Cleanup policies
        :param pulumi.Input[str] distribution: Distribution to fetch
        :param pulumi.Input[bool] flat: Distribution to fetch
        :param pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyHttpClientArgs']] http_client: HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyNegativeCacheArgs']] negative_cache: Configuration of the negative cache handling
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyProxyArgs']] proxy: Configuration for the proxy repository
        :param pulumi.Input[str] routing_rule: The name of the routing rule assigned to this repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyStorageArgs']] storage: The storage configuration of the repository
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NexusRepositoryAptProxyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NexusRepositoryAptProxy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NexusRepositoryAptProxyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NexusRepositoryAptProxyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyCleanupArgs']]]]] = None,
                 distribution: Optional[pulumi.Input[str]] = None,
                 flat: Optional[pulumi.Input[bool]] = None,
                 http_client: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyHttpClientArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_cache: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyNegativeCacheArgs']]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyProxyArgs']]] = None,
                 routing_rule: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyStorageArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NexusRepositoryAptProxyArgs.__new__(NexusRepositoryAptProxyArgs)

            __props__.__dict__["cleanups"] = cleanups
            if distribution is None and not opts.urn:
                raise TypeError("Missing required property 'distribution'")
            __props__.__dict__["distribution"] = distribution
            if flat is None and not opts.urn:
                raise TypeError("Missing required property 'flat'")
            __props__.__dict__["flat"] = flat
            __props__.__dict__["http_client"] = http_client
            __props__.__dict__["name"] = name
            __props__.__dict__["negative_cache"] = negative_cache
            __props__.__dict__["online"] = online
            if proxy is None and not opts.urn:
                raise TypeError("Missing required property 'proxy'")
            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["routing_rule"] = routing_rule
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
        super(NexusRepositoryAptProxy, __self__).__init__(
            'nexus:index/nexusRepositoryAptProxy:NexusRepositoryAptProxy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyCleanupArgs']]]]] = None,
            distribution: Optional[pulumi.Input[str]] = None,
            flat: Optional[pulumi.Input[bool]] = None,
            http_client: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyHttpClientArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            negative_cache: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyNegativeCacheArgs']]] = None,
            online: Optional[pulumi.Input[bool]] = None,
            proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyProxyArgs']]] = None,
            routing_rule: Optional[pulumi.Input[str]] = None,
            storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyStorageArgs']]] = None) -> 'NexusRepositoryAptProxy':
        """
        Get an existing NexusRepositoryAptProxy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyCleanupArgs']]]] cleanups: Cleanup policies
        :param pulumi.Input[str] distribution: Distribution to fetch
        :param pulumi.Input[bool] flat: Distribution to fetch
        :param pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyHttpClientArgs']] http_client: HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyNegativeCacheArgs']] negative_cache: Configuration of the negative cache handling
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyProxyArgs']] proxy: Configuration for the proxy repository
        :param pulumi.Input[str] routing_rule: The name of the routing rule assigned to this repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryAptProxyStorageArgs']] storage: The storage configuration of the repository
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NexusRepositoryAptProxyState.__new__(_NexusRepositoryAptProxyState)

        __props__.__dict__["cleanups"] = cleanups
        __props__.__dict__["distribution"] = distribution
        __props__.__dict__["flat"] = flat
        __props__.__dict__["http_client"] = http_client
        __props__.__dict__["name"] = name
        __props__.__dict__["negative_cache"] = negative_cache
        __props__.__dict__["online"] = online
        __props__.__dict__["proxy"] = proxy
        __props__.__dict__["routing_rule"] = routing_rule
        __props__.__dict__["storage"] = storage
        return NexusRepositoryAptProxy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cleanups(self) -> pulumi.Output[Optional[Sequence['outputs.NexusRepositoryAptProxyCleanup']]]:
        """
        Cleanup policies
        """
        return pulumi.get(self, "cleanups")

    @property
    @pulumi.getter
    def distribution(self) -> pulumi.Output[str]:
        """
        Distribution to fetch
        """
        return pulumi.get(self, "distribution")

    @property
    @pulumi.getter
    def flat(self) -> pulumi.Output[bool]:
        """
        Distribution to fetch
        """
        return pulumi.get(self, "flat")

    @property
    @pulumi.getter(name="httpClient")
    def http_client(self) -> pulumi.Output[Optional['outputs.NexusRepositoryAptProxyHttpClient']]:
        """
        HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        """
        return pulumi.get(self, "http_client")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> pulumi.Output[Optional['outputs.NexusRepositoryAptProxyNegativeCache']]:
        """
        Configuration of the negative cache handling
        """
        return pulumi.get(self, "negative_cache")

    @property
    @pulumi.getter
    def online(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output['outputs.NexusRepositoryAptProxyProxy']:
        """
        Configuration for the proxy repository
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter(name="routingRule")
    def routing_rule(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the routing rule assigned to this repository
        """
        return pulumi.get(self, "routing_rule")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output['outputs.NexusRepositoryAptProxyStorage']:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

