# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NexusRepositoryYumProxyArgs', 'NexusRepositoryYumProxy']

@pulumi.input_type
class NexusRepositoryYumProxyArgs:
    def __init__(__self__, *,
                 proxy: pulumi.Input['NexusRepositoryYumProxyProxyArgs'],
                 storage: pulumi.Input['NexusRepositoryYumProxyStorageArgs'],
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumProxyCleanupArgs']]]] = None,
                 http_client: Optional[pulumi.Input['NexusRepositoryYumProxyHttpClientArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_cache: Optional[pulumi.Input['NexusRepositoryYumProxyNegativeCacheArgs']] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 routing_rule: Optional[pulumi.Input[str]] = None,
                 yum_signing: Optional[pulumi.Input['NexusRepositoryYumProxyYumSigningArgs']] = None):
        """
        The set of arguments for constructing a NexusRepositoryYumProxy resource.
        :param pulumi.Input['NexusRepositoryYumProxyProxyArgs'] proxy: Configuration for the proxy repository
        :param pulumi.Input['NexusRepositoryYumProxyStorageArgs'] storage: The storage configuration of the repository
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumProxyCleanupArgs']]] cleanups: Cleanup policies
        :param pulumi.Input['NexusRepositoryYumProxyHttpClientArgs'] http_client: HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input['NexusRepositoryYumProxyNegativeCacheArgs'] negative_cache: Configuration of the negative cache handling
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input[str] routing_rule: The name of the routing rule assigned to this repository
        :param pulumi.Input['NexusRepositoryYumProxyYumSigningArgs'] yum_signing: Contains signing data of repositores
        """
        pulumi.set(__self__, "proxy", proxy)
        pulumi.set(__self__, "storage", storage)
        if cleanups is not None:
            pulumi.set(__self__, "cleanups", cleanups)
        if http_client is not None:
            pulumi.set(__self__, "http_client", http_client)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if negative_cache is not None:
            pulumi.set(__self__, "negative_cache", negative_cache)
        if online is not None:
            pulumi.set(__self__, "online", online)
        if routing_rule is not None:
            pulumi.set(__self__, "routing_rule", routing_rule)
        if yum_signing is not None:
            pulumi.set(__self__, "yum_signing", yum_signing)

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Input['NexusRepositoryYumProxyProxyArgs']:
        """
        Configuration for the proxy repository
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: pulumi.Input['NexusRepositoryYumProxyProxyArgs']):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input['NexusRepositoryYumProxyStorageArgs']:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input['NexusRepositoryYumProxyStorageArgs']):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def cleanups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumProxyCleanupArgs']]]]:
        """
        Cleanup policies
        """
        return pulumi.get(self, "cleanups")

    @cleanups.setter
    def cleanups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumProxyCleanupArgs']]]]):
        pulumi.set(self, "cleanups", value)

    @property
    @pulumi.getter(name="httpClient")
    def http_client(self) -> Optional[pulumi.Input['NexusRepositoryYumProxyHttpClientArgs']]:
        """
        HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        """
        return pulumi.get(self, "http_client")

    @http_client.setter
    def http_client(self, value: Optional[pulumi.Input['NexusRepositoryYumProxyHttpClientArgs']]):
        pulumi.set(self, "http_client", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> Optional[pulumi.Input['NexusRepositoryYumProxyNegativeCacheArgs']]:
        """
        Configuration of the negative cache handling
        """
        return pulumi.get(self, "negative_cache")

    @negative_cache.setter
    def negative_cache(self, value: Optional[pulumi.Input['NexusRepositoryYumProxyNegativeCacheArgs']]):
        pulumi.set(self, "negative_cache", value)

    @property
    @pulumi.getter
    def online(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @online.setter
    def online(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "online", value)

    @property
    @pulumi.getter(name="routingRule")
    def routing_rule(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the routing rule assigned to this repository
        """
        return pulumi.get(self, "routing_rule")

    @routing_rule.setter
    def routing_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_rule", value)

    @property
    @pulumi.getter(name="yumSigning")
    def yum_signing(self) -> Optional[pulumi.Input['NexusRepositoryYumProxyYumSigningArgs']]:
        """
        Contains signing data of repositores
        """
        return pulumi.get(self, "yum_signing")

    @yum_signing.setter
    def yum_signing(self, value: Optional[pulumi.Input['NexusRepositoryYumProxyYumSigningArgs']]):
        pulumi.set(self, "yum_signing", value)


@pulumi.input_type
class _NexusRepositoryYumProxyState:
    def __init__(__self__, *,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumProxyCleanupArgs']]]] = None,
                 http_client: Optional[pulumi.Input['NexusRepositoryYumProxyHttpClientArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_cache: Optional[pulumi.Input['NexusRepositoryYumProxyNegativeCacheArgs']] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input['NexusRepositoryYumProxyProxyArgs']] = None,
                 routing_rule: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input['NexusRepositoryYumProxyStorageArgs']] = None,
                 yum_signing: Optional[pulumi.Input['NexusRepositoryYumProxyYumSigningArgs']] = None):
        """
        Input properties used for looking up and filtering NexusRepositoryYumProxy resources.
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumProxyCleanupArgs']]] cleanups: Cleanup policies
        :param pulumi.Input['NexusRepositoryYumProxyHttpClientArgs'] http_client: HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input['NexusRepositoryYumProxyNegativeCacheArgs'] negative_cache: Configuration of the negative cache handling
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input['NexusRepositoryYumProxyProxyArgs'] proxy: Configuration for the proxy repository
        :param pulumi.Input[str] routing_rule: The name of the routing rule assigned to this repository
        :param pulumi.Input['NexusRepositoryYumProxyStorageArgs'] storage: The storage configuration of the repository
        :param pulumi.Input['NexusRepositoryYumProxyYumSigningArgs'] yum_signing: Contains signing data of repositores
        """
        if cleanups is not None:
            pulumi.set(__self__, "cleanups", cleanups)
        if http_client is not None:
            pulumi.set(__self__, "http_client", http_client)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if negative_cache is not None:
            pulumi.set(__self__, "negative_cache", negative_cache)
        if online is not None:
            pulumi.set(__self__, "online", online)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if routing_rule is not None:
            pulumi.set(__self__, "routing_rule", routing_rule)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if yum_signing is not None:
            pulumi.set(__self__, "yum_signing", yum_signing)

    @property
    @pulumi.getter
    def cleanups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumProxyCleanupArgs']]]]:
        """
        Cleanup policies
        """
        return pulumi.get(self, "cleanups")

    @cleanups.setter
    def cleanups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumProxyCleanupArgs']]]]):
        pulumi.set(self, "cleanups", value)

    @property
    @pulumi.getter(name="httpClient")
    def http_client(self) -> Optional[pulumi.Input['NexusRepositoryYumProxyHttpClientArgs']]:
        """
        HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        """
        return pulumi.get(self, "http_client")

    @http_client.setter
    def http_client(self, value: Optional[pulumi.Input['NexusRepositoryYumProxyHttpClientArgs']]):
        pulumi.set(self, "http_client", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> Optional[pulumi.Input['NexusRepositoryYumProxyNegativeCacheArgs']]:
        """
        Configuration of the negative cache handling
        """
        return pulumi.get(self, "negative_cache")

    @negative_cache.setter
    def negative_cache(self, value: Optional[pulumi.Input['NexusRepositoryYumProxyNegativeCacheArgs']]):
        pulumi.set(self, "negative_cache", value)

    @property
    @pulumi.getter
    def online(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @online.setter
    def online(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "online", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['NexusRepositoryYumProxyProxyArgs']]:
        """
        Configuration for the proxy repository
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['NexusRepositoryYumProxyProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="routingRule")
    def routing_rule(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the routing rule assigned to this repository
        """
        return pulumi.get(self, "routing_rule")

    @routing_rule.setter
    def routing_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_rule", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['NexusRepositoryYumProxyStorageArgs']]:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['NexusRepositoryYumProxyStorageArgs']]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="yumSigning")
    def yum_signing(self) -> Optional[pulumi.Input['NexusRepositoryYumProxyYumSigningArgs']]:
        """
        Contains signing data of repositores
        """
        return pulumi.get(self, "yum_signing")

    @yum_signing.setter
    def yum_signing(self, value: Optional[pulumi.Input['NexusRepositoryYumProxyYumSigningArgs']]):
        pulumi.set(self, "yum_signing", value)


class NexusRepositoryYumProxy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyCleanupArgs']]]]] = None,
                 http_client: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyHttpClientArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_cache: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyNegativeCacheArgs']]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyProxyArgs']]] = None,
                 routing_rule: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyStorageArgs']]] = None,
                 yum_signing: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyYumSigningArgs']]] = None,
                 __props__=None):
        """
        Create a NexusRepositoryYumProxy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyCleanupArgs']]]] cleanups: Cleanup policies
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyHttpClientArgs']] http_client: HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyNegativeCacheArgs']] negative_cache: Configuration of the negative cache handling
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyProxyArgs']] proxy: Configuration for the proxy repository
        :param pulumi.Input[str] routing_rule: The name of the routing rule assigned to this repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyStorageArgs']] storage: The storage configuration of the repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyYumSigningArgs']] yum_signing: Contains signing data of repositores
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NexusRepositoryYumProxyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NexusRepositoryYumProxy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NexusRepositoryYumProxyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NexusRepositoryYumProxyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyCleanupArgs']]]]] = None,
                 http_client: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyHttpClientArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_cache: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyNegativeCacheArgs']]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyProxyArgs']]] = None,
                 routing_rule: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyStorageArgs']]] = None,
                 yum_signing: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyYumSigningArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NexusRepositoryYumProxyArgs.__new__(NexusRepositoryYumProxyArgs)

            __props__.__dict__["cleanups"] = cleanups
            __props__.__dict__["http_client"] = http_client
            __props__.__dict__["name"] = name
            __props__.__dict__["negative_cache"] = negative_cache
            __props__.__dict__["online"] = online
            if proxy is None and not opts.urn:
                raise TypeError("Missing required property 'proxy'")
            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["routing_rule"] = routing_rule
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
            __props__.__dict__["yum_signing"] = yum_signing
        super(NexusRepositoryYumProxy, __self__).__init__(
            'nexus:index/nexusRepositoryYumProxy:NexusRepositoryYumProxy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyCleanupArgs']]]]] = None,
            http_client: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyHttpClientArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            negative_cache: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyNegativeCacheArgs']]] = None,
            online: Optional[pulumi.Input[bool]] = None,
            proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyProxyArgs']]] = None,
            routing_rule: Optional[pulumi.Input[str]] = None,
            storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyStorageArgs']]] = None,
            yum_signing: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyYumSigningArgs']]] = None) -> 'NexusRepositoryYumProxy':
        """
        Get an existing NexusRepositoryYumProxy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyCleanupArgs']]]] cleanups: Cleanup policies
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyHttpClientArgs']] http_client: HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyNegativeCacheArgs']] negative_cache: Configuration of the negative cache handling
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyProxyArgs']] proxy: Configuration for the proxy repository
        :param pulumi.Input[str] routing_rule: The name of the routing rule assigned to this repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyStorageArgs']] storage: The storage configuration of the repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumProxyYumSigningArgs']] yum_signing: Contains signing data of repositores
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NexusRepositoryYumProxyState.__new__(_NexusRepositoryYumProxyState)

        __props__.__dict__["cleanups"] = cleanups
        __props__.__dict__["http_client"] = http_client
        __props__.__dict__["name"] = name
        __props__.__dict__["negative_cache"] = negative_cache
        __props__.__dict__["online"] = online
        __props__.__dict__["proxy"] = proxy
        __props__.__dict__["routing_rule"] = routing_rule
        __props__.__dict__["storage"] = storage
        __props__.__dict__["yum_signing"] = yum_signing
        return NexusRepositoryYumProxy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cleanups(self) -> pulumi.Output[Optional[Sequence['outputs.NexusRepositoryYumProxyCleanup']]]:
        """
        Cleanup policies
        """
        return pulumi.get(self, "cleanups")

    @property
    @pulumi.getter(name="httpClient")
    def http_client(self) -> pulumi.Output[Optional['outputs.NexusRepositoryYumProxyHttpClient']]:
        """
        HTTP Client configuration for proxy repositories. Required for docker proxy repositories
        """
        return pulumi.get(self, "http_client")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> pulumi.Output[Optional['outputs.NexusRepositoryYumProxyNegativeCache']]:
        """
        Configuration of the negative cache handling
        """
        return pulumi.get(self, "negative_cache")

    @property
    @pulumi.getter
    def online(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output['outputs.NexusRepositoryYumProxyProxy']:
        """
        Configuration for the proxy repository
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter(name="routingRule")
    def routing_rule(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the routing rule assigned to this repository
        """
        return pulumi.get(self, "routing_rule")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output['outputs.NexusRepositoryYumProxyStorage']:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="yumSigning")
    def yum_signing(self) -> pulumi.Output[Optional['outputs.NexusRepositoryYumProxyYumSigning']]:
        """
        Contains signing data of repositores
        """
        return pulumi.get(self, "yum_signing")

