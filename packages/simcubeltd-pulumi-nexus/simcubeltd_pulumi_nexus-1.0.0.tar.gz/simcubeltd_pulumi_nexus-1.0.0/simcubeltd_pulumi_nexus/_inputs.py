# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNexusBlobstoreBucketConfigurationArgs',
    'GetNexusBlobstoreBucketConfigurationAdvancedBucketConnectionArgs',
    'GetNexusBlobstoreBucketConfigurationBucketArgs',
    'GetNexusBlobstoreBucketConfigurationBucketSecurityArgs',
    'GetNexusBlobstoreBucketConfigurationEncryptionArgs',
    'GetNexusBlobstoreSoftQuotaArgs',
    'GetNexusRepositoryAptArgs',
    'GetNexusRepositoryAptSigningArgs',
    'GetNexusRepositoryCleanupArgs',
    'GetNexusRepositoryDockerArgs',
    'GetNexusRepositoryGroupArgs',
    'GetNexusRepositoryHttpClientArgs',
    'GetNexusRepositoryHttpClientAuthenticationArgs',
    'GetNexusRepositoryHttpClientConnectionArgs',
    'GetNexusRepositoryMavenArgs',
    'GetNexusRepositoryNegativeCacheArgs',
    'GetNexusRepositoryProxyArgs',
    'GetNexusRepositoryStorageArgs',
    'NexusBlobstoreAzureBucketConfigurationArgs',
    'NexusBlobstoreAzureBucketConfigurationAuthenticationArgs',
    'NexusBlobstoreAzureSoftQuotaArgs',
    'NexusBlobstoreBucketConfigurationArgs',
    'NexusBlobstoreBucketConfigurationAdvancedBucketConnectionArgs',
    'NexusBlobstoreBucketConfigurationBucketArgs',
    'NexusBlobstoreBucketConfigurationBucketSecurityArgs',
    'NexusBlobstoreBucketConfigurationEncryptionArgs',
    'NexusBlobstoreFileSoftQuotaArgs',
    'NexusBlobstoreGroupSoftQuotaArgs',
    'NexusBlobstoreS3BucketConfigurationArgs',
    'NexusBlobstoreS3BucketConfigurationAdvancedBucketConnectionArgs',
    'NexusBlobstoreS3BucketConfigurationBucketArgs',
    'NexusBlobstoreS3BucketConfigurationBucketSecurityArgs',
    'NexusBlobstoreS3BucketConfigurationEncryptionArgs',
    'NexusBlobstoreS3SoftQuotaArgs',
    'NexusBlobstoreSoftQuotaArgs',
    'NexusRepositoryAptArgs',
    'NexusRepositoryAptHostedCleanupArgs',
    'NexusRepositoryAptHostedComponentArgs',
    'NexusRepositoryAptHostedSigningArgs',
    'NexusRepositoryAptHostedStorageArgs',
    'NexusRepositoryAptProxyCleanupArgs',
    'NexusRepositoryAptProxyHttpClientArgs',
    'NexusRepositoryAptProxyHttpClientAuthenticationArgs',
    'NexusRepositoryAptProxyHttpClientConnectionArgs',
    'NexusRepositoryAptProxyNegativeCacheArgs',
    'NexusRepositoryAptProxyProxyArgs',
    'NexusRepositoryAptProxyStorageArgs',
    'NexusRepositoryAptSigningArgs',
    'NexusRepositoryBowerArgs',
    'NexusRepositoryCleanupArgs',
    'NexusRepositoryDockerArgs',
    'NexusRepositoryDockerGroupDockerArgs',
    'NexusRepositoryDockerGroupGroupArgs',
    'NexusRepositoryDockerGroupStorageArgs',
    'NexusRepositoryDockerHostedCleanupArgs',
    'NexusRepositoryDockerHostedComponentArgs',
    'NexusRepositoryDockerHostedDockerArgs',
    'NexusRepositoryDockerHostedStorageArgs',
    'NexusRepositoryDockerProxyArgs',
    'NexusRepositoryDockerProxyCleanupArgs',
    'NexusRepositoryDockerProxyDockerArgs',
    'NexusRepositoryDockerProxyDockerProxyArgs',
    'NexusRepositoryDockerProxyHttpClientArgs',
    'NexusRepositoryDockerProxyHttpClientAuthenticationArgs',
    'NexusRepositoryDockerProxyHttpClientConnectionArgs',
    'NexusRepositoryDockerProxyNegativeCacheArgs',
    'NexusRepositoryDockerProxyProxyArgs',
    'NexusRepositoryDockerProxyStorageArgs',
    'NexusRepositoryGroupArgs',
    'NexusRepositoryHttpClientArgs',
    'NexusRepositoryHttpClientAuthenticationArgs',
    'NexusRepositoryHttpClientConnectionArgs',
    'NexusRepositoryMavenArgs',
    'NexusRepositoryMavenHostedCleanupArgs',
    'NexusRepositoryMavenHostedComponentArgs',
    'NexusRepositoryMavenHostedMavenArgs',
    'NexusRepositoryMavenHostedStorageArgs',
    'NexusRepositoryNegativeCacheArgs',
    'NexusRepositoryNugetProxyArgs',
    'NexusRepositoryProxyArgs',
    'NexusRepositoryStorageArgs',
    'NexusRepositoryYumArgs',
    'NexusRepositoryYumGroupGroupArgs',
    'NexusRepositoryYumGroupStorageArgs',
    'NexusRepositoryYumGroupYumSigningArgs',
    'NexusRepositoryYumHostedCleanupArgs',
    'NexusRepositoryYumHostedComponentArgs',
    'NexusRepositoryYumHostedStorageArgs',
    'NexusRepositoryYumProxyCleanupArgs',
    'NexusRepositoryYumProxyHttpClientArgs',
    'NexusRepositoryYumProxyHttpClientAuthenticationArgs',
    'NexusRepositoryYumProxyHttpClientConnectionArgs',
    'NexusRepositoryYumProxyNegativeCacheArgs',
    'NexusRepositoryYumProxyProxyArgs',
    'NexusRepositoryYumProxyStorageArgs',
    'NexusRepositoryYumProxyYumSigningArgs',
]

@pulumi.input_type
class GetNexusBlobstoreBucketConfigurationArgs:
    def __init__(__self__, *,
                 bucket: 'GetNexusBlobstoreBucketConfigurationBucketArgs',
                 bucket_security: 'GetNexusBlobstoreBucketConfigurationBucketSecurityArgs',
                 advanced_bucket_connection: Optional['GetNexusBlobstoreBucketConfigurationAdvancedBucketConnectionArgs'] = None,
                 encryption: Optional['GetNexusBlobstoreBucketConfigurationEncryptionArgs'] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "bucket_security", bucket_security)
        if advanced_bucket_connection is not None:
            pulumi.set(__self__, "advanced_bucket_connection", advanced_bucket_connection)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)

    @property
    @pulumi.getter
    def bucket(self) -> 'GetNexusBlobstoreBucketConfigurationBucketArgs':
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: 'GetNexusBlobstoreBucketConfigurationBucketArgs'):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="bucketSecurity")
    def bucket_security(self) -> 'GetNexusBlobstoreBucketConfigurationBucketSecurityArgs':
        return pulumi.get(self, "bucket_security")

    @bucket_security.setter
    def bucket_security(self, value: 'GetNexusBlobstoreBucketConfigurationBucketSecurityArgs'):
        pulumi.set(self, "bucket_security", value)

    @property
    @pulumi.getter(name="advancedBucketConnection")
    def advanced_bucket_connection(self) -> Optional['GetNexusBlobstoreBucketConfigurationAdvancedBucketConnectionArgs']:
        return pulumi.get(self, "advanced_bucket_connection")

    @advanced_bucket_connection.setter
    def advanced_bucket_connection(self, value: Optional['GetNexusBlobstoreBucketConfigurationAdvancedBucketConnectionArgs']):
        pulumi.set(self, "advanced_bucket_connection", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional['GetNexusBlobstoreBucketConfigurationEncryptionArgs']:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional['GetNexusBlobstoreBucketConfigurationEncryptionArgs']):
        pulumi.set(self, "encryption", value)


@pulumi.input_type
class GetNexusBlobstoreBucketConfigurationAdvancedBucketConnectionArgs:
    def __init__(__self__, *,
                 endpoint: Optional[str] = None,
                 force_path_style: Optional[bool] = None,
                 signer_type: Optional[str] = None):
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if force_path_style is not None:
            pulumi.set(__self__, "force_path_style", force_path_style)
        if signer_type is not None:
            pulumi.set(__self__, "signer_type", signer_type)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="forcePathStyle")
    def force_path_style(self) -> Optional[bool]:
        return pulumi.get(self, "force_path_style")

    @force_path_style.setter
    def force_path_style(self, value: Optional[bool]):
        pulumi.set(self, "force_path_style", value)

    @property
    @pulumi.getter(name="signerType")
    def signer_type(self) -> Optional[str]:
        return pulumi.get(self, "signer_type")

    @signer_type.setter
    def signer_type(self, value: Optional[str]):
        pulumi.set(self, "signer_type", value)


@pulumi.input_type
class GetNexusBlobstoreBucketConfigurationBucketArgs:
    def __init__(__self__, *,
                 name: str,
                 region: str,
                 expiration: Optional[int] = None,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: str):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[int]:
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[int]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[str]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class GetNexusBlobstoreBucketConfigurationBucketSecurityArgs:
    def __init__(__self__, *,
                 access_key_id: str,
                 secret_access_key: str,
                 role: Optional[str] = None,
                 session_token: Optional[str] = None):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if session_token is not None:
            pulumi.set(__self__, "session_token", session_token)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: str):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: str):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[str]:
        return pulumi.get(self, "session_token")

    @session_token.setter
    def session_token(self, value: Optional[str]):
        pulumi.set(self, "session_token", value)


@pulumi.input_type
class GetNexusBlobstoreBucketConfigurationEncryptionArgs:
    def __init__(__self__, *,
                 encryption_key: Optional[str] = None,
                 encryption_type: Optional[str] = None):
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[str]:
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[str]):
        pulumi.set(self, "encryption_key", value)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[str]):
        pulumi.set(self, "encryption_type", value)


@pulumi.input_type
class GetNexusBlobstoreSoftQuotaArgs:
    def __init__(__self__, *,
                 limit: Optional[int] = None,
                 type: Optional[str] = None):
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GetNexusRepositoryAptArgs:
    def __init__(__self__, *,
                 distribution: str):
        pulumi.set(__self__, "distribution", distribution)

    @property
    @pulumi.getter
    def distribution(self) -> str:
        return pulumi.get(self, "distribution")

    @distribution.setter
    def distribution(self, value: str):
        pulumi.set(self, "distribution", value)


@pulumi.input_type
class GetNexusRepositoryAptSigningArgs:
    def __init__(__self__, *,
                 keypair: str,
                 passphrase: str):
        pulumi.set(__self__, "keypair", keypair)
        pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def keypair(self) -> str:
        return pulumi.get(self, "keypair")

    @keypair.setter
    def keypair(self, value: str):
        pulumi.set(self, "keypair", value)

    @property
    @pulumi.getter
    def passphrase(self) -> str:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: str):
        pulumi.set(self, "passphrase", value)


@pulumi.input_type
class GetNexusRepositoryCleanupArgs:
    def __init__(__self__, *,
                 policy_names: Sequence[str]):
        pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[str]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Sequence[str]):
        pulumi.set(self, "policy_names", value)


@pulumi.input_type
class GetNexusRepositoryDockerArgs:
    def __init__(__self__, *,
                 force_basic_auth: Optional[bool] = None,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None,
                 v1enabled: Optional[bool] = None):
        if force_basic_auth is not None:
            pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if v1enabled is not None:
            pulumi.set(__self__, "v1enabled", v1enabled)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> Optional[bool]:
        return pulumi.get(self, "force_basic_auth")

    @force_basic_auth.setter
    def force_basic_auth(self, value: Optional[bool]):
        pulumi.set(self, "force_basic_auth", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[int]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[int]):
        pulumi.set(self, "https_port", value)

    @property
    @pulumi.getter
    def v1enabled(self) -> Optional[bool]:
        return pulumi.get(self, "v1enabled")

    @v1enabled.setter
    def v1enabled(self, value: Optional[bool]):
        pulumi.set(self, "v1enabled", value)


@pulumi.input_type
class GetNexusRepositoryGroupArgs:
    def __init__(__self__, *,
                 member_names: Sequence[str]):
        pulumi.set(__self__, "member_names", member_names)

    @property
    @pulumi.getter(name="memberNames")
    def member_names(self) -> Sequence[str]:
        return pulumi.get(self, "member_names")

    @member_names.setter
    def member_names(self, value: Sequence[str]):
        pulumi.set(self, "member_names", value)


@pulumi.input_type
class GetNexusRepositoryHttpClientArgs:
    def __init__(__self__, *,
                 authentication: Optional['GetNexusRepositoryHttpClientAuthenticationArgs'] = None,
                 auto_block: Optional[bool] = None,
                 blocked: Optional[bool] = None,
                 connections: Optional[Sequence['GetNexusRepositoryHttpClientConnectionArgs']] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if auto_block is not None:
            pulumi.set(__self__, "auto_block", auto_block)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if connections is not None:
            pulumi.set(__self__, "connections", connections)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['GetNexusRepositoryHttpClientAuthenticationArgs']:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional['GetNexusRepositoryHttpClientAuthenticationArgs']):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> Optional[bool]:
        return pulumi.get(self, "auto_block")

    @auto_block.setter
    def auto_block(self, value: Optional[bool]):
        pulumi.set(self, "auto_block", value)

    @property
    @pulumi.getter
    def blocked(self) -> Optional[bool]:
        return pulumi.get(self, "blocked")

    @blocked.setter
    def blocked(self, value: Optional[bool]):
        pulumi.set(self, "blocked", value)

    @property
    @pulumi.getter
    def connections(self) -> Optional[Sequence['GetNexusRepositoryHttpClientConnectionArgs']]:
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[Sequence['GetNexusRepositoryHttpClientConnectionArgs']]):
        pulumi.set(self, "connections", value)


@pulumi.input_type
class GetNexusRepositoryHttpClientAuthenticationArgs:
    def __init__(__self__, *,
                 type: str,
                 ntlm_domain: Optional[str] = None,
                 ntlm_host: Optional[str] = None,
                 username: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if ntlm_domain is not None:
            pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        if ntlm_host is not None:
            pulumi.set(__self__, "ntlm_host", ntlm_host)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> Optional[str]:
        return pulumi.get(self, "ntlm_domain")

    @ntlm_domain.setter
    def ntlm_domain(self, value: Optional[str]):
        pulumi.set(self, "ntlm_domain", value)

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> Optional[str]:
        return pulumi.get(self, "ntlm_host")

    @ntlm_host.setter
    def ntlm_host(self, value: Optional[str]):
        pulumi.set(self, "ntlm_host", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GetNexusRepositoryHttpClientConnectionArgs:
    def __init__(__self__, *,
                 retries: Optional[int] = None,
                 timeout: Optional[int] = None):
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def retries(self) -> Optional[int]:
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[int]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[int]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class GetNexusRepositoryMavenArgs:
    def __init__(__self__, *,
                 layout_policy: Optional[str] = None,
                 version_policy: Optional[str] = None):
        if layout_policy is not None:
            pulumi.set(__self__, "layout_policy", layout_policy)
        if version_policy is not None:
            pulumi.set(__self__, "version_policy", version_policy)

    @property
    @pulumi.getter(name="layoutPolicy")
    def layout_policy(self) -> Optional[str]:
        return pulumi.get(self, "layout_policy")

    @layout_policy.setter
    def layout_policy(self, value: Optional[str]):
        pulumi.set(self, "layout_policy", value)

    @property
    @pulumi.getter(name="versionPolicy")
    def version_policy(self) -> Optional[str]:
        return pulumi.get(self, "version_policy")

    @version_policy.setter
    def version_policy(self, value: Optional[str]):
        pulumi.set(self, "version_policy", value)


@pulumi.input_type
class GetNexusRepositoryNegativeCacheArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ttl: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[int]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class GetNexusRepositoryProxyArgs:
    def __init__(__self__, *,
                 remote_url: str,
                 content_max_age: Optional[int] = None,
                 metadata_max_age: Optional[int] = None):
        pulumi.set(__self__, "remote_url", remote_url)
        if content_max_age is not None:
            pulumi.set(__self__, "content_max_age", content_max_age)
        if metadata_max_age is not None:
            pulumi.set(__self__, "metadata_max_age", metadata_max_age)

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> str:
        return pulumi.get(self, "remote_url")

    @remote_url.setter
    def remote_url(self, value: str):
        pulumi.set(self, "remote_url", value)

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> Optional[int]:
        return pulumi.get(self, "content_max_age")

    @content_max_age.setter
    def content_max_age(self, value: Optional[int]):
        pulumi.set(self, "content_max_age", value)

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> Optional[int]:
        return pulumi.get(self, "metadata_max_age")

    @metadata_max_age.setter
    def metadata_max_age(self, value: Optional[int]):
        pulumi.set(self, "metadata_max_age", value)


@pulumi.input_type
class GetNexusRepositoryStorageArgs:
    def __init__(__self__, *,
                 blob_store_name: Optional[str] = None,
                 strict_content_type_validation: Optional[bool] = None,
                 write_policy: Optional[str] = None):
        if blob_store_name is not None:
            pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        if write_policy is not None:
            pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> Optional[str]:
        return pulumi.get(self, "blob_store_name")

    @blob_store_name.setter
    def blob_store_name(self, value: Optional[str]):
        pulumi.set(self, "blob_store_name", value)

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[bool]:
        return pulumi.get(self, "strict_content_type_validation")

    @strict_content_type_validation.setter
    def strict_content_type_validation(self, value: Optional[bool]):
        pulumi.set(self, "strict_content_type_validation", value)

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> Optional[str]:
        return pulumi.get(self, "write_policy")

    @write_policy.setter
    def write_policy(self, value: Optional[str]):
        pulumi.set(self, "write_policy", value)


@pulumi.input_type
class NexusBlobstoreAzureBucketConfigurationArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 authentication: pulumi.Input['NexusBlobstoreAzureBucketConfigurationAuthenticationArgs'],
                 container_name: pulumi.Input[str]):
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "container_name", container_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Input['NexusBlobstoreAzureBucketConfigurationAuthenticationArgs']:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: pulumi.Input['NexusBlobstoreAzureBucketConfigurationAuthenticationArgs']):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_name", value)


@pulumi.input_type
class NexusBlobstoreAzureBucketConfigurationAuthenticationArgs:
    def __init__(__self__, *,
                 authentication_method: pulumi.Input[str],
                 account_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "authentication_method", authentication_method)
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authentication_method")

    @authentication_method.setter
    def authentication_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "authentication_method", value)

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_key")

    @account_key.setter
    def account_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_key", value)


@pulumi.input_type
class NexusBlobstoreAzureSoftQuotaArgs:
    def __init__(__self__, *,
                 limit: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NexusBlobstoreBucketConfigurationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input['NexusBlobstoreBucketConfigurationBucketArgs'],
                 advanced_bucket_connection: Optional[pulumi.Input['NexusBlobstoreBucketConfigurationAdvancedBucketConnectionArgs']] = None,
                 bucket_security: Optional[pulumi.Input['NexusBlobstoreBucketConfigurationBucketSecurityArgs']] = None,
                 encryption: Optional[pulumi.Input['NexusBlobstoreBucketConfigurationEncryptionArgs']] = None):
        pulumi.set(__self__, "bucket", bucket)
        if advanced_bucket_connection is not None:
            pulumi.set(__self__, "advanced_bucket_connection", advanced_bucket_connection)
        if bucket_security is not None:
            pulumi.set(__self__, "bucket_security", bucket_security)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input['NexusBlobstoreBucketConfigurationBucketArgs']:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input['NexusBlobstoreBucketConfigurationBucketArgs']):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="advancedBucketConnection")
    def advanced_bucket_connection(self) -> Optional[pulumi.Input['NexusBlobstoreBucketConfigurationAdvancedBucketConnectionArgs']]:
        return pulumi.get(self, "advanced_bucket_connection")

    @advanced_bucket_connection.setter
    def advanced_bucket_connection(self, value: Optional[pulumi.Input['NexusBlobstoreBucketConfigurationAdvancedBucketConnectionArgs']]):
        pulumi.set(self, "advanced_bucket_connection", value)

    @property
    @pulumi.getter(name="bucketSecurity")
    def bucket_security(self) -> Optional[pulumi.Input['NexusBlobstoreBucketConfigurationBucketSecurityArgs']]:
        return pulumi.get(self, "bucket_security")

    @bucket_security.setter
    def bucket_security(self, value: Optional[pulumi.Input['NexusBlobstoreBucketConfigurationBucketSecurityArgs']]):
        pulumi.set(self, "bucket_security", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['NexusBlobstoreBucketConfigurationEncryptionArgs']]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['NexusBlobstoreBucketConfigurationEncryptionArgs']]):
        pulumi.set(self, "encryption", value)


@pulumi.input_type
class NexusBlobstoreBucketConfigurationAdvancedBucketConnectionArgs:
    def __init__(__self__, *,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 force_path_style: Optional[pulumi.Input[bool]] = None,
                 signer_type: Optional[pulumi.Input[str]] = None):
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if force_path_style is not None:
            pulumi.set(__self__, "force_path_style", force_path_style)
        if signer_type is not None:
            pulumi.set(__self__, "signer_type", signer_type)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="forcePathStyle")
    def force_path_style(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_path_style")

    @force_path_style.setter
    def force_path_style(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_path_style", value)

    @property
    @pulumi.getter(name="signerType")
    def signer_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signer_type")

    @signer_type.setter
    def signer_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signer_type", value)


@pulumi.input_type
class NexusBlobstoreBucketConfigurationBucketArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 expiration: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class NexusBlobstoreBucketConfigurationBucketSecurityArgs:
    def __init__(__self__, *,
                 access_key_id: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str],
                 role: Optional[pulumi.Input[str]] = None,
                 session_token: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if session_token is not None:
            pulumi.set(__self__, "session_token", session_token)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_token")

    @session_token.setter
    def session_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_token", value)


@pulumi.input_type
class NexusBlobstoreBucketConfigurationEncryptionArgs:
    def __init__(__self__, *,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 encryption_type: Optional[pulumi.Input[str]] = None):
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_key", value)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_type", value)


@pulumi.input_type
class NexusBlobstoreFileSoftQuotaArgs:
    def __init__(__self__, *,
                 limit: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NexusBlobstoreGroupSoftQuotaArgs:
    def __init__(__self__, *,
                 limit: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NexusBlobstoreS3BucketConfigurationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input['NexusBlobstoreS3BucketConfigurationBucketArgs'],
                 advanced_bucket_connection: Optional[pulumi.Input['NexusBlobstoreS3BucketConfigurationAdvancedBucketConnectionArgs']] = None,
                 bucket_security: Optional[pulumi.Input['NexusBlobstoreS3BucketConfigurationBucketSecurityArgs']] = None,
                 encryption: Optional[pulumi.Input['NexusBlobstoreS3BucketConfigurationEncryptionArgs']] = None):
        pulumi.set(__self__, "bucket", bucket)
        if advanced_bucket_connection is not None:
            pulumi.set(__self__, "advanced_bucket_connection", advanced_bucket_connection)
        if bucket_security is not None:
            pulumi.set(__self__, "bucket_security", bucket_security)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input['NexusBlobstoreS3BucketConfigurationBucketArgs']:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input['NexusBlobstoreS3BucketConfigurationBucketArgs']):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="advancedBucketConnection")
    def advanced_bucket_connection(self) -> Optional[pulumi.Input['NexusBlobstoreS3BucketConfigurationAdvancedBucketConnectionArgs']]:
        return pulumi.get(self, "advanced_bucket_connection")

    @advanced_bucket_connection.setter
    def advanced_bucket_connection(self, value: Optional[pulumi.Input['NexusBlobstoreS3BucketConfigurationAdvancedBucketConnectionArgs']]):
        pulumi.set(self, "advanced_bucket_connection", value)

    @property
    @pulumi.getter(name="bucketSecurity")
    def bucket_security(self) -> Optional[pulumi.Input['NexusBlobstoreS3BucketConfigurationBucketSecurityArgs']]:
        return pulumi.get(self, "bucket_security")

    @bucket_security.setter
    def bucket_security(self, value: Optional[pulumi.Input['NexusBlobstoreS3BucketConfigurationBucketSecurityArgs']]):
        pulumi.set(self, "bucket_security", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['NexusBlobstoreS3BucketConfigurationEncryptionArgs']]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['NexusBlobstoreS3BucketConfigurationEncryptionArgs']]):
        pulumi.set(self, "encryption", value)


@pulumi.input_type
class NexusBlobstoreS3BucketConfigurationAdvancedBucketConnectionArgs:
    def __init__(__self__, *,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 force_path_style: Optional[pulumi.Input[bool]] = None,
                 max_connection_pool_size: Optional[pulumi.Input[int]] = None,
                 signer_type: Optional[pulumi.Input[str]] = None):
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if force_path_style is not None:
            pulumi.set(__self__, "force_path_style", force_path_style)
        if max_connection_pool_size is not None:
            pulumi.set(__self__, "max_connection_pool_size", max_connection_pool_size)
        if signer_type is not None:
            pulumi.set(__self__, "signer_type", signer_type)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="forcePathStyle")
    def force_path_style(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_path_style")

    @force_path_style.setter
    def force_path_style(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_path_style", value)

    @property
    @pulumi.getter(name="maxConnectionPoolSize")
    def max_connection_pool_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_connection_pool_size")

    @max_connection_pool_size.setter
    def max_connection_pool_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connection_pool_size", value)

    @property
    @pulumi.getter(name="signerType")
    def signer_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signer_type")

    @signer_type.setter
    def signer_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signer_type", value)


@pulumi.input_type
class NexusBlobstoreS3BucketConfigurationBucketArgs:
    def __init__(__self__, *,
                 expiration: pulumi.Input[int],
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expiration", expiration)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def expiration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: pulumi.Input[int]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class NexusBlobstoreS3BucketConfigurationBucketSecurityArgs:
    def __init__(__self__, *,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 session_token: Optional[pulumi.Input[str]] = None):
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if session_token is not None:
            pulumi.set(__self__, "session_token", session_token)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_token")

    @session_token.setter
    def session_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_token", value)


@pulumi.input_type
class NexusBlobstoreS3BucketConfigurationEncryptionArgs:
    def __init__(__self__, *,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 encryption_type: Optional[pulumi.Input[str]] = None):
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_key", value)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_type", value)


@pulumi.input_type
class NexusBlobstoreS3SoftQuotaArgs:
    def __init__(__self__, *,
                 limit: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NexusBlobstoreSoftQuotaArgs:
    def __init__(__self__, *,
                 limit: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NexusRepositoryAptArgs:
    def __init__(__self__, *,
                 distribution: pulumi.Input[str],
                 flat: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "distribution", distribution)
        if flat is not None:
            pulumi.set(__self__, "flat", flat)

    @property
    @pulumi.getter
    def distribution(self) -> pulumi.Input[str]:
        return pulumi.get(self, "distribution")

    @distribution.setter
    def distribution(self, value: pulumi.Input[str]):
        pulumi.set(self, "distribution", value)

    @property
    @pulumi.getter
    def flat(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flat")

    @flat.setter
    def flat(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flat", value)


@pulumi.input_type
class NexusRepositoryAptHostedCleanupArgs:
    def __init__(__self__, *,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)


@pulumi.input_type
class NexusRepositoryAptHostedComponentArgs:
    def __init__(__self__, *,
                 proprietary_components: pulumi.Input[bool]):
        pulumi.set(__self__, "proprietary_components", proprietary_components)

    @property
    @pulumi.getter(name="proprietaryComponents")
    def proprietary_components(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "proprietary_components")

    @proprietary_components.setter
    def proprietary_components(self, value: pulumi.Input[bool]):
        pulumi.set(self, "proprietary_components", value)


@pulumi.input_type
class NexusRepositoryAptHostedSigningArgs:
    def __init__(__self__, *,
                 keypair: pulumi.Input[str],
                 passphrase: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "keypair", keypair)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def keypair(self) -> pulumi.Input[str]:
        return pulumi.get(self, "keypair")

    @keypair.setter
    def keypair(self, value: pulumi.Input[str]):
        pulumi.set(self, "keypair", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)


@pulumi.input_type
class NexusRepositoryAptHostedStorageArgs:
    def __init__(__self__, *,
                 blob_store_name: pulumi.Input[str],
                 strict_content_type_validation: pulumi.Input[bool],
                 write_policy: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        if write_policy is not None:
            pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "blob_store_name")

    @blob_store_name.setter
    def blob_store_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "blob_store_name", value)

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "strict_content_type_validation")

    @strict_content_type_validation.setter
    def strict_content_type_validation(self, value: pulumi.Input[bool]):
        pulumi.set(self, "strict_content_type_validation", value)

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "write_policy")

    @write_policy.setter
    def write_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "write_policy", value)


@pulumi.input_type
class NexusRepositoryAptProxyCleanupArgs:
    def __init__(__self__, *,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)


@pulumi.input_type
class NexusRepositoryAptProxyHttpClientArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input['NexusRepositoryAptProxyHttpClientAuthenticationArgs']] = None,
                 auto_block: Optional[pulumi.Input[bool]] = None,
                 blocked: Optional[pulumi.Input[bool]] = None,
                 connection: Optional[pulumi.Input['NexusRepositoryAptProxyHttpClientConnectionArgs']] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if auto_block is not None:
            pulumi.set(__self__, "auto_block", auto_block)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['NexusRepositoryAptProxyHttpClientAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['NexusRepositoryAptProxyHttpClientAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_block")

    @auto_block.setter
    def auto_block(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_block", value)

    @property
    @pulumi.getter
    def blocked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "blocked")

    @blocked.setter
    def blocked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blocked", value)

    @property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input['NexusRepositoryAptProxyHttpClientConnectionArgs']]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input['NexusRepositoryAptProxyHttpClientConnectionArgs']]):
        pulumi.set(self, "connection", value)


@pulumi.input_type
class NexusRepositoryAptProxyHttpClientAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 ntlm_domain: Optional[pulumi.Input[str]] = None,
                 ntlm_host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if ntlm_domain is not None:
            pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        if ntlm_host is not None:
            pulumi.set(__self__, "ntlm_host", ntlm_host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntlm_domain")

    @ntlm_domain.setter
    def ntlm_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm_domain", value)

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntlm_host")

    @ntlm_host.setter
    def ntlm_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm_host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class NexusRepositoryAptProxyHttpClientConnectionArgs:
    def __init__(__self__, *,
                 enable_circular_redirects: Optional[pulumi.Input[bool]] = None,
                 enable_cookies: Optional[pulumi.Input[bool]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 use_trust_store: Optional[pulumi.Input[bool]] = None,
                 user_agent_suffix: Optional[pulumi.Input[str]] = None):
        if enable_circular_redirects is not None:
            pulumi.set(__self__, "enable_circular_redirects", enable_circular_redirects)
        if enable_cookies is not None:
            pulumi.set(__self__, "enable_cookies", enable_cookies)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if use_trust_store is not None:
            pulumi.set(__self__, "use_trust_store", use_trust_store)
        if user_agent_suffix is not None:
            pulumi.set(__self__, "user_agent_suffix", user_agent_suffix)

    @property
    @pulumi.getter(name="enableCircularRedirects")
    def enable_circular_redirects(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_circular_redirects")

    @enable_circular_redirects.setter
    def enable_circular_redirects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_circular_redirects", value)

    @property
    @pulumi.getter(name="enableCookies")
    def enable_cookies(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_cookies")

    @enable_cookies.setter
    def enable_cookies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cookies", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_trust_store")

    @use_trust_store.setter
    def use_trust_store(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_trust_store", value)

    @property
    @pulumi.getter(name="userAgentSuffix")
    def user_agent_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_agent_suffix")

    @user_agent_suffix.setter
    def user_agent_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent_suffix", value)


@pulumi.input_type
class NexusRepositoryAptProxyNegativeCacheArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class NexusRepositoryAptProxyProxyArgs:
    def __init__(__self__, *,
                 remote_url: pulumi.Input[str],
                 content_max_age: Optional[pulumi.Input[int]] = None,
                 metadata_max_age: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "remote_url", remote_url)
        if content_max_age is not None:
            pulumi.set(__self__, "content_max_age", content_max_age)
        if metadata_max_age is not None:
            pulumi.set(__self__, "metadata_max_age", metadata_max_age)

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "remote_url")

    @remote_url.setter
    def remote_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_url", value)

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "content_max_age")

    @content_max_age.setter
    def content_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_max_age", value)

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metadata_max_age")

    @metadata_max_age.setter
    def metadata_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metadata_max_age", value)


@pulumi.input_type
class NexusRepositoryAptProxyStorageArgs:
    def __init__(__self__, *,
                 blob_store_name: pulumi.Input[str],
                 strict_content_type_validation: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "blob_store_name")

    @blob_store_name.setter
    def blob_store_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "blob_store_name", value)

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "strict_content_type_validation")

    @strict_content_type_validation.setter
    def strict_content_type_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strict_content_type_validation", value)


@pulumi.input_type
class NexusRepositoryAptSigningArgs:
    def __init__(__self__, *,
                 keypair: pulumi.Input[str],
                 passphrase: pulumi.Input[str]):
        pulumi.set(__self__, "keypair", keypair)
        pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def keypair(self) -> pulumi.Input[str]:
        return pulumi.get(self, "keypair")

    @keypair.setter
    def keypair(self, value: pulumi.Input[str]):
        pulumi.set(self, "keypair", value)

    @property
    @pulumi.getter
    def passphrase(self) -> pulumi.Input[str]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: pulumi.Input[str]):
        pulumi.set(self, "passphrase", value)


@pulumi.input_type
class NexusRepositoryBowerArgs:
    def __init__(__self__, *,
                 rewrite_package_urls: Optional[pulumi.Input[bool]] = None):
        if rewrite_package_urls is not None:
            pulumi.set(__self__, "rewrite_package_urls", rewrite_package_urls)

    @property
    @pulumi.getter(name="rewritePackageUrls")
    def rewrite_package_urls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "rewrite_package_urls")

    @rewrite_package_urls.setter
    def rewrite_package_urls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rewrite_package_urls", value)


@pulumi.input_type
class NexusRepositoryCleanupArgs:
    def __init__(__self__, *,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)


@pulumi.input_type
class NexusRepositoryDockerArgs:
    def __init__(__self__, *,
                 force_basic_auth: Optional[pulumi.Input[bool]] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 https_port: Optional[pulumi.Input[int]] = None,
                 v1enabled: Optional[pulumi.Input[bool]] = None):
        if force_basic_auth is not None:
            pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if v1enabled is not None:
            pulumi.set(__self__, "v1enabled", v1enabled)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_basic_auth")

    @force_basic_auth.setter
    def force_basic_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_basic_auth", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)

    @property
    @pulumi.getter
    def v1enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "v1enabled")

    @v1enabled.setter
    def v1enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "v1enabled", value)


@pulumi.input_type
class NexusRepositoryDockerGroupDockerArgs:
    def __init__(__self__, *,
                 force_basic_auth: pulumi.Input[bool],
                 v1_enabled: pulumi.Input[bool],
                 http_port: Optional[pulumi.Input[int]] = None,
                 https_port: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        pulumi.set(__self__, "v1_enabled", v1_enabled)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "force_basic_auth")

    @force_basic_auth.setter
    def force_basic_auth(self, value: pulumi.Input[bool]):
        pulumi.set(self, "force_basic_auth", value)

    @property
    @pulumi.getter(name="v1Enabled")
    def v1_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "v1_enabled")

    @v1_enabled.setter
    def v1_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "v1_enabled", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)


@pulumi.input_type
class NexusRepositoryDockerGroupGroupArgs:
    def __init__(__self__, *,
                 member_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 writable_member: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "member_names", member_names)
        if writable_member is not None:
            pulumi.set(__self__, "writable_member", writable_member)

    @property
    @pulumi.getter(name="memberNames")
    def member_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "member_names")

    @member_names.setter
    def member_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "member_names", value)

    @property
    @pulumi.getter(name="writableMember")
    def writable_member(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "writable_member")

    @writable_member.setter
    def writable_member(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "writable_member", value)


@pulumi.input_type
class NexusRepositoryDockerGroupStorageArgs:
    def __init__(__self__, *,
                 blob_store_name: pulumi.Input[str],
                 strict_content_type_validation: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "blob_store_name")

    @blob_store_name.setter
    def blob_store_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "blob_store_name", value)

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "strict_content_type_validation")

    @strict_content_type_validation.setter
    def strict_content_type_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strict_content_type_validation", value)


@pulumi.input_type
class NexusRepositoryDockerHostedCleanupArgs:
    def __init__(__self__, *,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)


@pulumi.input_type
class NexusRepositoryDockerHostedComponentArgs:
    def __init__(__self__, *,
                 proprietary_components: pulumi.Input[bool]):
        pulumi.set(__self__, "proprietary_components", proprietary_components)

    @property
    @pulumi.getter(name="proprietaryComponents")
    def proprietary_components(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "proprietary_components")

    @proprietary_components.setter
    def proprietary_components(self, value: pulumi.Input[bool]):
        pulumi.set(self, "proprietary_components", value)


@pulumi.input_type
class NexusRepositoryDockerHostedDockerArgs:
    def __init__(__self__, *,
                 force_basic_auth: pulumi.Input[bool],
                 v1_enabled: pulumi.Input[bool],
                 http_port: Optional[pulumi.Input[int]] = None,
                 https_port: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        pulumi.set(__self__, "v1_enabled", v1_enabled)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "force_basic_auth")

    @force_basic_auth.setter
    def force_basic_auth(self, value: pulumi.Input[bool]):
        pulumi.set(self, "force_basic_auth", value)

    @property
    @pulumi.getter(name="v1Enabled")
    def v1_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "v1_enabled")

    @v1_enabled.setter
    def v1_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "v1_enabled", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)


@pulumi.input_type
class NexusRepositoryDockerHostedStorageArgs:
    def __init__(__self__, *,
                 blob_store_name: pulumi.Input[str],
                 strict_content_type_validation: pulumi.Input[bool],
                 write_policy: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        if write_policy is not None:
            pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "blob_store_name")

    @blob_store_name.setter
    def blob_store_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "blob_store_name", value)

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "strict_content_type_validation")

    @strict_content_type_validation.setter
    def strict_content_type_validation(self, value: pulumi.Input[bool]):
        pulumi.set(self, "strict_content_type_validation", value)

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "write_policy")

    @write_policy.setter
    def write_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "write_policy", value)


@pulumi.input_type
class NexusRepositoryDockerProxyArgs:
    def __init__(__self__, *,
                 index_type: pulumi.Input[str],
                 index_url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "index_type", index_type)
        if index_url is not None:
            pulumi.set(__self__, "index_url", index_url)

    @property
    @pulumi.getter(name="indexType")
    def index_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index_type")

    @index_type.setter
    def index_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_type", value)

    @property
    @pulumi.getter(name="indexUrl")
    def index_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index_url")

    @index_url.setter
    def index_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_url", value)


@pulumi.input_type
class NexusRepositoryDockerProxyCleanupArgs:
    def __init__(__self__, *,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)


@pulumi.input_type
class NexusRepositoryDockerProxyDockerArgs:
    def __init__(__self__, *,
                 force_basic_auth: pulumi.Input[bool],
                 v1_enabled: pulumi.Input[bool],
                 http_port: Optional[pulumi.Input[int]] = None,
                 https_port: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        pulumi.set(__self__, "v1_enabled", v1_enabled)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "force_basic_auth")

    @force_basic_auth.setter
    def force_basic_auth(self, value: pulumi.Input[bool]):
        pulumi.set(self, "force_basic_auth", value)

    @property
    @pulumi.getter(name="v1Enabled")
    def v1_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "v1_enabled")

    @v1_enabled.setter
    def v1_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "v1_enabled", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)


@pulumi.input_type
class NexusRepositoryDockerProxyDockerProxyArgs:
    def __init__(__self__, *,
                 index_type: pulumi.Input[str],
                 index_url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "index_type", index_type)
        if index_url is not None:
            pulumi.set(__self__, "index_url", index_url)

    @property
    @pulumi.getter(name="indexType")
    def index_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index_type")

    @index_type.setter
    def index_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_type", value)

    @property
    @pulumi.getter(name="indexUrl")
    def index_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index_url")

    @index_url.setter
    def index_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_url", value)


@pulumi.input_type
class NexusRepositoryDockerProxyHttpClientArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input['NexusRepositoryDockerProxyHttpClientAuthenticationArgs']] = None,
                 auto_block: Optional[pulumi.Input[bool]] = None,
                 blocked: Optional[pulumi.Input[bool]] = None,
                 connection: Optional[pulumi.Input['NexusRepositoryDockerProxyHttpClientConnectionArgs']] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if auto_block is not None:
            pulumi.set(__self__, "auto_block", auto_block)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['NexusRepositoryDockerProxyHttpClientAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['NexusRepositoryDockerProxyHttpClientAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_block")

    @auto_block.setter
    def auto_block(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_block", value)

    @property
    @pulumi.getter
    def blocked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "blocked")

    @blocked.setter
    def blocked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blocked", value)

    @property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input['NexusRepositoryDockerProxyHttpClientConnectionArgs']]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input['NexusRepositoryDockerProxyHttpClientConnectionArgs']]):
        pulumi.set(self, "connection", value)


@pulumi.input_type
class NexusRepositoryDockerProxyHttpClientAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 ntlm_domain: Optional[pulumi.Input[str]] = None,
                 ntlm_host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if ntlm_domain is not None:
            pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        if ntlm_host is not None:
            pulumi.set(__self__, "ntlm_host", ntlm_host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntlm_domain")

    @ntlm_domain.setter
    def ntlm_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm_domain", value)

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntlm_host")

    @ntlm_host.setter
    def ntlm_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm_host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class NexusRepositoryDockerProxyHttpClientConnectionArgs:
    def __init__(__self__, *,
                 enable_circular_redirects: Optional[pulumi.Input[bool]] = None,
                 enable_cookies: Optional[pulumi.Input[bool]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 use_trust_store: Optional[pulumi.Input[bool]] = None,
                 user_agent_suffix: Optional[pulumi.Input[str]] = None):
        if enable_circular_redirects is not None:
            pulumi.set(__self__, "enable_circular_redirects", enable_circular_redirects)
        if enable_cookies is not None:
            pulumi.set(__self__, "enable_cookies", enable_cookies)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if use_trust_store is not None:
            pulumi.set(__self__, "use_trust_store", use_trust_store)
        if user_agent_suffix is not None:
            pulumi.set(__self__, "user_agent_suffix", user_agent_suffix)

    @property
    @pulumi.getter(name="enableCircularRedirects")
    def enable_circular_redirects(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_circular_redirects")

    @enable_circular_redirects.setter
    def enable_circular_redirects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_circular_redirects", value)

    @property
    @pulumi.getter(name="enableCookies")
    def enable_cookies(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_cookies")

    @enable_cookies.setter
    def enable_cookies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cookies", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_trust_store")

    @use_trust_store.setter
    def use_trust_store(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_trust_store", value)

    @property
    @pulumi.getter(name="userAgentSuffix")
    def user_agent_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_agent_suffix")

    @user_agent_suffix.setter
    def user_agent_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent_suffix", value)


@pulumi.input_type
class NexusRepositoryDockerProxyNegativeCacheArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class NexusRepositoryDockerProxyProxyArgs:
    def __init__(__self__, *,
                 remote_url: pulumi.Input[str],
                 content_max_age: Optional[pulumi.Input[int]] = None,
                 metadata_max_age: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "remote_url", remote_url)
        if content_max_age is not None:
            pulumi.set(__self__, "content_max_age", content_max_age)
        if metadata_max_age is not None:
            pulumi.set(__self__, "metadata_max_age", metadata_max_age)

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "remote_url")

    @remote_url.setter
    def remote_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_url", value)

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "content_max_age")

    @content_max_age.setter
    def content_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_max_age", value)

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metadata_max_age")

    @metadata_max_age.setter
    def metadata_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metadata_max_age", value)


@pulumi.input_type
class NexusRepositoryDockerProxyStorageArgs:
    def __init__(__self__, *,
                 blob_store_name: pulumi.Input[str],
                 strict_content_type_validation: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "blob_store_name")

    @blob_store_name.setter
    def blob_store_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "blob_store_name", value)

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "strict_content_type_validation")

    @strict_content_type_validation.setter
    def strict_content_type_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strict_content_type_validation", value)


@pulumi.input_type
class NexusRepositoryGroupArgs:
    def __init__(__self__, *,
                 member_names: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "member_names", member_names)

    @property
    @pulumi.getter(name="memberNames")
    def member_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "member_names")

    @member_names.setter
    def member_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "member_names", value)


@pulumi.input_type
class NexusRepositoryHttpClientArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input['NexusRepositoryHttpClientAuthenticationArgs']] = None,
                 auto_block: Optional[pulumi.Input[bool]] = None,
                 blocked: Optional[pulumi.Input[bool]] = None,
                 connection: Optional[pulumi.Input['NexusRepositoryHttpClientConnectionArgs']] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if auto_block is not None:
            pulumi.set(__self__, "auto_block", auto_block)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['NexusRepositoryHttpClientAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['NexusRepositoryHttpClientAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_block")

    @auto_block.setter
    def auto_block(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_block", value)

    @property
    @pulumi.getter
    def blocked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "blocked")

    @blocked.setter
    def blocked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blocked", value)

    @property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input['NexusRepositoryHttpClientConnectionArgs']]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input['NexusRepositoryHttpClientConnectionArgs']]):
        pulumi.set(self, "connection", value)


@pulumi.input_type
class NexusRepositoryHttpClientAuthenticationArgs:
    def __init__(__self__, *,
                 ntlm_domain: Optional[pulumi.Input[str]] = None,
                 ntlm_host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if ntlm_domain is not None:
            pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        if ntlm_host is not None:
            pulumi.set(__self__, "ntlm_host", ntlm_host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntlm_domain")

    @ntlm_domain.setter
    def ntlm_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm_domain", value)

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntlm_host")

    @ntlm_host.setter
    def ntlm_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm_host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class NexusRepositoryHttpClientConnectionArgs:
    def __init__(__self__, *,
                 enable_cookies: Optional[pulumi.Input[bool]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 use_trust_store: Optional[pulumi.Input[bool]] = None,
                 user_agent_suffix: Optional[pulumi.Input[str]] = None):
        if enable_cookies is not None:
            pulumi.set(__self__, "enable_cookies", enable_cookies)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if use_trust_store is not None:
            pulumi.set(__self__, "use_trust_store", use_trust_store)
        if user_agent_suffix is not None:
            pulumi.set(__self__, "user_agent_suffix", user_agent_suffix)

    @property
    @pulumi.getter(name="enableCookies")
    def enable_cookies(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_cookies")

    @enable_cookies.setter
    def enable_cookies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cookies", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_trust_store")

    @use_trust_store.setter
    def use_trust_store(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_trust_store", value)

    @property
    @pulumi.getter(name="userAgentSuffix")
    def user_agent_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_agent_suffix")

    @user_agent_suffix.setter
    def user_agent_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent_suffix", value)


@pulumi.input_type
class NexusRepositoryMavenArgs:
    def __init__(__self__, *,
                 layout_policy: Optional[pulumi.Input[str]] = None,
                 version_policy: Optional[pulumi.Input[str]] = None):
        if layout_policy is not None:
            pulumi.set(__self__, "layout_policy", layout_policy)
        if version_policy is not None:
            pulumi.set(__self__, "version_policy", version_policy)

    @property
    @pulumi.getter(name="layoutPolicy")
    def layout_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "layout_policy")

    @layout_policy.setter
    def layout_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layout_policy", value)

    @property
    @pulumi.getter(name="versionPolicy")
    def version_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_policy")

    @version_policy.setter
    def version_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_policy", value)


@pulumi.input_type
class NexusRepositoryMavenHostedCleanupArgs:
    def __init__(__self__, *,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)


@pulumi.input_type
class NexusRepositoryMavenHostedComponentArgs:
    def __init__(__self__, *,
                 proprietary_components: pulumi.Input[bool]):
        pulumi.set(__self__, "proprietary_components", proprietary_components)

    @property
    @pulumi.getter(name="proprietaryComponents")
    def proprietary_components(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "proprietary_components")

    @proprietary_components.setter
    def proprietary_components(self, value: pulumi.Input[bool]):
        pulumi.set(self, "proprietary_components", value)


@pulumi.input_type
class NexusRepositoryMavenHostedMavenArgs:
    def __init__(__self__, *,
                 content_disposition: Optional[pulumi.Input[str]] = None,
                 layout_policy: Optional[pulumi.Input[str]] = None,
                 version_policy: Optional[pulumi.Input[str]] = None):
        if content_disposition is not None:
            pulumi.set(__self__, "content_disposition", content_disposition)
        if layout_policy is not None:
            pulumi.set(__self__, "layout_policy", layout_policy)
        if version_policy is not None:
            pulumi.set(__self__, "version_policy", version_policy)

    @property
    @pulumi.getter(name="contentDisposition")
    def content_disposition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_disposition")

    @content_disposition.setter
    def content_disposition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disposition", value)

    @property
    @pulumi.getter(name="layoutPolicy")
    def layout_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "layout_policy")

    @layout_policy.setter
    def layout_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layout_policy", value)

    @property
    @pulumi.getter(name="versionPolicy")
    def version_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_policy")

    @version_policy.setter
    def version_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_policy", value)


@pulumi.input_type
class NexusRepositoryMavenHostedStorageArgs:
    def __init__(__self__, *,
                 blob_store_name: pulumi.Input[str],
                 strict_content_type_validation: pulumi.Input[bool],
                 write_policy: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        if write_policy is not None:
            pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "blob_store_name")

    @blob_store_name.setter
    def blob_store_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "blob_store_name", value)

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "strict_content_type_validation")

    @strict_content_type_validation.setter
    def strict_content_type_validation(self, value: pulumi.Input[bool]):
        pulumi.set(self, "strict_content_type_validation", value)

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "write_policy")

    @write_policy.setter
    def write_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "write_policy", value)


@pulumi.input_type
class NexusRepositoryNegativeCacheArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class NexusRepositoryNugetProxyArgs:
    def __init__(__self__, *,
                 query_cache_item_max_age: pulumi.Input[int],
                 nuget_version: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "query_cache_item_max_age", query_cache_item_max_age)
        if nuget_version is not None:
            pulumi.set(__self__, "nuget_version", nuget_version)

    @property
    @pulumi.getter(name="queryCacheItemMaxAge")
    def query_cache_item_max_age(self) -> pulumi.Input[int]:
        return pulumi.get(self, "query_cache_item_max_age")

    @query_cache_item_max_age.setter
    def query_cache_item_max_age(self, value: pulumi.Input[int]):
        pulumi.set(self, "query_cache_item_max_age", value)

    @property
    @pulumi.getter(name="nugetVersion")
    def nuget_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nuget_version")

    @nuget_version.setter
    def nuget_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nuget_version", value)


@pulumi.input_type
class NexusRepositoryProxyArgs:
    def __init__(__self__, *,
                 content_max_age: Optional[pulumi.Input[int]] = None,
                 metadata_max_age: Optional[pulumi.Input[int]] = None,
                 remote_url: Optional[pulumi.Input[str]] = None):
        if content_max_age is not None:
            pulumi.set(__self__, "content_max_age", content_max_age)
        if metadata_max_age is not None:
            pulumi.set(__self__, "metadata_max_age", metadata_max_age)
        if remote_url is not None:
            pulumi.set(__self__, "remote_url", remote_url)

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "content_max_age")

    @content_max_age.setter
    def content_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_max_age", value)

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metadata_max_age")

    @metadata_max_age.setter
    def metadata_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metadata_max_age", value)

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_url")

    @remote_url.setter
    def remote_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_url", value)


@pulumi.input_type
class NexusRepositoryStorageArgs:
    def __init__(__self__, *,
                 blob_store_name: Optional[pulumi.Input[str]] = None,
                 strict_content_type_validation: Optional[pulumi.Input[bool]] = None,
                 write_policy: Optional[pulumi.Input[str]] = None):
        if blob_store_name is not None:
            pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        if write_policy is not None:
            pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blob_store_name")

    @blob_store_name.setter
    def blob_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blob_store_name", value)

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "strict_content_type_validation")

    @strict_content_type_validation.setter
    def strict_content_type_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strict_content_type_validation", value)

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "write_policy")

    @write_policy.setter
    def write_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "write_policy", value)


@pulumi.input_type
class NexusRepositoryYumArgs:
    def __init__(__self__, *,
                 deploy_policy: pulumi.Input[str],
                 repodata_depth: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "deploy_policy", deploy_policy)
        if repodata_depth is not None:
            pulumi.set(__self__, "repodata_depth", repodata_depth)

    @property
    @pulumi.getter(name="deployPolicy")
    def deploy_policy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deploy_policy")

    @deploy_policy.setter
    def deploy_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "deploy_policy", value)

    @property
    @pulumi.getter(name="repodataDepth")
    def repodata_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "repodata_depth")

    @repodata_depth.setter
    def repodata_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "repodata_depth", value)


@pulumi.input_type
class NexusRepositoryYumGroupGroupArgs:
    def __init__(__self__, *,
                 member_names: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "member_names", member_names)

    @property
    @pulumi.getter(name="memberNames")
    def member_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "member_names")

    @member_names.setter
    def member_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "member_names", value)


@pulumi.input_type
class NexusRepositoryYumGroupStorageArgs:
    def __init__(__self__, *,
                 blob_store_name: pulumi.Input[str],
                 strict_content_type_validation: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "blob_store_name")

    @blob_store_name.setter
    def blob_store_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "blob_store_name", value)

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "strict_content_type_validation")

    @strict_content_type_validation.setter
    def strict_content_type_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strict_content_type_validation", value)


@pulumi.input_type
class NexusRepositoryYumGroupYumSigningArgs:
    def __init__(__self__, *,
                 keypair: pulumi.Input[str],
                 passphrase: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "keypair", keypair)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def keypair(self) -> pulumi.Input[str]:
        return pulumi.get(self, "keypair")

    @keypair.setter
    def keypair(self, value: pulumi.Input[str]):
        pulumi.set(self, "keypair", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)


@pulumi.input_type
class NexusRepositoryYumHostedCleanupArgs:
    def __init__(__self__, *,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)


@pulumi.input_type
class NexusRepositoryYumHostedComponentArgs:
    def __init__(__self__, *,
                 proprietary_components: pulumi.Input[bool]):
        pulumi.set(__self__, "proprietary_components", proprietary_components)

    @property
    @pulumi.getter(name="proprietaryComponents")
    def proprietary_components(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "proprietary_components")

    @proprietary_components.setter
    def proprietary_components(self, value: pulumi.Input[bool]):
        pulumi.set(self, "proprietary_components", value)


@pulumi.input_type
class NexusRepositoryYumHostedStorageArgs:
    def __init__(__self__, *,
                 blob_store_name: pulumi.Input[str],
                 strict_content_type_validation: pulumi.Input[bool],
                 write_policy: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        if write_policy is not None:
            pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "blob_store_name")

    @blob_store_name.setter
    def blob_store_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "blob_store_name", value)

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "strict_content_type_validation")

    @strict_content_type_validation.setter
    def strict_content_type_validation(self, value: pulumi.Input[bool]):
        pulumi.set(self, "strict_content_type_validation", value)

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "write_policy")

    @write_policy.setter
    def write_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "write_policy", value)


@pulumi.input_type
class NexusRepositoryYumProxyCleanupArgs:
    def __init__(__self__, *,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)


@pulumi.input_type
class NexusRepositoryYumProxyHttpClientArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input['NexusRepositoryYumProxyHttpClientAuthenticationArgs']] = None,
                 auto_block: Optional[pulumi.Input[bool]] = None,
                 blocked: Optional[pulumi.Input[bool]] = None,
                 connection: Optional[pulumi.Input['NexusRepositoryYumProxyHttpClientConnectionArgs']] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if auto_block is not None:
            pulumi.set(__self__, "auto_block", auto_block)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['NexusRepositoryYumProxyHttpClientAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['NexusRepositoryYumProxyHttpClientAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_block")

    @auto_block.setter
    def auto_block(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_block", value)

    @property
    @pulumi.getter
    def blocked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "blocked")

    @blocked.setter
    def blocked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blocked", value)

    @property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input['NexusRepositoryYumProxyHttpClientConnectionArgs']]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input['NexusRepositoryYumProxyHttpClientConnectionArgs']]):
        pulumi.set(self, "connection", value)


@pulumi.input_type
class NexusRepositoryYumProxyHttpClientAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 ntlm_domain: Optional[pulumi.Input[str]] = None,
                 ntlm_host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if ntlm_domain is not None:
            pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        if ntlm_host is not None:
            pulumi.set(__self__, "ntlm_host", ntlm_host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntlm_domain")

    @ntlm_domain.setter
    def ntlm_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm_domain", value)

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ntlm_host")

    @ntlm_host.setter
    def ntlm_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntlm_host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class NexusRepositoryYumProxyHttpClientConnectionArgs:
    def __init__(__self__, *,
                 enable_circular_redirects: Optional[pulumi.Input[bool]] = None,
                 enable_cookies: Optional[pulumi.Input[bool]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 use_trust_store: Optional[pulumi.Input[bool]] = None,
                 user_agent_suffix: Optional[pulumi.Input[str]] = None):
        if enable_circular_redirects is not None:
            pulumi.set(__self__, "enable_circular_redirects", enable_circular_redirects)
        if enable_cookies is not None:
            pulumi.set(__self__, "enable_cookies", enable_cookies)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if use_trust_store is not None:
            pulumi.set(__self__, "use_trust_store", use_trust_store)
        if user_agent_suffix is not None:
            pulumi.set(__self__, "user_agent_suffix", user_agent_suffix)

    @property
    @pulumi.getter(name="enableCircularRedirects")
    def enable_circular_redirects(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_circular_redirects")

    @enable_circular_redirects.setter
    def enable_circular_redirects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_circular_redirects", value)

    @property
    @pulumi.getter(name="enableCookies")
    def enable_cookies(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_cookies")

    @enable_cookies.setter
    def enable_cookies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cookies", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_trust_store")

    @use_trust_store.setter
    def use_trust_store(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_trust_store", value)

    @property
    @pulumi.getter(name="userAgentSuffix")
    def user_agent_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_agent_suffix")

    @user_agent_suffix.setter
    def user_agent_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent_suffix", value)


@pulumi.input_type
class NexusRepositoryYumProxyNegativeCacheArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class NexusRepositoryYumProxyProxyArgs:
    def __init__(__self__, *,
                 remote_url: pulumi.Input[str],
                 content_max_age: Optional[pulumi.Input[int]] = None,
                 metadata_max_age: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "remote_url", remote_url)
        if content_max_age is not None:
            pulumi.set(__self__, "content_max_age", content_max_age)
        if metadata_max_age is not None:
            pulumi.set(__self__, "metadata_max_age", metadata_max_age)

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "remote_url")

    @remote_url.setter
    def remote_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_url", value)

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "content_max_age")

    @content_max_age.setter
    def content_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_max_age", value)

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metadata_max_age")

    @metadata_max_age.setter
    def metadata_max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metadata_max_age", value)


@pulumi.input_type
class NexusRepositoryYumProxyStorageArgs:
    def __init__(__self__, *,
                 blob_store_name: pulumi.Input[str],
                 strict_content_type_validation: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "blob_store_name")

    @blob_store_name.setter
    def blob_store_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "blob_store_name", value)

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "strict_content_type_validation")

    @strict_content_type_validation.setter
    def strict_content_type_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strict_content_type_validation", value)


@pulumi.input_type
class NexusRepositoryYumProxyYumSigningArgs:
    def __init__(__self__, *,
                 keypair: pulumi.Input[str],
                 passphrase: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "keypair", keypair)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def keypair(self) -> pulumi.Input[str]:
        return pulumi.get(self, "keypair")

    @keypair.setter
    def keypair(self, value: pulumi.Input[str]):
        pulumi.set(self, "keypair", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)


