# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetNexusBlobstoreAzureBucketConfigurationResult',
    'GetNexusBlobstoreAzureBucketConfigurationAuthenticationResult',
    'GetNexusBlobstoreAzureSoftQuotaResult',
    'GetNexusBlobstoreBucketConfigurationResult',
    'GetNexusBlobstoreBucketConfigurationAdvancedBucketConnectionResult',
    'GetNexusBlobstoreBucketConfigurationBucketResult',
    'GetNexusBlobstoreBucketConfigurationBucketSecurityResult',
    'GetNexusBlobstoreBucketConfigurationEncryptionResult',
    'GetNexusBlobstoreFileSoftQuotaResult',
    'GetNexusBlobstoreGroupSoftQuotaResult',
    'GetNexusBlobstoreS3BucketConfigurationResult',
    'GetNexusBlobstoreS3BucketConfigurationAdvancedBucketConnectionResult',
    'GetNexusBlobstoreS3BucketConfigurationBucketResult',
    'GetNexusBlobstoreS3BucketConfigurationBucketSecurityResult',
    'GetNexusBlobstoreS3BucketConfigurationEncryptionResult',
    'GetNexusBlobstoreS3SoftQuotaResult',
    'GetNexusBlobstoreSoftQuotaResult',
    'GetNexusPrivilegesPrivilegeResult',
    'GetNexusRepositoryAptResult',
    'GetNexusRepositoryAptHostedCleanupResult',
    'GetNexusRepositoryAptHostedComponentResult',
    'GetNexusRepositoryAptHostedStorageResult',
    'GetNexusRepositoryAptProxyCleanupResult',
    'GetNexusRepositoryAptProxyHttpClientResult',
    'GetNexusRepositoryAptProxyHttpClientAuthenticationResult',
    'GetNexusRepositoryAptProxyHttpClientConnectionResult',
    'GetNexusRepositoryAptProxyNegativeCachResult',
    'GetNexusRepositoryAptProxyProxyResult',
    'GetNexusRepositoryAptProxyStorageResult',
    'GetNexusRepositoryAptSigningResult',
    'GetNexusRepositoryCleanupResult',
    'GetNexusRepositoryDockerResult',
    'GetNexusRepositoryDockerGroupDockerResult',
    'GetNexusRepositoryDockerGroupGroupResult',
    'GetNexusRepositoryDockerGroupStorageResult',
    'GetNexusRepositoryDockerHostedCleanupResult',
    'GetNexusRepositoryDockerHostedComponentResult',
    'GetNexusRepositoryDockerHostedDockerResult',
    'GetNexusRepositoryDockerHostedStorageResult',
    'GetNexusRepositoryDockerProxyCleanupResult',
    'GetNexusRepositoryDockerProxyDockerResult',
    'GetNexusRepositoryDockerProxyDockerProxyResult',
    'GetNexusRepositoryDockerProxyHttpClientResult',
    'GetNexusRepositoryDockerProxyHttpClientAuthenticationResult',
    'GetNexusRepositoryDockerProxyHttpClientConnectionResult',
    'GetNexusRepositoryDockerProxyNegativeCachResult',
    'GetNexusRepositoryDockerProxyProxyResult',
    'GetNexusRepositoryDockerProxyStorageResult',
    'GetNexusRepositoryGroupResult',
    'GetNexusRepositoryHttpClientResult',
    'GetNexusRepositoryHttpClientAuthenticationResult',
    'GetNexusRepositoryHttpClientConnectionResult',
    'GetNexusRepositoryListItemResult',
    'GetNexusRepositoryMavenResult',
    'GetNexusRepositoryNegativeCacheResult',
    'GetNexusRepositoryProxyResult',
    'GetNexusRepositoryStorageResult',
    'GetNexusRepositoryYumGroupGroupResult',
    'GetNexusRepositoryYumGroupStorageResult',
    'GetNexusRepositoryYumGroupYumSigningResult',
    'GetNexusRepositoryYumHostedCleanupResult',
    'GetNexusRepositoryYumHostedComponentResult',
    'GetNexusRepositoryYumHostedStorageResult',
    'GetNexusRepositoryYumProxyCleanupResult',
    'GetNexusRepositoryYumProxyHttpClientResult',
    'GetNexusRepositoryYumProxyHttpClientAuthenticationResult',
    'GetNexusRepositoryYumProxyHttpClientConnectionResult',
    'GetNexusRepositoryYumProxyNegativeCachResult',
    'GetNexusRepositoryYumProxyProxyResult',
    'GetNexusRepositoryYumProxyStorageResult',
    'GetNexusRepositoryYumProxyYumSigningResult',
    'GetNexusSecurityLdapLdapResult',
    'GetNexusSecurityRealmsActiveResult',
    'GetNexusSecurityRealmsAvailableResult',
    'NexusBlobstoreAzureBucketConfiguration',
    'NexusBlobstoreAzureBucketConfigurationAuthentication',
    'NexusBlobstoreAzureSoftQuota',
    'NexusBlobstoreBucketConfiguration',
    'NexusBlobstoreBucketConfigurationAdvancedBucketConnection',
    'NexusBlobstoreBucketConfigurationBucket',
    'NexusBlobstoreBucketConfigurationBucketSecurity',
    'NexusBlobstoreBucketConfigurationEncryption',
    'NexusBlobstoreFileSoftQuota',
    'NexusBlobstoreGroupSoftQuota',
    'NexusBlobstoreS3BucketConfiguration',
    'NexusBlobstoreS3BucketConfigurationAdvancedBucketConnection',
    'NexusBlobstoreS3BucketConfigurationBucket',
    'NexusBlobstoreS3BucketConfigurationBucketSecurity',
    'NexusBlobstoreS3BucketConfigurationEncryption',
    'NexusBlobstoreS3SoftQuota',
    'NexusBlobstoreSoftQuota',
    'NexusRepositoryApt',
    'NexusRepositoryAptHostedCleanup',
    'NexusRepositoryAptHostedComponent',
    'NexusRepositoryAptHostedSigning',
    'NexusRepositoryAptHostedStorage',
    'NexusRepositoryAptProxyCleanup',
    'NexusRepositoryAptProxyHttpClient',
    'NexusRepositoryAptProxyHttpClientAuthentication',
    'NexusRepositoryAptProxyHttpClientConnection',
    'NexusRepositoryAptProxyNegativeCache',
    'NexusRepositoryAptProxyProxy',
    'NexusRepositoryAptProxyStorage',
    'NexusRepositoryAptSigning',
    'NexusRepositoryBower',
    'NexusRepositoryCleanup',
    'NexusRepositoryDocker',
    'NexusRepositoryDockerGroupDocker',
    'NexusRepositoryDockerGroupGroup',
    'NexusRepositoryDockerGroupStorage',
    'NexusRepositoryDockerHostedCleanup',
    'NexusRepositoryDockerHostedComponent',
    'NexusRepositoryDockerHostedDocker',
    'NexusRepositoryDockerHostedStorage',
    'NexusRepositoryDockerProxy',
    'NexusRepositoryDockerProxyCleanup',
    'NexusRepositoryDockerProxyDocker',
    'NexusRepositoryDockerProxyDockerProxy',
    'NexusRepositoryDockerProxyHttpClient',
    'NexusRepositoryDockerProxyHttpClientAuthentication',
    'NexusRepositoryDockerProxyHttpClientConnection',
    'NexusRepositoryDockerProxyNegativeCache',
    'NexusRepositoryDockerProxyProxy',
    'NexusRepositoryDockerProxyStorage',
    'NexusRepositoryGroup',
    'NexusRepositoryHttpClient',
    'NexusRepositoryHttpClientAuthentication',
    'NexusRepositoryHttpClientConnection',
    'NexusRepositoryMaven',
    'NexusRepositoryMavenHostedCleanup',
    'NexusRepositoryMavenHostedComponent',
    'NexusRepositoryMavenHostedMaven',
    'NexusRepositoryMavenHostedStorage',
    'NexusRepositoryNegativeCache',
    'NexusRepositoryNugetProxy',
    'NexusRepositoryProxy',
    'NexusRepositoryStorage',
    'NexusRepositoryYum',
    'NexusRepositoryYumGroupGroup',
    'NexusRepositoryYumGroupStorage',
    'NexusRepositoryYumGroupYumSigning',
    'NexusRepositoryYumHostedCleanup',
    'NexusRepositoryYumHostedComponent',
    'NexusRepositoryYumHostedStorage',
    'NexusRepositoryYumProxyCleanup',
    'NexusRepositoryYumProxyHttpClient',
    'NexusRepositoryYumProxyHttpClientAuthentication',
    'NexusRepositoryYumProxyHttpClientConnection',
    'NexusRepositoryYumProxyNegativeCache',
    'NexusRepositoryYumProxyProxy',
    'NexusRepositoryYumProxyStorage',
    'NexusRepositoryYumProxyYumSigning',
]

@pulumi.output_type
class GetNexusBlobstoreAzureBucketConfigurationResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 authentications: Sequence['outputs.GetNexusBlobstoreAzureBucketConfigurationAuthenticationResult'],
                 container_name: str):
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "authentications", authentications)
        pulumi.set(__self__, "container_name", container_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.GetNexusBlobstoreAzureBucketConfigurationAuthenticationResult']:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        return pulumi.get(self, "container_name")


@pulumi.output_type
class GetNexusBlobstoreAzureBucketConfigurationAuthenticationResult(dict):
    def __init__(__self__, *,
                 authentication_method: str):
        pulumi.set(__self__, "authentication_method", authentication_method)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> str:
        return pulumi.get(self, "authentication_method")


@pulumi.output_type
class GetNexusBlobstoreAzureSoftQuotaResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 type: str):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNexusBlobstoreBucketConfigurationResult(dict):
    def __init__(__self__, *,
                 bucket: 'outputs.GetNexusBlobstoreBucketConfigurationBucketResult',
                 bucket_security: 'outputs.GetNexusBlobstoreBucketConfigurationBucketSecurityResult',
                 advanced_bucket_connection: Optional['outputs.GetNexusBlobstoreBucketConfigurationAdvancedBucketConnectionResult'] = None,
                 encryption: Optional['outputs.GetNexusBlobstoreBucketConfigurationEncryptionResult'] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "bucket_security", bucket_security)
        if advanced_bucket_connection is not None:
            pulumi.set(__self__, "advanced_bucket_connection", advanced_bucket_connection)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)

    @property
    @pulumi.getter
    def bucket(self) -> 'outputs.GetNexusBlobstoreBucketConfigurationBucketResult':
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="bucketSecurity")
    def bucket_security(self) -> 'outputs.GetNexusBlobstoreBucketConfigurationBucketSecurityResult':
        return pulumi.get(self, "bucket_security")

    @property
    @pulumi.getter(name="advancedBucketConnection")
    def advanced_bucket_connection(self) -> Optional['outputs.GetNexusBlobstoreBucketConfigurationAdvancedBucketConnectionResult']:
        return pulumi.get(self, "advanced_bucket_connection")

    @property
    @pulumi.getter
    def encryption(self) -> Optional['outputs.GetNexusBlobstoreBucketConfigurationEncryptionResult']:
        return pulumi.get(self, "encryption")


@pulumi.output_type
class GetNexusBlobstoreBucketConfigurationAdvancedBucketConnectionResult(dict):
    def __init__(__self__, *,
                 endpoint: Optional[str] = None,
                 force_path_style: Optional[bool] = None,
                 signer_type: Optional[str] = None):
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if force_path_style is not None:
            pulumi.set(__self__, "force_path_style", force_path_style)
        if signer_type is not None:
            pulumi.set(__self__, "signer_type", signer_type)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="forcePathStyle")
    def force_path_style(self) -> Optional[bool]:
        return pulumi.get(self, "force_path_style")

    @property
    @pulumi.getter(name="signerType")
    def signer_type(self) -> Optional[str]:
        return pulumi.get(self, "signer_type")


@pulumi.output_type
class GetNexusBlobstoreBucketConfigurationBucketResult(dict):
    def __init__(__self__, *,
                 name: str,
                 region: str,
                 expiration: Optional[int] = None,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def expiration(self) -> Optional[int]:
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetNexusBlobstoreBucketConfigurationBucketSecurityResult(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 secret_access_key: str,
                 role: Optional[str] = None,
                 session_token: Optional[str] = None):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if session_token is not None:
            pulumi.set(__self__, "session_token", session_token)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[str]:
        return pulumi.get(self, "session_token")


@pulumi.output_type
class GetNexusBlobstoreBucketConfigurationEncryptionResult(dict):
    def __init__(__self__, *,
                 encryption_key: Optional[str] = None,
                 encryption_type: Optional[str] = None):
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[str]:
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")


@pulumi.output_type
class GetNexusBlobstoreFileSoftQuotaResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 type: str):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNexusBlobstoreGroupSoftQuotaResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 type: str):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNexusBlobstoreS3BucketConfigurationResult(dict):
    def __init__(__self__, *,
                 advanced_bucket_connections: Sequence['outputs.GetNexusBlobstoreS3BucketConfigurationAdvancedBucketConnectionResult'],
                 bucket_securities: Sequence['outputs.GetNexusBlobstoreS3BucketConfigurationBucketSecurityResult'],
                 buckets: Sequence['outputs.GetNexusBlobstoreS3BucketConfigurationBucketResult'],
                 encryptions: Sequence['outputs.GetNexusBlobstoreS3BucketConfigurationEncryptionResult']):
        pulumi.set(__self__, "advanced_bucket_connections", advanced_bucket_connections)
        pulumi.set(__self__, "bucket_securities", bucket_securities)
        pulumi.set(__self__, "buckets", buckets)
        pulumi.set(__self__, "encryptions", encryptions)

    @property
    @pulumi.getter(name="advancedBucketConnections")
    def advanced_bucket_connections(self) -> Sequence['outputs.GetNexusBlobstoreS3BucketConfigurationAdvancedBucketConnectionResult']:
        return pulumi.get(self, "advanced_bucket_connections")

    @property
    @pulumi.getter(name="bucketSecurities")
    def bucket_securities(self) -> Sequence['outputs.GetNexusBlobstoreS3BucketConfigurationBucketSecurityResult']:
        return pulumi.get(self, "bucket_securities")

    @property
    @pulumi.getter
    def buckets(self) -> Sequence['outputs.GetNexusBlobstoreS3BucketConfigurationBucketResult']:
        return pulumi.get(self, "buckets")

    @property
    @pulumi.getter
    def encryptions(self) -> Sequence['outputs.GetNexusBlobstoreS3BucketConfigurationEncryptionResult']:
        return pulumi.get(self, "encryptions")


@pulumi.output_type
class GetNexusBlobstoreS3BucketConfigurationAdvancedBucketConnectionResult(dict):
    def __init__(__self__, *,
                 endpoint: str,
                 force_path_style: bool,
                 signer_type: str):
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "force_path_style", force_path_style)
        pulumi.set(__self__, "signer_type", signer_type)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="forcePathStyle")
    def force_path_style(self) -> bool:
        return pulumi.get(self, "force_path_style")

    @property
    @pulumi.getter(name="signerType")
    def signer_type(self) -> str:
        return pulumi.get(self, "signer_type")


@pulumi.output_type
class GetNexusBlobstoreS3BucketConfigurationBucketResult(dict):
    def __init__(__self__, *,
                 expiration: int,
                 name: str,
                 prefix: str,
                 region: str):
        pulumi.set(__self__, "expiration", expiration)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def expiration(self) -> int:
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetNexusBlobstoreS3BucketConfigurationBucketSecurityResult(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 role: str,
                 secret_access_key: str,
                 session_token: str):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        pulumi.set(__self__, "session_token", session_token)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> str:
        return pulumi.get(self, "session_token")


@pulumi.output_type
class GetNexusBlobstoreS3BucketConfigurationEncryptionResult(dict):
    def __init__(__self__, *,
                 encryption_key: str,
                 encryption_type: str):
        pulumi.set(__self__, "encryption_key", encryption_key)
        pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> str:
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> str:
        return pulumi.get(self, "encryption_type")


@pulumi.output_type
class GetNexusBlobstoreS3SoftQuotaResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 type: str):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNexusBlobstoreSoftQuotaResult(dict):
    def __init__(__self__, *,
                 limit: Optional[int] = None,
                 type: Optional[str] = None):
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNexusPrivilegesPrivilegeResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 content_selector: str,
                 description: str,
                 domain: str,
                 format: str,
                 name: str,
                 pattern: bool,
                 read_only: bool,
                 repository: str,
                 type: str):
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "content_selector", content_selector)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pattern", pattern)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="contentSelector")
    def content_selector(self) -> str:
        return pulumi.get(self, "content_selector")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pattern(self) -> bool:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNexusRepositoryAptResult(dict):
    def __init__(__self__, *,
                 distribution: str):
        pulumi.set(__self__, "distribution", distribution)

    @property
    @pulumi.getter
    def distribution(self) -> str:
        return pulumi.get(self, "distribution")


@pulumi.output_type
class GetNexusRepositoryAptHostedCleanupResult(dict):
    def __init__(__self__, *,
                 policy_names: Sequence[str]):
        pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[str]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class GetNexusRepositoryAptHostedComponentResult(dict):
    def __init__(__self__, *,
                 proprietary_components: bool):
        pulumi.set(__self__, "proprietary_components", proprietary_components)

    @property
    @pulumi.getter(name="proprietaryComponents")
    def proprietary_components(self) -> bool:
        return pulumi.get(self, "proprietary_components")


@pulumi.output_type
class GetNexusRepositoryAptHostedStorageResult(dict):
    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: bool,
                 write_policy: str):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> bool:
        return pulumi.get(self, "strict_content_type_validation")

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> str:
        return pulumi.get(self, "write_policy")


@pulumi.output_type
class GetNexusRepositoryAptProxyCleanupResult(dict):
    def __init__(__self__, *,
                 policy_names: Sequence[str]):
        pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[str]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class GetNexusRepositoryAptProxyHttpClientResult(dict):
    def __init__(__self__, *,
                 authentications: Sequence['outputs.GetNexusRepositoryAptProxyHttpClientAuthenticationResult'],
                 auto_block: bool,
                 blocked: bool,
                 connections: Sequence['outputs.GetNexusRepositoryAptProxyHttpClientConnectionResult']):
        pulumi.set(__self__, "authentications", authentications)
        pulumi.set(__self__, "auto_block", auto_block)
        pulumi.set(__self__, "blocked", blocked)
        pulumi.set(__self__, "connections", connections)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.GetNexusRepositoryAptProxyHttpClientAuthenticationResult']:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> bool:
        return pulumi.get(self, "auto_block")

    @property
    @pulumi.getter
    def blocked(self) -> bool:
        return pulumi.get(self, "blocked")

    @property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetNexusRepositoryAptProxyHttpClientConnectionResult']:
        return pulumi.get(self, "connections")


@pulumi.output_type
class GetNexusRepositoryAptProxyHttpClientAuthenticationResult(dict):
    def __init__(__self__, *,
                 ntlm_domain: str,
                 ntlm_host: str,
                 password: str,
                 type: str,
                 username: str):
        pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        pulumi.set(__self__, "ntlm_host", ntlm_host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> str:
        return pulumi.get(self, "ntlm_domain")

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> str:
        return pulumi.get(self, "ntlm_host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetNexusRepositoryAptProxyHttpClientConnectionResult(dict):
    def __init__(__self__, *,
                 enable_circular_redirects: bool,
                 enable_cookies: bool,
                 retries: int,
                 timeout: int,
                 use_trust_store: bool,
                 user_agent_suffix: str):
        pulumi.set(__self__, "enable_circular_redirects", enable_circular_redirects)
        pulumi.set(__self__, "enable_cookies", enable_cookies)
        pulumi.set(__self__, "retries", retries)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "use_trust_store", use_trust_store)
        pulumi.set(__self__, "user_agent_suffix", user_agent_suffix)

    @property
    @pulumi.getter(name="enableCircularRedirects")
    def enable_circular_redirects(self) -> bool:
        return pulumi.get(self, "enable_circular_redirects")

    @property
    @pulumi.getter(name="enableCookies")
    def enable_cookies(self) -> bool:
        return pulumi.get(self, "enable_cookies")

    @property
    @pulumi.getter
    def retries(self) -> int:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> bool:
        return pulumi.get(self, "use_trust_store")

    @property
    @pulumi.getter(name="userAgentSuffix")
    def user_agent_suffix(self) -> str:
        return pulumi.get(self, "user_agent_suffix")


@pulumi.output_type
class GetNexusRepositoryAptProxyNegativeCachResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 ttl: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetNexusRepositoryAptProxyProxyResult(dict):
    def __init__(__self__, *,
                 content_max_age: int,
                 metadata_max_age: int,
                 remote_url: str):
        pulumi.set(__self__, "content_max_age", content_max_age)
        pulumi.set(__self__, "metadata_max_age", metadata_max_age)
        pulumi.set(__self__, "remote_url", remote_url)

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> int:
        return pulumi.get(self, "content_max_age")

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> int:
        return pulumi.get(self, "metadata_max_age")

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> str:
        return pulumi.get(self, "remote_url")


@pulumi.output_type
class GetNexusRepositoryAptProxyStorageResult(dict):
    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: bool):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> bool:
        return pulumi.get(self, "strict_content_type_validation")


@pulumi.output_type
class GetNexusRepositoryAptSigningResult(dict):
    def __init__(__self__, *,
                 keypair: str,
                 passphrase: str):
        pulumi.set(__self__, "keypair", keypair)
        pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def keypair(self) -> str:
        return pulumi.get(self, "keypair")

    @property
    @pulumi.getter
    def passphrase(self) -> str:
        return pulumi.get(self, "passphrase")


@pulumi.output_type
class GetNexusRepositoryCleanupResult(dict):
    def __init__(__self__, *,
                 policy_names: Sequence[str]):
        pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[str]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class GetNexusRepositoryDockerResult(dict):
    def __init__(__self__, *,
                 force_basic_auth: Optional[bool] = None,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None,
                 v1enabled: Optional[bool] = None):
        if force_basic_auth is not None:
            pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if v1enabled is not None:
            pulumi.set(__self__, "v1enabled", v1enabled)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> Optional[bool]:
        return pulumi.get(self, "force_basic_auth")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter
    def v1enabled(self) -> Optional[bool]:
        return pulumi.get(self, "v1enabled")


@pulumi.output_type
class GetNexusRepositoryDockerGroupDockerResult(dict):
    def __init__(__self__, *,
                 force_basic_auth: bool,
                 http_port: int,
                 https_port: int,
                 v1_enabled: bool):
        pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        pulumi.set(__self__, "http_port", http_port)
        pulumi.set(__self__, "https_port", https_port)
        pulumi.set(__self__, "v1_enabled", v1_enabled)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> bool:
        return pulumi.get(self, "force_basic_auth")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> int:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> int:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter(name="v1Enabled")
    def v1_enabled(self) -> bool:
        return pulumi.get(self, "v1_enabled")


@pulumi.output_type
class GetNexusRepositoryDockerGroupGroupResult(dict):
    def __init__(__self__, *,
                 member_names: Sequence[str],
                 writable_member: str):
        pulumi.set(__self__, "member_names", member_names)
        pulumi.set(__self__, "writable_member", writable_member)

    @property
    @pulumi.getter(name="memberNames")
    def member_names(self) -> Sequence[str]:
        return pulumi.get(self, "member_names")

    @property
    @pulumi.getter(name="writableMember")
    def writable_member(self) -> str:
        return pulumi.get(self, "writable_member")


@pulumi.output_type
class GetNexusRepositoryDockerGroupStorageResult(dict):
    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: bool):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> bool:
        return pulumi.get(self, "strict_content_type_validation")


@pulumi.output_type
class GetNexusRepositoryDockerHostedCleanupResult(dict):
    def __init__(__self__, *,
                 policy_names: Sequence[str]):
        pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[str]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class GetNexusRepositoryDockerHostedComponentResult(dict):
    def __init__(__self__, *,
                 proprietary_components: bool):
        pulumi.set(__self__, "proprietary_components", proprietary_components)

    @property
    @pulumi.getter(name="proprietaryComponents")
    def proprietary_components(self) -> bool:
        return pulumi.get(self, "proprietary_components")


@pulumi.output_type
class GetNexusRepositoryDockerHostedDockerResult(dict):
    def __init__(__self__, *,
                 force_basic_auth: bool,
                 http_port: int,
                 https_port: int,
                 v1_enabled: bool):
        pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        pulumi.set(__self__, "http_port", http_port)
        pulumi.set(__self__, "https_port", https_port)
        pulumi.set(__self__, "v1_enabled", v1_enabled)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> bool:
        return pulumi.get(self, "force_basic_auth")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> int:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> int:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter(name="v1Enabled")
    def v1_enabled(self) -> bool:
        return pulumi.get(self, "v1_enabled")


@pulumi.output_type
class GetNexusRepositoryDockerHostedStorageResult(dict):
    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: bool,
                 write_policy: str):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> bool:
        return pulumi.get(self, "strict_content_type_validation")

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> str:
        return pulumi.get(self, "write_policy")


@pulumi.output_type
class GetNexusRepositoryDockerProxyCleanupResult(dict):
    def __init__(__self__, *,
                 policy_names: Sequence[str]):
        pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[str]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class GetNexusRepositoryDockerProxyDockerResult(dict):
    def __init__(__self__, *,
                 force_basic_auth: bool,
                 http_port: int,
                 https_port: int,
                 v1_enabled: bool):
        pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        pulumi.set(__self__, "http_port", http_port)
        pulumi.set(__self__, "https_port", https_port)
        pulumi.set(__self__, "v1_enabled", v1_enabled)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> bool:
        return pulumi.get(self, "force_basic_auth")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> int:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> int:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter(name="v1Enabled")
    def v1_enabled(self) -> bool:
        return pulumi.get(self, "v1_enabled")


@pulumi.output_type
class GetNexusRepositoryDockerProxyDockerProxyResult(dict):
    def __init__(__self__, *,
                 index_type: str,
                 index_url: str):
        pulumi.set(__self__, "index_type", index_type)
        pulumi.set(__self__, "index_url", index_url)

    @property
    @pulumi.getter(name="indexType")
    def index_type(self) -> str:
        return pulumi.get(self, "index_type")

    @property
    @pulumi.getter(name="indexUrl")
    def index_url(self) -> str:
        return pulumi.get(self, "index_url")


@pulumi.output_type
class GetNexusRepositoryDockerProxyHttpClientResult(dict):
    def __init__(__self__, *,
                 authentications: Sequence['outputs.GetNexusRepositoryDockerProxyHttpClientAuthenticationResult'],
                 auto_block: bool,
                 blocked: bool,
                 connections: Sequence['outputs.GetNexusRepositoryDockerProxyHttpClientConnectionResult']):
        pulumi.set(__self__, "authentications", authentications)
        pulumi.set(__self__, "auto_block", auto_block)
        pulumi.set(__self__, "blocked", blocked)
        pulumi.set(__self__, "connections", connections)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.GetNexusRepositoryDockerProxyHttpClientAuthenticationResult']:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> bool:
        return pulumi.get(self, "auto_block")

    @property
    @pulumi.getter
    def blocked(self) -> bool:
        return pulumi.get(self, "blocked")

    @property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetNexusRepositoryDockerProxyHttpClientConnectionResult']:
        return pulumi.get(self, "connections")


@pulumi.output_type
class GetNexusRepositoryDockerProxyHttpClientAuthenticationResult(dict):
    def __init__(__self__, *,
                 ntlm_domain: str,
                 ntlm_host: str,
                 password: str,
                 type: str,
                 username: str):
        pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        pulumi.set(__self__, "ntlm_host", ntlm_host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> str:
        return pulumi.get(self, "ntlm_domain")

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> str:
        return pulumi.get(self, "ntlm_host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetNexusRepositoryDockerProxyHttpClientConnectionResult(dict):
    def __init__(__self__, *,
                 enable_circular_redirects: bool,
                 enable_cookies: bool,
                 retries: int,
                 timeout: int,
                 use_trust_store: bool,
                 user_agent_suffix: str):
        pulumi.set(__self__, "enable_circular_redirects", enable_circular_redirects)
        pulumi.set(__self__, "enable_cookies", enable_cookies)
        pulumi.set(__self__, "retries", retries)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "use_trust_store", use_trust_store)
        pulumi.set(__self__, "user_agent_suffix", user_agent_suffix)

    @property
    @pulumi.getter(name="enableCircularRedirects")
    def enable_circular_redirects(self) -> bool:
        return pulumi.get(self, "enable_circular_redirects")

    @property
    @pulumi.getter(name="enableCookies")
    def enable_cookies(self) -> bool:
        return pulumi.get(self, "enable_cookies")

    @property
    @pulumi.getter
    def retries(self) -> int:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> bool:
        return pulumi.get(self, "use_trust_store")

    @property
    @pulumi.getter(name="userAgentSuffix")
    def user_agent_suffix(self) -> str:
        return pulumi.get(self, "user_agent_suffix")


@pulumi.output_type
class GetNexusRepositoryDockerProxyNegativeCachResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 ttl: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetNexusRepositoryDockerProxyProxyResult(dict):
    def __init__(__self__, *,
                 content_max_age: int,
                 metadata_max_age: int,
                 remote_url: str):
        pulumi.set(__self__, "content_max_age", content_max_age)
        pulumi.set(__self__, "metadata_max_age", metadata_max_age)
        pulumi.set(__self__, "remote_url", remote_url)

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> int:
        return pulumi.get(self, "content_max_age")

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> int:
        return pulumi.get(self, "metadata_max_age")

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> str:
        return pulumi.get(self, "remote_url")


@pulumi.output_type
class GetNexusRepositoryDockerProxyStorageResult(dict):
    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: bool):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> bool:
        return pulumi.get(self, "strict_content_type_validation")


@pulumi.output_type
class GetNexusRepositoryGroupResult(dict):
    def __init__(__self__, *,
                 member_names: Sequence[str]):
        pulumi.set(__self__, "member_names", member_names)

    @property
    @pulumi.getter(name="memberNames")
    def member_names(self) -> Sequence[str]:
        return pulumi.get(self, "member_names")


@pulumi.output_type
class GetNexusRepositoryHttpClientResult(dict):
    def __init__(__self__, *,
                 authentication: Optional['outputs.GetNexusRepositoryHttpClientAuthenticationResult'] = None,
                 auto_block: Optional[bool] = None,
                 blocked: Optional[bool] = None,
                 connections: Optional[Sequence['outputs.GetNexusRepositoryHttpClientConnectionResult']] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if auto_block is not None:
            pulumi.set(__self__, "auto_block", auto_block)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if connections is not None:
            pulumi.set(__self__, "connections", connections)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.GetNexusRepositoryHttpClientAuthenticationResult']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> Optional[bool]:
        return pulumi.get(self, "auto_block")

    @property
    @pulumi.getter
    def blocked(self) -> Optional[bool]:
        return pulumi.get(self, "blocked")

    @property
    @pulumi.getter
    def connections(self) -> Optional[Sequence['outputs.GetNexusRepositoryHttpClientConnectionResult']]:
        return pulumi.get(self, "connections")


@pulumi.output_type
class GetNexusRepositoryHttpClientAuthenticationResult(dict):
    def __init__(__self__, *,
                 type: str,
                 ntlm_domain: Optional[str] = None,
                 ntlm_host: Optional[str] = None,
                 username: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if ntlm_domain is not None:
            pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        if ntlm_host is not None:
            pulumi.set(__self__, "ntlm_host", ntlm_host)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> Optional[str]:
        return pulumi.get(self, "ntlm_domain")

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> Optional[str]:
        return pulumi.get(self, "ntlm_host")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetNexusRepositoryHttpClientConnectionResult(dict):
    def __init__(__self__, *,
                 retries: Optional[int] = None,
                 timeout: Optional[int] = None):
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def retries(self) -> Optional[int]:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetNexusRepositoryListItemResult(dict):
    def __init__(__self__, *,
                 format: str,
                 name: str,
                 type: str,
                 url: str):
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetNexusRepositoryMavenResult(dict):
    def __init__(__self__, *,
                 layout_policy: Optional[str] = None,
                 version_policy: Optional[str] = None):
        if layout_policy is not None:
            pulumi.set(__self__, "layout_policy", layout_policy)
        if version_policy is not None:
            pulumi.set(__self__, "version_policy", version_policy)

    @property
    @pulumi.getter(name="layoutPolicy")
    def layout_policy(self) -> Optional[str]:
        return pulumi.get(self, "layout_policy")

    @property
    @pulumi.getter(name="versionPolicy")
    def version_policy(self) -> Optional[str]:
        return pulumi.get(self, "version_policy")


@pulumi.output_type
class GetNexusRepositoryNegativeCacheResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ttl: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetNexusRepositoryProxyResult(dict):
    def __init__(__self__, *,
                 remote_url: str,
                 content_max_age: Optional[int] = None,
                 metadata_max_age: Optional[int] = None):
        pulumi.set(__self__, "remote_url", remote_url)
        if content_max_age is not None:
            pulumi.set(__self__, "content_max_age", content_max_age)
        if metadata_max_age is not None:
            pulumi.set(__self__, "metadata_max_age", metadata_max_age)

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> str:
        return pulumi.get(self, "remote_url")

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> Optional[int]:
        return pulumi.get(self, "content_max_age")

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> Optional[int]:
        return pulumi.get(self, "metadata_max_age")


@pulumi.output_type
class GetNexusRepositoryStorageResult(dict):
    def __init__(__self__, *,
                 blob_store_name: Optional[str] = None,
                 strict_content_type_validation: Optional[bool] = None,
                 write_policy: Optional[str] = None):
        if blob_store_name is not None:
            pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        if write_policy is not None:
            pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> Optional[str]:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[bool]:
        return pulumi.get(self, "strict_content_type_validation")

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> Optional[str]:
        return pulumi.get(self, "write_policy")


@pulumi.output_type
class GetNexusRepositoryYumGroupGroupResult(dict):
    def __init__(__self__, *,
                 member_names: Sequence[str]):
        pulumi.set(__self__, "member_names", member_names)

    @property
    @pulumi.getter(name="memberNames")
    def member_names(self) -> Sequence[str]:
        return pulumi.get(self, "member_names")


@pulumi.output_type
class GetNexusRepositoryYumGroupStorageResult(dict):
    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: bool):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> bool:
        return pulumi.get(self, "strict_content_type_validation")


@pulumi.output_type
class GetNexusRepositoryYumGroupYumSigningResult(dict):
    def __init__(__self__, *,
                 keypair: str,
                 passphrase: str):
        pulumi.set(__self__, "keypair", keypair)
        pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def keypair(self) -> str:
        return pulumi.get(self, "keypair")

    @property
    @pulumi.getter
    def passphrase(self) -> str:
        return pulumi.get(self, "passphrase")


@pulumi.output_type
class GetNexusRepositoryYumHostedCleanupResult(dict):
    def __init__(__self__, *,
                 policy_names: Sequence[str]):
        pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[str]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class GetNexusRepositoryYumHostedComponentResult(dict):
    def __init__(__self__, *,
                 proprietary_components: bool):
        pulumi.set(__self__, "proprietary_components", proprietary_components)

    @property
    @pulumi.getter(name="proprietaryComponents")
    def proprietary_components(self) -> bool:
        return pulumi.get(self, "proprietary_components")


@pulumi.output_type
class GetNexusRepositoryYumHostedStorageResult(dict):
    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: bool,
                 write_policy: str):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> bool:
        return pulumi.get(self, "strict_content_type_validation")

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> str:
        return pulumi.get(self, "write_policy")


@pulumi.output_type
class GetNexusRepositoryYumProxyCleanupResult(dict):
    def __init__(__self__, *,
                 policy_names: Sequence[str]):
        pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[str]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class GetNexusRepositoryYumProxyHttpClientResult(dict):
    def __init__(__self__, *,
                 authentications: Sequence['outputs.GetNexusRepositoryYumProxyHttpClientAuthenticationResult'],
                 auto_block: bool,
                 blocked: bool,
                 connections: Sequence['outputs.GetNexusRepositoryYumProxyHttpClientConnectionResult']):
        pulumi.set(__self__, "authentications", authentications)
        pulumi.set(__self__, "auto_block", auto_block)
        pulumi.set(__self__, "blocked", blocked)
        pulumi.set(__self__, "connections", connections)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.GetNexusRepositoryYumProxyHttpClientAuthenticationResult']:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> bool:
        return pulumi.get(self, "auto_block")

    @property
    @pulumi.getter
    def blocked(self) -> bool:
        return pulumi.get(self, "blocked")

    @property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetNexusRepositoryYumProxyHttpClientConnectionResult']:
        return pulumi.get(self, "connections")


@pulumi.output_type
class GetNexusRepositoryYumProxyHttpClientAuthenticationResult(dict):
    def __init__(__self__, *,
                 ntlm_domain: str,
                 ntlm_host: str,
                 password: str,
                 type: str,
                 username: str):
        pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        pulumi.set(__self__, "ntlm_host", ntlm_host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> str:
        return pulumi.get(self, "ntlm_domain")

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> str:
        return pulumi.get(self, "ntlm_host")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetNexusRepositoryYumProxyHttpClientConnectionResult(dict):
    def __init__(__self__, *,
                 enable_circular_redirects: bool,
                 enable_cookies: bool,
                 retries: int,
                 timeout: int,
                 use_trust_store: bool,
                 user_agent_suffix: str):
        pulumi.set(__self__, "enable_circular_redirects", enable_circular_redirects)
        pulumi.set(__self__, "enable_cookies", enable_cookies)
        pulumi.set(__self__, "retries", retries)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "use_trust_store", use_trust_store)
        pulumi.set(__self__, "user_agent_suffix", user_agent_suffix)

    @property
    @pulumi.getter(name="enableCircularRedirects")
    def enable_circular_redirects(self) -> bool:
        return pulumi.get(self, "enable_circular_redirects")

    @property
    @pulumi.getter(name="enableCookies")
    def enable_cookies(self) -> bool:
        return pulumi.get(self, "enable_cookies")

    @property
    @pulumi.getter
    def retries(self) -> int:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> bool:
        return pulumi.get(self, "use_trust_store")

    @property
    @pulumi.getter(name="userAgentSuffix")
    def user_agent_suffix(self) -> str:
        return pulumi.get(self, "user_agent_suffix")


@pulumi.output_type
class GetNexusRepositoryYumProxyNegativeCachResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 ttl: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetNexusRepositoryYumProxyProxyResult(dict):
    def __init__(__self__, *,
                 content_max_age: int,
                 metadata_max_age: int,
                 remote_url: str):
        pulumi.set(__self__, "content_max_age", content_max_age)
        pulumi.set(__self__, "metadata_max_age", metadata_max_age)
        pulumi.set(__self__, "remote_url", remote_url)

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> int:
        return pulumi.get(self, "content_max_age")

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> int:
        return pulumi.get(self, "metadata_max_age")

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> str:
        return pulumi.get(self, "remote_url")


@pulumi.output_type
class GetNexusRepositoryYumProxyStorageResult(dict):
    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: bool):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> bool:
        return pulumi.get(self, "strict_content_type_validation")


@pulumi.output_type
class GetNexusRepositoryYumProxyYumSigningResult(dict):
    def __init__(__self__, *,
                 keypair: str,
                 passphrase: str):
        pulumi.set(__self__, "keypair", keypair)
        pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def keypair(self) -> str:
        return pulumi.get(self, "keypair")

    @property
    @pulumi.getter
    def passphrase(self) -> str:
        return pulumi.get(self, "passphrase")


@pulumi.output_type
class GetNexusSecurityLdapLdapResult(dict):
    def __init__(__self__, *,
                 auth_password: str,
                 auth_realm: str,
                 auth_schema: str,
                 auth_username: str,
                 connection_retry_delay_seconds: int,
                 connection_timeout_seconds: int,
                 group_base_dn: str,
                 group_id_attribute: str,
                 group_member_attribute: str,
                 group_member_format: str,
                 group_object_class: str,
                 group_subtree: str,
                 group_type: str,
                 host: str,
                 id: str,
                 ldap_groups_as_roles: bool,
                 max_incident_count: int,
                 name: str,
                 port: int,
                 protocol: str,
                 search_base: str,
                 use_trust_store: bool,
                 user_base_dn: str,
                 user_email_address_attribute: str,
                 user_id_attribute: str,
                 user_ldap_filter: str,
                 user_member_of_attribute: str,
                 user_object_class: str,
                 user_password_attribute: str,
                 user_real_name_attribute: str,
                 user_subtree: bool):
        pulumi.set(__self__, "auth_password", auth_password)
        pulumi.set(__self__, "auth_realm", auth_realm)
        pulumi.set(__self__, "auth_schema", auth_schema)
        pulumi.set(__self__, "auth_username", auth_username)
        pulumi.set(__self__, "connection_retry_delay_seconds", connection_retry_delay_seconds)
        pulumi.set(__self__, "connection_timeout_seconds", connection_timeout_seconds)
        pulumi.set(__self__, "group_base_dn", group_base_dn)
        pulumi.set(__self__, "group_id_attribute", group_id_attribute)
        pulumi.set(__self__, "group_member_attribute", group_member_attribute)
        pulumi.set(__self__, "group_member_format", group_member_format)
        pulumi.set(__self__, "group_object_class", group_object_class)
        pulumi.set(__self__, "group_subtree", group_subtree)
        pulumi.set(__self__, "group_type", group_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ldap_groups_as_roles", ldap_groups_as_roles)
        pulumi.set(__self__, "max_incident_count", max_incident_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "search_base", search_base)
        pulumi.set(__self__, "use_trust_store", use_trust_store)
        pulumi.set(__self__, "user_base_dn", user_base_dn)
        pulumi.set(__self__, "user_email_address_attribute", user_email_address_attribute)
        pulumi.set(__self__, "user_id_attribute", user_id_attribute)
        pulumi.set(__self__, "user_ldap_filter", user_ldap_filter)
        pulumi.set(__self__, "user_member_of_attribute", user_member_of_attribute)
        pulumi.set(__self__, "user_object_class", user_object_class)
        pulumi.set(__self__, "user_password_attribute", user_password_attribute)
        pulumi.set(__self__, "user_real_name_attribute", user_real_name_attribute)
        pulumi.set(__self__, "user_subtree", user_subtree)

    @property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> str:
        return pulumi.get(self, "auth_password")

    @property
    @pulumi.getter(name="authRealm")
    def auth_realm(self) -> str:
        return pulumi.get(self, "auth_realm")

    @property
    @pulumi.getter(name="authSchema")
    def auth_schema(self) -> str:
        return pulumi.get(self, "auth_schema")

    @property
    @pulumi.getter(name="authUsername")
    def auth_username(self) -> str:
        return pulumi.get(self, "auth_username")

    @property
    @pulumi.getter(name="connectionRetryDelaySeconds")
    def connection_retry_delay_seconds(self) -> int:
        return pulumi.get(self, "connection_retry_delay_seconds")

    @property
    @pulumi.getter(name="connectionTimeoutSeconds")
    def connection_timeout_seconds(self) -> int:
        return pulumi.get(self, "connection_timeout_seconds")

    @property
    @pulumi.getter(name="groupBaseDn")
    def group_base_dn(self) -> str:
        return pulumi.get(self, "group_base_dn")

    @property
    @pulumi.getter(name="groupIdAttribute")
    def group_id_attribute(self) -> str:
        return pulumi.get(self, "group_id_attribute")

    @property
    @pulumi.getter(name="groupMemberAttribute")
    def group_member_attribute(self) -> str:
        return pulumi.get(self, "group_member_attribute")

    @property
    @pulumi.getter(name="groupMemberFormat")
    def group_member_format(self) -> str:
        return pulumi.get(self, "group_member_format")

    @property
    @pulumi.getter(name="groupObjectClass")
    def group_object_class(self) -> str:
        return pulumi.get(self, "group_object_class")

    @property
    @pulumi.getter(name="groupSubtree")
    def group_subtree(self) -> str:
        return pulumi.get(self, "group_subtree")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> str:
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ldapGroupsAsRoles")
    def ldap_groups_as_roles(self) -> bool:
        return pulumi.get(self, "ldap_groups_as_roles")

    @property
    @pulumi.getter(name="maxIncidentCount")
    def max_incident_count(self) -> int:
        return pulumi.get(self, "max_incident_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="searchBase")
    def search_base(self) -> str:
        return pulumi.get(self, "search_base")

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> bool:
        return pulumi.get(self, "use_trust_store")

    @property
    @pulumi.getter(name="userBaseDn")
    def user_base_dn(self) -> str:
        return pulumi.get(self, "user_base_dn")

    @property
    @pulumi.getter(name="userEmailAddressAttribute")
    def user_email_address_attribute(self) -> str:
        return pulumi.get(self, "user_email_address_attribute")

    @property
    @pulumi.getter(name="userIdAttribute")
    def user_id_attribute(self) -> str:
        return pulumi.get(self, "user_id_attribute")

    @property
    @pulumi.getter(name="userLdapFilter")
    def user_ldap_filter(self) -> str:
        return pulumi.get(self, "user_ldap_filter")

    @property
    @pulumi.getter(name="userMemberOfAttribute")
    def user_member_of_attribute(self) -> str:
        return pulumi.get(self, "user_member_of_attribute")

    @property
    @pulumi.getter(name="userObjectClass")
    def user_object_class(self) -> str:
        return pulumi.get(self, "user_object_class")

    @property
    @pulumi.getter(name="userPasswordAttribute")
    def user_password_attribute(self) -> str:
        return pulumi.get(self, "user_password_attribute")

    @property
    @pulumi.getter(name="userRealNameAttribute")
    def user_real_name_attribute(self) -> str:
        return pulumi.get(self, "user_real_name_attribute")

    @property
    @pulumi.getter(name="userSubtree")
    def user_subtree(self) -> bool:
        return pulumi.get(self, "user_subtree")


@pulumi.output_type
class GetNexusSecurityRealmsActiveResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNexusSecurityRealmsAvailableResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class NexusBlobstoreAzureBucketConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "containerName":
            suggest = "container_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusBlobstoreAzureBucketConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusBlobstoreAzureBucketConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusBlobstoreAzureBucketConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: str,
                 authentication: 'outputs.NexusBlobstoreAzureBucketConfigurationAuthentication',
                 container_name: str):
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "container_name", container_name)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.NexusBlobstoreAzureBucketConfigurationAuthentication':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        return pulumi.get(self, "container_name")


@pulumi.output_type
class NexusBlobstoreAzureBucketConfigurationAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationMethod":
            suggest = "authentication_method"
        elif key == "accountKey":
            suggest = "account_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusBlobstoreAzureBucketConfigurationAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusBlobstoreAzureBucketConfigurationAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusBlobstoreAzureBucketConfigurationAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_method: str,
                 account_key: Optional[str] = None):
        pulumi.set(__self__, "authentication_method", authentication_method)
        if account_key is not None:
            pulumi.set(__self__, "account_key", account_key)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> str:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter(name="accountKey")
    def account_key(self) -> Optional[str]:
        return pulumi.get(self, "account_key")


@pulumi.output_type
class NexusBlobstoreAzureSoftQuota(dict):
    def __init__(__self__, *,
                 limit: int,
                 type: str):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class NexusBlobstoreBucketConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advancedBucketConnection":
            suggest = "advanced_bucket_connection"
        elif key == "bucketSecurity":
            suggest = "bucket_security"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusBlobstoreBucketConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusBlobstoreBucketConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusBlobstoreBucketConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: 'outputs.NexusBlobstoreBucketConfigurationBucket',
                 advanced_bucket_connection: Optional['outputs.NexusBlobstoreBucketConfigurationAdvancedBucketConnection'] = None,
                 bucket_security: Optional['outputs.NexusBlobstoreBucketConfigurationBucketSecurity'] = None,
                 encryption: Optional['outputs.NexusBlobstoreBucketConfigurationEncryption'] = None):
        pulumi.set(__self__, "bucket", bucket)
        if advanced_bucket_connection is not None:
            pulumi.set(__self__, "advanced_bucket_connection", advanced_bucket_connection)
        if bucket_security is not None:
            pulumi.set(__self__, "bucket_security", bucket_security)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)

    @property
    @pulumi.getter
    def bucket(self) -> 'outputs.NexusBlobstoreBucketConfigurationBucket':
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="advancedBucketConnection")
    def advanced_bucket_connection(self) -> Optional['outputs.NexusBlobstoreBucketConfigurationAdvancedBucketConnection']:
        return pulumi.get(self, "advanced_bucket_connection")

    @property
    @pulumi.getter(name="bucketSecurity")
    def bucket_security(self) -> Optional['outputs.NexusBlobstoreBucketConfigurationBucketSecurity']:
        return pulumi.get(self, "bucket_security")

    @property
    @pulumi.getter
    def encryption(self) -> Optional['outputs.NexusBlobstoreBucketConfigurationEncryption']:
        return pulumi.get(self, "encryption")


@pulumi.output_type
class NexusBlobstoreBucketConfigurationAdvancedBucketConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forcePathStyle":
            suggest = "force_path_style"
        elif key == "signerType":
            suggest = "signer_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusBlobstoreBucketConfigurationAdvancedBucketConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusBlobstoreBucketConfigurationAdvancedBucketConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusBlobstoreBucketConfigurationAdvancedBucketConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: Optional[str] = None,
                 force_path_style: Optional[bool] = None,
                 signer_type: Optional[str] = None):
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if force_path_style is not None:
            pulumi.set(__self__, "force_path_style", force_path_style)
        if signer_type is not None:
            pulumi.set(__self__, "signer_type", signer_type)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="forcePathStyle")
    def force_path_style(self) -> Optional[bool]:
        return pulumi.get(self, "force_path_style")

    @property
    @pulumi.getter(name="signerType")
    def signer_type(self) -> Optional[str]:
        return pulumi.get(self, "signer_type")


@pulumi.output_type
class NexusBlobstoreBucketConfigurationBucket(dict):
    def __init__(__self__, *,
                 name: str,
                 region: str,
                 expiration: Optional[int] = None,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def expiration(self) -> Optional[int]:
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class NexusBlobstoreBucketConfigurationBucketSecurity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "sessionToken":
            suggest = "session_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusBlobstoreBucketConfigurationBucketSecurity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusBlobstoreBucketConfigurationBucketSecurity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusBlobstoreBucketConfigurationBucketSecurity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key_id: str,
                 secret_access_key: str,
                 role: Optional[str] = None,
                 session_token: Optional[str] = None):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if session_token is not None:
            pulumi.set(__self__, "session_token", session_token)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[str]:
        return pulumi.get(self, "session_token")


@pulumi.output_type
class NexusBlobstoreBucketConfigurationEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionKey":
            suggest = "encryption_key"
        elif key == "encryptionType":
            suggest = "encryption_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusBlobstoreBucketConfigurationEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusBlobstoreBucketConfigurationEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusBlobstoreBucketConfigurationEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_key: Optional[str] = None,
                 encryption_type: Optional[str] = None):
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[str]:
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")


@pulumi.output_type
class NexusBlobstoreFileSoftQuota(dict):
    def __init__(__self__, *,
                 limit: int,
                 type: str):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class NexusBlobstoreGroupSoftQuota(dict):
    def __init__(__self__, *,
                 limit: int,
                 type: str):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class NexusBlobstoreS3BucketConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advancedBucketConnection":
            suggest = "advanced_bucket_connection"
        elif key == "bucketSecurity":
            suggest = "bucket_security"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusBlobstoreS3BucketConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusBlobstoreS3BucketConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusBlobstoreS3BucketConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: 'outputs.NexusBlobstoreS3BucketConfigurationBucket',
                 advanced_bucket_connection: Optional['outputs.NexusBlobstoreS3BucketConfigurationAdvancedBucketConnection'] = None,
                 bucket_security: Optional['outputs.NexusBlobstoreS3BucketConfigurationBucketSecurity'] = None,
                 encryption: Optional['outputs.NexusBlobstoreS3BucketConfigurationEncryption'] = None):
        pulumi.set(__self__, "bucket", bucket)
        if advanced_bucket_connection is not None:
            pulumi.set(__self__, "advanced_bucket_connection", advanced_bucket_connection)
        if bucket_security is not None:
            pulumi.set(__self__, "bucket_security", bucket_security)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)

    @property
    @pulumi.getter
    def bucket(self) -> 'outputs.NexusBlobstoreS3BucketConfigurationBucket':
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="advancedBucketConnection")
    def advanced_bucket_connection(self) -> Optional['outputs.NexusBlobstoreS3BucketConfigurationAdvancedBucketConnection']:
        return pulumi.get(self, "advanced_bucket_connection")

    @property
    @pulumi.getter(name="bucketSecurity")
    def bucket_security(self) -> Optional['outputs.NexusBlobstoreS3BucketConfigurationBucketSecurity']:
        return pulumi.get(self, "bucket_security")

    @property
    @pulumi.getter
    def encryption(self) -> Optional['outputs.NexusBlobstoreS3BucketConfigurationEncryption']:
        return pulumi.get(self, "encryption")


@pulumi.output_type
class NexusBlobstoreS3BucketConfigurationAdvancedBucketConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forcePathStyle":
            suggest = "force_path_style"
        elif key == "maxConnectionPoolSize":
            suggest = "max_connection_pool_size"
        elif key == "signerType":
            suggest = "signer_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusBlobstoreS3BucketConfigurationAdvancedBucketConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusBlobstoreS3BucketConfigurationAdvancedBucketConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusBlobstoreS3BucketConfigurationAdvancedBucketConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: Optional[str] = None,
                 force_path_style: Optional[bool] = None,
                 max_connection_pool_size: Optional[int] = None,
                 signer_type: Optional[str] = None):
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if force_path_style is not None:
            pulumi.set(__self__, "force_path_style", force_path_style)
        if max_connection_pool_size is not None:
            pulumi.set(__self__, "max_connection_pool_size", max_connection_pool_size)
        if signer_type is not None:
            pulumi.set(__self__, "signer_type", signer_type)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="forcePathStyle")
    def force_path_style(self) -> Optional[bool]:
        return pulumi.get(self, "force_path_style")

    @property
    @pulumi.getter(name="maxConnectionPoolSize")
    def max_connection_pool_size(self) -> Optional[int]:
        return pulumi.get(self, "max_connection_pool_size")

    @property
    @pulumi.getter(name="signerType")
    def signer_type(self) -> Optional[str]:
        return pulumi.get(self, "signer_type")


@pulumi.output_type
class NexusBlobstoreS3BucketConfigurationBucket(dict):
    def __init__(__self__, *,
                 expiration: int,
                 name: str,
                 region: str,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "expiration", expiration)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def expiration(self) -> int:
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class NexusBlobstoreS3BucketConfigurationBucketSecurity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "sessionToken":
            suggest = "session_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusBlobstoreS3BucketConfigurationBucketSecurity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusBlobstoreS3BucketConfigurationBucketSecurity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusBlobstoreS3BucketConfigurationBucketSecurity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key_id: Optional[str] = None,
                 role: Optional[str] = None,
                 secret_access_key: Optional[str] = None,
                 session_token: Optional[str] = None):
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if session_token is not None:
            pulumi.set(__self__, "session_token", session_token)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[str]:
        return pulumi.get(self, "session_token")


@pulumi.output_type
class NexusBlobstoreS3BucketConfigurationEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionKey":
            suggest = "encryption_key"
        elif key == "encryptionType":
            suggest = "encryption_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusBlobstoreS3BucketConfigurationEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusBlobstoreS3BucketConfigurationEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusBlobstoreS3BucketConfigurationEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_key: Optional[str] = None,
                 encryption_type: Optional[str] = None):
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[str]:
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_type")


@pulumi.output_type
class NexusBlobstoreS3SoftQuota(dict):
    def __init__(__self__, *,
                 limit: int,
                 type: str):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class NexusBlobstoreSoftQuota(dict):
    def __init__(__self__, *,
                 limit: int,
                 type: str):
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class NexusRepositoryApt(dict):
    def __init__(__self__, *,
                 distribution: str,
                 flat: Optional[bool] = None):
        pulumi.set(__self__, "distribution", distribution)
        if flat is not None:
            pulumi.set(__self__, "flat", flat)

    @property
    @pulumi.getter
    def distribution(self) -> str:
        return pulumi.get(self, "distribution")

    @property
    @pulumi.getter
    def flat(self) -> Optional[bool]:
        return pulumi.get(self, "flat")


@pulumi.output_type
class NexusRepositoryAptHostedCleanup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyNames":
            suggest = "policy_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryAptHostedCleanup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryAptHostedCleanup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryAptHostedCleanup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_names: Optional[Sequence[str]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class NexusRepositoryAptHostedComponent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "proprietaryComponents":
            suggest = "proprietary_components"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryAptHostedComponent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryAptHostedComponent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryAptHostedComponent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 proprietary_components: bool):
        pulumi.set(__self__, "proprietary_components", proprietary_components)

    @property
    @pulumi.getter(name="proprietaryComponents")
    def proprietary_components(self) -> bool:
        return pulumi.get(self, "proprietary_components")


@pulumi.output_type
class NexusRepositoryAptHostedSigning(dict):
    def __init__(__self__, *,
                 keypair: str,
                 passphrase: Optional[str] = None):
        pulumi.set(__self__, "keypair", keypair)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def keypair(self) -> str:
        return pulumi.get(self, "keypair")

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        return pulumi.get(self, "passphrase")


@pulumi.output_type
class NexusRepositoryAptHostedStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blobStoreName":
            suggest = "blob_store_name"
        elif key == "strictContentTypeValidation":
            suggest = "strict_content_type_validation"
        elif key == "writePolicy":
            suggest = "write_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryAptHostedStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryAptHostedStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryAptHostedStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: bool,
                 write_policy: Optional[str] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        if write_policy is not None:
            pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> bool:
        return pulumi.get(self, "strict_content_type_validation")

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> Optional[str]:
        return pulumi.get(self, "write_policy")


@pulumi.output_type
class NexusRepositoryAptProxyCleanup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyNames":
            suggest = "policy_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryAptProxyCleanup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryAptProxyCleanup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryAptProxyCleanup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_names: Optional[Sequence[str]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class NexusRepositoryAptProxyHttpClient(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoBlock":
            suggest = "auto_block"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryAptProxyHttpClient. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryAptProxyHttpClient.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryAptProxyHttpClient.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional['outputs.NexusRepositoryAptProxyHttpClientAuthentication'] = None,
                 auto_block: Optional[bool] = None,
                 blocked: Optional[bool] = None,
                 connection: Optional['outputs.NexusRepositoryAptProxyHttpClientConnection'] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if auto_block is not None:
            pulumi.set(__self__, "auto_block", auto_block)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.NexusRepositoryAptProxyHttpClientAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> Optional[bool]:
        return pulumi.get(self, "auto_block")

    @property
    @pulumi.getter
    def blocked(self) -> Optional[bool]:
        return pulumi.get(self, "blocked")

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.NexusRepositoryAptProxyHttpClientConnection']:
        return pulumi.get(self, "connection")


@pulumi.output_type
class NexusRepositoryAptProxyHttpClientAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ntlmDomain":
            suggest = "ntlm_domain"
        elif key == "ntlmHost":
            suggest = "ntlm_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryAptProxyHttpClientAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryAptProxyHttpClientAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryAptProxyHttpClientAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 ntlm_domain: Optional[str] = None,
                 ntlm_host: Optional[str] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if ntlm_domain is not None:
            pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        if ntlm_host is not None:
            pulumi.set(__self__, "ntlm_host", ntlm_host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> Optional[str]:
        return pulumi.get(self, "ntlm_domain")

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> Optional[str]:
        return pulumi.get(self, "ntlm_host")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class NexusRepositoryAptProxyHttpClientConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableCircularRedirects":
            suggest = "enable_circular_redirects"
        elif key == "enableCookies":
            suggest = "enable_cookies"
        elif key == "useTrustStore":
            suggest = "use_trust_store"
        elif key == "userAgentSuffix":
            suggest = "user_agent_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryAptProxyHttpClientConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryAptProxyHttpClientConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryAptProxyHttpClientConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_circular_redirects: Optional[bool] = None,
                 enable_cookies: Optional[bool] = None,
                 retries: Optional[int] = None,
                 timeout: Optional[int] = None,
                 use_trust_store: Optional[bool] = None,
                 user_agent_suffix: Optional[str] = None):
        if enable_circular_redirects is not None:
            pulumi.set(__self__, "enable_circular_redirects", enable_circular_redirects)
        if enable_cookies is not None:
            pulumi.set(__self__, "enable_cookies", enable_cookies)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if use_trust_store is not None:
            pulumi.set(__self__, "use_trust_store", use_trust_store)
        if user_agent_suffix is not None:
            pulumi.set(__self__, "user_agent_suffix", user_agent_suffix)

    @property
    @pulumi.getter(name="enableCircularRedirects")
    def enable_circular_redirects(self) -> Optional[bool]:
        return pulumi.get(self, "enable_circular_redirects")

    @property
    @pulumi.getter(name="enableCookies")
    def enable_cookies(self) -> Optional[bool]:
        return pulumi.get(self, "enable_cookies")

    @property
    @pulumi.getter
    def retries(self) -> Optional[int]:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> Optional[bool]:
        return pulumi.get(self, "use_trust_store")

    @property
    @pulumi.getter(name="userAgentSuffix")
    def user_agent_suffix(self) -> Optional[str]:
        return pulumi.get(self, "user_agent_suffix")


@pulumi.output_type
class NexusRepositoryAptProxyNegativeCache(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ttl: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class NexusRepositoryAptProxyProxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "remoteUrl":
            suggest = "remote_url"
        elif key == "contentMaxAge":
            suggest = "content_max_age"
        elif key == "metadataMaxAge":
            suggest = "metadata_max_age"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryAptProxyProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryAptProxyProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryAptProxyProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 remote_url: str,
                 content_max_age: Optional[int] = None,
                 metadata_max_age: Optional[int] = None):
        pulumi.set(__self__, "remote_url", remote_url)
        if content_max_age is not None:
            pulumi.set(__self__, "content_max_age", content_max_age)
        if metadata_max_age is not None:
            pulumi.set(__self__, "metadata_max_age", metadata_max_age)

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> str:
        return pulumi.get(self, "remote_url")

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> Optional[int]:
        return pulumi.get(self, "content_max_age")

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> Optional[int]:
        return pulumi.get(self, "metadata_max_age")


@pulumi.output_type
class NexusRepositoryAptProxyStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blobStoreName":
            suggest = "blob_store_name"
        elif key == "strictContentTypeValidation":
            suggest = "strict_content_type_validation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryAptProxyStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryAptProxyStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryAptProxyStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: Optional[bool] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[bool]:
        return pulumi.get(self, "strict_content_type_validation")


@pulumi.output_type
class NexusRepositoryAptSigning(dict):
    def __init__(__self__, *,
                 keypair: str,
                 passphrase: str):
        pulumi.set(__self__, "keypair", keypair)
        pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def keypair(self) -> str:
        return pulumi.get(self, "keypair")

    @property
    @pulumi.getter
    def passphrase(self) -> str:
        return pulumi.get(self, "passphrase")


@pulumi.output_type
class NexusRepositoryBower(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rewritePackageUrls":
            suggest = "rewrite_package_urls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryBower. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryBower.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryBower.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rewrite_package_urls: Optional[bool] = None):
        if rewrite_package_urls is not None:
            pulumi.set(__self__, "rewrite_package_urls", rewrite_package_urls)

    @property
    @pulumi.getter(name="rewritePackageUrls")
    def rewrite_package_urls(self) -> Optional[bool]:
        return pulumi.get(self, "rewrite_package_urls")


@pulumi.output_type
class NexusRepositoryCleanup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyNames":
            suggest = "policy_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryCleanup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryCleanup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryCleanup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_names: Optional[Sequence[str]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class NexusRepositoryDocker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceBasicAuth":
            suggest = "force_basic_auth"
        elif key == "httpPort":
            suggest = "http_port"
        elif key == "httpsPort":
            suggest = "https_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDocker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDocker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDocker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_basic_auth: Optional[bool] = None,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None,
                 v1enabled: Optional[bool] = None):
        if force_basic_auth is not None:
            pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if v1enabled is not None:
            pulumi.set(__self__, "v1enabled", v1enabled)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> Optional[bool]:
        return pulumi.get(self, "force_basic_auth")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter
    def v1enabled(self) -> Optional[bool]:
        return pulumi.get(self, "v1enabled")


@pulumi.output_type
class NexusRepositoryDockerGroupDocker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceBasicAuth":
            suggest = "force_basic_auth"
        elif key == "v1Enabled":
            suggest = "v1_enabled"
        elif key == "httpPort":
            suggest = "http_port"
        elif key == "httpsPort":
            suggest = "https_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerGroupDocker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerGroupDocker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerGroupDocker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_basic_auth: bool,
                 v1_enabled: bool,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None):
        pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        pulumi.set(__self__, "v1_enabled", v1_enabled)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> bool:
        return pulumi.get(self, "force_basic_auth")

    @property
    @pulumi.getter(name="v1Enabled")
    def v1_enabled(self) -> bool:
        return pulumi.get(self, "v1_enabled")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")


@pulumi.output_type
class NexusRepositoryDockerGroupGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memberNames":
            suggest = "member_names"
        elif key == "writableMember":
            suggest = "writable_member"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerGroupGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerGroupGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerGroupGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 member_names: Sequence[str],
                 writable_member: Optional[str] = None):
        pulumi.set(__self__, "member_names", member_names)
        if writable_member is not None:
            pulumi.set(__self__, "writable_member", writable_member)

    @property
    @pulumi.getter(name="memberNames")
    def member_names(self) -> Sequence[str]:
        return pulumi.get(self, "member_names")

    @property
    @pulumi.getter(name="writableMember")
    def writable_member(self) -> Optional[str]:
        return pulumi.get(self, "writable_member")


@pulumi.output_type
class NexusRepositoryDockerGroupStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blobStoreName":
            suggest = "blob_store_name"
        elif key == "strictContentTypeValidation":
            suggest = "strict_content_type_validation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerGroupStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerGroupStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerGroupStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: Optional[bool] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[bool]:
        return pulumi.get(self, "strict_content_type_validation")


@pulumi.output_type
class NexusRepositoryDockerHostedCleanup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyNames":
            suggest = "policy_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerHostedCleanup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerHostedCleanup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerHostedCleanup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_names: Optional[Sequence[str]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class NexusRepositoryDockerHostedComponent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "proprietaryComponents":
            suggest = "proprietary_components"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerHostedComponent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerHostedComponent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerHostedComponent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 proprietary_components: bool):
        pulumi.set(__self__, "proprietary_components", proprietary_components)

    @property
    @pulumi.getter(name="proprietaryComponents")
    def proprietary_components(self) -> bool:
        return pulumi.get(self, "proprietary_components")


@pulumi.output_type
class NexusRepositoryDockerHostedDocker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceBasicAuth":
            suggest = "force_basic_auth"
        elif key == "v1Enabled":
            suggest = "v1_enabled"
        elif key == "httpPort":
            suggest = "http_port"
        elif key == "httpsPort":
            suggest = "https_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerHostedDocker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerHostedDocker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerHostedDocker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_basic_auth: bool,
                 v1_enabled: bool,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None):
        pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        pulumi.set(__self__, "v1_enabled", v1_enabled)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> bool:
        return pulumi.get(self, "force_basic_auth")

    @property
    @pulumi.getter(name="v1Enabled")
    def v1_enabled(self) -> bool:
        return pulumi.get(self, "v1_enabled")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")


@pulumi.output_type
class NexusRepositoryDockerHostedStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blobStoreName":
            suggest = "blob_store_name"
        elif key == "strictContentTypeValidation":
            suggest = "strict_content_type_validation"
        elif key == "writePolicy":
            suggest = "write_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerHostedStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerHostedStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerHostedStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: bool,
                 write_policy: Optional[str] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        if write_policy is not None:
            pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> bool:
        return pulumi.get(self, "strict_content_type_validation")

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> Optional[str]:
        return pulumi.get(self, "write_policy")


@pulumi.output_type
class NexusRepositoryDockerProxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexType":
            suggest = "index_type"
        elif key == "indexUrl":
            suggest = "index_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index_type: str,
                 index_url: Optional[str] = None):
        pulumi.set(__self__, "index_type", index_type)
        if index_url is not None:
            pulumi.set(__self__, "index_url", index_url)

    @property
    @pulumi.getter(name="indexType")
    def index_type(self) -> str:
        return pulumi.get(self, "index_type")

    @property
    @pulumi.getter(name="indexUrl")
    def index_url(self) -> Optional[str]:
        return pulumi.get(self, "index_url")


@pulumi.output_type
class NexusRepositoryDockerProxyCleanup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyNames":
            suggest = "policy_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerProxyCleanup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerProxyCleanup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerProxyCleanup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_names: Optional[Sequence[str]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class NexusRepositoryDockerProxyDocker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forceBasicAuth":
            suggest = "force_basic_auth"
        elif key == "v1Enabled":
            suggest = "v1_enabled"
        elif key == "httpPort":
            suggest = "http_port"
        elif key == "httpsPort":
            suggest = "https_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerProxyDocker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerProxyDocker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerProxyDocker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 force_basic_auth: bool,
                 v1_enabled: bool,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None):
        pulumi.set(__self__, "force_basic_auth", force_basic_auth)
        pulumi.set(__self__, "v1_enabled", v1_enabled)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)

    @property
    @pulumi.getter(name="forceBasicAuth")
    def force_basic_auth(self) -> bool:
        return pulumi.get(self, "force_basic_auth")

    @property
    @pulumi.getter(name="v1Enabled")
    def v1_enabled(self) -> bool:
        return pulumi.get(self, "v1_enabled")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")


@pulumi.output_type
class NexusRepositoryDockerProxyDockerProxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexType":
            suggest = "index_type"
        elif key == "indexUrl":
            suggest = "index_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerProxyDockerProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerProxyDockerProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerProxyDockerProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index_type: str,
                 index_url: Optional[str] = None):
        pulumi.set(__self__, "index_type", index_type)
        if index_url is not None:
            pulumi.set(__self__, "index_url", index_url)

    @property
    @pulumi.getter(name="indexType")
    def index_type(self) -> str:
        return pulumi.get(self, "index_type")

    @property
    @pulumi.getter(name="indexUrl")
    def index_url(self) -> Optional[str]:
        return pulumi.get(self, "index_url")


@pulumi.output_type
class NexusRepositoryDockerProxyHttpClient(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoBlock":
            suggest = "auto_block"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerProxyHttpClient. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerProxyHttpClient.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerProxyHttpClient.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional['outputs.NexusRepositoryDockerProxyHttpClientAuthentication'] = None,
                 auto_block: Optional[bool] = None,
                 blocked: Optional[bool] = None,
                 connection: Optional['outputs.NexusRepositoryDockerProxyHttpClientConnection'] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if auto_block is not None:
            pulumi.set(__self__, "auto_block", auto_block)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.NexusRepositoryDockerProxyHttpClientAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> Optional[bool]:
        return pulumi.get(self, "auto_block")

    @property
    @pulumi.getter
    def blocked(self) -> Optional[bool]:
        return pulumi.get(self, "blocked")

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.NexusRepositoryDockerProxyHttpClientConnection']:
        return pulumi.get(self, "connection")


@pulumi.output_type
class NexusRepositoryDockerProxyHttpClientAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ntlmDomain":
            suggest = "ntlm_domain"
        elif key == "ntlmHost":
            suggest = "ntlm_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerProxyHttpClientAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerProxyHttpClientAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerProxyHttpClientAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 ntlm_domain: Optional[str] = None,
                 ntlm_host: Optional[str] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if ntlm_domain is not None:
            pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        if ntlm_host is not None:
            pulumi.set(__self__, "ntlm_host", ntlm_host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> Optional[str]:
        return pulumi.get(self, "ntlm_domain")

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> Optional[str]:
        return pulumi.get(self, "ntlm_host")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class NexusRepositoryDockerProxyHttpClientConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableCircularRedirects":
            suggest = "enable_circular_redirects"
        elif key == "enableCookies":
            suggest = "enable_cookies"
        elif key == "useTrustStore":
            suggest = "use_trust_store"
        elif key == "userAgentSuffix":
            suggest = "user_agent_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerProxyHttpClientConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerProxyHttpClientConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerProxyHttpClientConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_circular_redirects: Optional[bool] = None,
                 enable_cookies: Optional[bool] = None,
                 retries: Optional[int] = None,
                 timeout: Optional[int] = None,
                 use_trust_store: Optional[bool] = None,
                 user_agent_suffix: Optional[str] = None):
        if enable_circular_redirects is not None:
            pulumi.set(__self__, "enable_circular_redirects", enable_circular_redirects)
        if enable_cookies is not None:
            pulumi.set(__self__, "enable_cookies", enable_cookies)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if use_trust_store is not None:
            pulumi.set(__self__, "use_trust_store", use_trust_store)
        if user_agent_suffix is not None:
            pulumi.set(__self__, "user_agent_suffix", user_agent_suffix)

    @property
    @pulumi.getter(name="enableCircularRedirects")
    def enable_circular_redirects(self) -> Optional[bool]:
        return pulumi.get(self, "enable_circular_redirects")

    @property
    @pulumi.getter(name="enableCookies")
    def enable_cookies(self) -> Optional[bool]:
        return pulumi.get(self, "enable_cookies")

    @property
    @pulumi.getter
    def retries(self) -> Optional[int]:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> Optional[bool]:
        return pulumi.get(self, "use_trust_store")

    @property
    @pulumi.getter(name="userAgentSuffix")
    def user_agent_suffix(self) -> Optional[str]:
        return pulumi.get(self, "user_agent_suffix")


@pulumi.output_type
class NexusRepositoryDockerProxyNegativeCache(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ttl: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class NexusRepositoryDockerProxyProxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "remoteUrl":
            suggest = "remote_url"
        elif key == "contentMaxAge":
            suggest = "content_max_age"
        elif key == "metadataMaxAge":
            suggest = "metadata_max_age"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerProxyProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerProxyProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerProxyProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 remote_url: str,
                 content_max_age: Optional[int] = None,
                 metadata_max_age: Optional[int] = None):
        pulumi.set(__self__, "remote_url", remote_url)
        if content_max_age is not None:
            pulumi.set(__self__, "content_max_age", content_max_age)
        if metadata_max_age is not None:
            pulumi.set(__self__, "metadata_max_age", metadata_max_age)

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> str:
        return pulumi.get(self, "remote_url")

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> Optional[int]:
        return pulumi.get(self, "content_max_age")

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> Optional[int]:
        return pulumi.get(self, "metadata_max_age")


@pulumi.output_type
class NexusRepositoryDockerProxyStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blobStoreName":
            suggest = "blob_store_name"
        elif key == "strictContentTypeValidation":
            suggest = "strict_content_type_validation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryDockerProxyStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryDockerProxyStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryDockerProxyStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: Optional[bool] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[bool]:
        return pulumi.get(self, "strict_content_type_validation")


@pulumi.output_type
class NexusRepositoryGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memberNames":
            suggest = "member_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 member_names: Sequence[str]):
        pulumi.set(__self__, "member_names", member_names)

    @property
    @pulumi.getter(name="memberNames")
    def member_names(self) -> Sequence[str]:
        return pulumi.get(self, "member_names")


@pulumi.output_type
class NexusRepositoryHttpClient(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoBlock":
            suggest = "auto_block"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryHttpClient. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryHttpClient.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryHttpClient.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional['outputs.NexusRepositoryHttpClientAuthentication'] = None,
                 auto_block: Optional[bool] = None,
                 blocked: Optional[bool] = None,
                 connection: Optional['outputs.NexusRepositoryHttpClientConnection'] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if auto_block is not None:
            pulumi.set(__self__, "auto_block", auto_block)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.NexusRepositoryHttpClientAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> Optional[bool]:
        return pulumi.get(self, "auto_block")

    @property
    @pulumi.getter
    def blocked(self) -> Optional[bool]:
        return pulumi.get(self, "blocked")

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.NexusRepositoryHttpClientConnection']:
        return pulumi.get(self, "connection")


@pulumi.output_type
class NexusRepositoryHttpClientAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ntlmDomain":
            suggest = "ntlm_domain"
        elif key == "ntlmHost":
            suggest = "ntlm_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryHttpClientAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryHttpClientAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryHttpClientAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ntlm_domain: Optional[str] = None,
                 ntlm_host: Optional[str] = None,
                 password: Optional[str] = None,
                 type: Optional[str] = None,
                 username: Optional[str] = None):
        if ntlm_domain is not None:
            pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        if ntlm_host is not None:
            pulumi.set(__self__, "ntlm_host", ntlm_host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> Optional[str]:
        return pulumi.get(self, "ntlm_domain")

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> Optional[str]:
        return pulumi.get(self, "ntlm_host")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class NexusRepositoryHttpClientConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableCookies":
            suggest = "enable_cookies"
        elif key == "useTrustStore":
            suggest = "use_trust_store"
        elif key == "userAgentSuffix":
            suggest = "user_agent_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryHttpClientConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryHttpClientConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryHttpClientConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_cookies: Optional[bool] = None,
                 retries: Optional[int] = None,
                 timeout: Optional[int] = None,
                 use_trust_store: Optional[bool] = None,
                 user_agent_suffix: Optional[str] = None):
        if enable_cookies is not None:
            pulumi.set(__self__, "enable_cookies", enable_cookies)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if use_trust_store is not None:
            pulumi.set(__self__, "use_trust_store", use_trust_store)
        if user_agent_suffix is not None:
            pulumi.set(__self__, "user_agent_suffix", user_agent_suffix)

    @property
    @pulumi.getter(name="enableCookies")
    def enable_cookies(self) -> Optional[bool]:
        return pulumi.get(self, "enable_cookies")

    @property
    @pulumi.getter
    def retries(self) -> Optional[int]:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> Optional[bool]:
        return pulumi.get(self, "use_trust_store")

    @property
    @pulumi.getter(name="userAgentSuffix")
    def user_agent_suffix(self) -> Optional[str]:
        return pulumi.get(self, "user_agent_suffix")


@pulumi.output_type
class NexusRepositoryMaven(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "layoutPolicy":
            suggest = "layout_policy"
        elif key == "versionPolicy":
            suggest = "version_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryMaven. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryMaven.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryMaven.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 layout_policy: Optional[str] = None,
                 version_policy: Optional[str] = None):
        if layout_policy is not None:
            pulumi.set(__self__, "layout_policy", layout_policy)
        if version_policy is not None:
            pulumi.set(__self__, "version_policy", version_policy)

    @property
    @pulumi.getter(name="layoutPolicy")
    def layout_policy(self) -> Optional[str]:
        return pulumi.get(self, "layout_policy")

    @property
    @pulumi.getter(name="versionPolicy")
    def version_policy(self) -> Optional[str]:
        return pulumi.get(self, "version_policy")


@pulumi.output_type
class NexusRepositoryMavenHostedCleanup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyNames":
            suggest = "policy_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryMavenHostedCleanup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryMavenHostedCleanup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryMavenHostedCleanup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_names: Optional[Sequence[str]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class NexusRepositoryMavenHostedComponent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "proprietaryComponents":
            suggest = "proprietary_components"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryMavenHostedComponent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryMavenHostedComponent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryMavenHostedComponent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 proprietary_components: bool):
        pulumi.set(__self__, "proprietary_components", proprietary_components)

    @property
    @pulumi.getter(name="proprietaryComponents")
    def proprietary_components(self) -> bool:
        return pulumi.get(self, "proprietary_components")


@pulumi.output_type
class NexusRepositoryMavenHostedMaven(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentDisposition":
            suggest = "content_disposition"
        elif key == "layoutPolicy":
            suggest = "layout_policy"
        elif key == "versionPolicy":
            suggest = "version_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryMavenHostedMaven. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryMavenHostedMaven.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryMavenHostedMaven.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_disposition: Optional[str] = None,
                 layout_policy: Optional[str] = None,
                 version_policy: Optional[str] = None):
        if content_disposition is not None:
            pulumi.set(__self__, "content_disposition", content_disposition)
        if layout_policy is not None:
            pulumi.set(__self__, "layout_policy", layout_policy)
        if version_policy is not None:
            pulumi.set(__self__, "version_policy", version_policy)

    @property
    @pulumi.getter(name="contentDisposition")
    def content_disposition(self) -> Optional[str]:
        return pulumi.get(self, "content_disposition")

    @property
    @pulumi.getter(name="layoutPolicy")
    def layout_policy(self) -> Optional[str]:
        return pulumi.get(self, "layout_policy")

    @property
    @pulumi.getter(name="versionPolicy")
    def version_policy(self) -> Optional[str]:
        return pulumi.get(self, "version_policy")


@pulumi.output_type
class NexusRepositoryMavenHostedStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blobStoreName":
            suggest = "blob_store_name"
        elif key == "strictContentTypeValidation":
            suggest = "strict_content_type_validation"
        elif key == "writePolicy":
            suggest = "write_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryMavenHostedStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryMavenHostedStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryMavenHostedStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: bool,
                 write_policy: Optional[str] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        if write_policy is not None:
            pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> bool:
        return pulumi.get(self, "strict_content_type_validation")

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> Optional[str]:
        return pulumi.get(self, "write_policy")


@pulumi.output_type
class NexusRepositoryNegativeCache(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ttl: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class NexusRepositoryNugetProxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryCacheItemMaxAge":
            suggest = "query_cache_item_max_age"
        elif key == "nugetVersion":
            suggest = "nuget_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryNugetProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryNugetProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryNugetProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query_cache_item_max_age: int,
                 nuget_version: Optional[str] = None):
        pulumi.set(__self__, "query_cache_item_max_age", query_cache_item_max_age)
        if nuget_version is not None:
            pulumi.set(__self__, "nuget_version", nuget_version)

    @property
    @pulumi.getter(name="queryCacheItemMaxAge")
    def query_cache_item_max_age(self) -> int:
        return pulumi.get(self, "query_cache_item_max_age")

    @property
    @pulumi.getter(name="nugetVersion")
    def nuget_version(self) -> Optional[str]:
        return pulumi.get(self, "nuget_version")


@pulumi.output_type
class NexusRepositoryProxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentMaxAge":
            suggest = "content_max_age"
        elif key == "metadataMaxAge":
            suggest = "metadata_max_age"
        elif key == "remoteUrl":
            suggest = "remote_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_max_age: Optional[int] = None,
                 metadata_max_age: Optional[int] = None,
                 remote_url: Optional[str] = None):
        if content_max_age is not None:
            pulumi.set(__self__, "content_max_age", content_max_age)
        if metadata_max_age is not None:
            pulumi.set(__self__, "metadata_max_age", metadata_max_age)
        if remote_url is not None:
            pulumi.set(__self__, "remote_url", remote_url)

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> Optional[int]:
        return pulumi.get(self, "content_max_age")

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> Optional[int]:
        return pulumi.get(self, "metadata_max_age")

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> Optional[str]:
        return pulumi.get(self, "remote_url")


@pulumi.output_type
class NexusRepositoryStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blobStoreName":
            suggest = "blob_store_name"
        elif key == "strictContentTypeValidation":
            suggest = "strict_content_type_validation"
        elif key == "writePolicy":
            suggest = "write_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blob_store_name: Optional[str] = None,
                 strict_content_type_validation: Optional[bool] = None,
                 write_policy: Optional[str] = None):
        if blob_store_name is not None:
            pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        if write_policy is not None:
            pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> Optional[str]:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[bool]:
        return pulumi.get(self, "strict_content_type_validation")

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> Optional[str]:
        return pulumi.get(self, "write_policy")


@pulumi.output_type
class NexusRepositoryYum(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployPolicy":
            suggest = "deploy_policy"
        elif key == "repodataDepth":
            suggest = "repodata_depth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryYum. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryYum.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryYum.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_policy: str,
                 repodata_depth: Optional[int] = None):
        pulumi.set(__self__, "deploy_policy", deploy_policy)
        if repodata_depth is not None:
            pulumi.set(__self__, "repodata_depth", repodata_depth)

    @property
    @pulumi.getter(name="deployPolicy")
    def deploy_policy(self) -> str:
        return pulumi.get(self, "deploy_policy")

    @property
    @pulumi.getter(name="repodataDepth")
    def repodata_depth(self) -> Optional[int]:
        return pulumi.get(self, "repodata_depth")


@pulumi.output_type
class NexusRepositoryYumGroupGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memberNames":
            suggest = "member_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryYumGroupGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryYumGroupGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryYumGroupGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 member_names: Sequence[str]):
        pulumi.set(__self__, "member_names", member_names)

    @property
    @pulumi.getter(name="memberNames")
    def member_names(self) -> Sequence[str]:
        return pulumi.get(self, "member_names")


@pulumi.output_type
class NexusRepositoryYumGroupStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blobStoreName":
            suggest = "blob_store_name"
        elif key == "strictContentTypeValidation":
            suggest = "strict_content_type_validation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryYumGroupStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryYumGroupStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryYumGroupStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: Optional[bool] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[bool]:
        return pulumi.get(self, "strict_content_type_validation")


@pulumi.output_type
class NexusRepositoryYumGroupYumSigning(dict):
    def __init__(__self__, *,
                 keypair: str,
                 passphrase: Optional[str] = None):
        pulumi.set(__self__, "keypair", keypair)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def keypair(self) -> str:
        return pulumi.get(self, "keypair")

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        return pulumi.get(self, "passphrase")


@pulumi.output_type
class NexusRepositoryYumHostedCleanup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyNames":
            suggest = "policy_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryYumHostedCleanup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryYumHostedCleanup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryYumHostedCleanup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_names: Optional[Sequence[str]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class NexusRepositoryYumHostedComponent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "proprietaryComponents":
            suggest = "proprietary_components"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryYumHostedComponent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryYumHostedComponent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryYumHostedComponent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 proprietary_components: bool):
        pulumi.set(__self__, "proprietary_components", proprietary_components)

    @property
    @pulumi.getter(name="proprietaryComponents")
    def proprietary_components(self) -> bool:
        return pulumi.get(self, "proprietary_components")


@pulumi.output_type
class NexusRepositoryYumHostedStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blobStoreName":
            suggest = "blob_store_name"
        elif key == "strictContentTypeValidation":
            suggest = "strict_content_type_validation"
        elif key == "writePolicy":
            suggest = "write_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryYumHostedStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryYumHostedStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryYumHostedStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: bool,
                 write_policy: Optional[str] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)
        if write_policy is not None:
            pulumi.set(__self__, "write_policy", write_policy)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> bool:
        return pulumi.get(self, "strict_content_type_validation")

    @property
    @pulumi.getter(name="writePolicy")
    def write_policy(self) -> Optional[str]:
        return pulumi.get(self, "write_policy")


@pulumi.output_type
class NexusRepositoryYumProxyCleanup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyNames":
            suggest = "policy_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryYumProxyCleanup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryYumProxyCleanup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryYumProxyCleanup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_names: Optional[Sequence[str]] = None):
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")


@pulumi.output_type
class NexusRepositoryYumProxyHttpClient(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoBlock":
            suggest = "auto_block"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryYumProxyHttpClient. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryYumProxyHttpClient.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryYumProxyHttpClient.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional['outputs.NexusRepositoryYumProxyHttpClientAuthentication'] = None,
                 auto_block: Optional[bool] = None,
                 blocked: Optional[bool] = None,
                 connection: Optional['outputs.NexusRepositoryYumProxyHttpClientConnection'] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if auto_block is not None:
            pulumi.set(__self__, "auto_block", auto_block)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.NexusRepositoryYumProxyHttpClientAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="autoBlock")
    def auto_block(self) -> Optional[bool]:
        return pulumi.get(self, "auto_block")

    @property
    @pulumi.getter
    def blocked(self) -> Optional[bool]:
        return pulumi.get(self, "blocked")

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.NexusRepositoryYumProxyHttpClientConnection']:
        return pulumi.get(self, "connection")


@pulumi.output_type
class NexusRepositoryYumProxyHttpClientAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ntlmDomain":
            suggest = "ntlm_domain"
        elif key == "ntlmHost":
            suggest = "ntlm_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryYumProxyHttpClientAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryYumProxyHttpClientAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryYumProxyHttpClientAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 ntlm_domain: Optional[str] = None,
                 ntlm_host: Optional[str] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if ntlm_domain is not None:
            pulumi.set(__self__, "ntlm_domain", ntlm_domain)
        if ntlm_host is not None:
            pulumi.set(__self__, "ntlm_host", ntlm_host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="ntlmDomain")
    def ntlm_domain(self) -> Optional[str]:
        return pulumi.get(self, "ntlm_domain")

    @property
    @pulumi.getter(name="ntlmHost")
    def ntlm_host(self) -> Optional[str]:
        return pulumi.get(self, "ntlm_host")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class NexusRepositoryYumProxyHttpClientConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableCircularRedirects":
            suggest = "enable_circular_redirects"
        elif key == "enableCookies":
            suggest = "enable_cookies"
        elif key == "useTrustStore":
            suggest = "use_trust_store"
        elif key == "userAgentSuffix":
            suggest = "user_agent_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryYumProxyHttpClientConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryYumProxyHttpClientConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryYumProxyHttpClientConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_circular_redirects: Optional[bool] = None,
                 enable_cookies: Optional[bool] = None,
                 retries: Optional[int] = None,
                 timeout: Optional[int] = None,
                 use_trust_store: Optional[bool] = None,
                 user_agent_suffix: Optional[str] = None):
        if enable_circular_redirects is not None:
            pulumi.set(__self__, "enable_circular_redirects", enable_circular_redirects)
        if enable_cookies is not None:
            pulumi.set(__self__, "enable_cookies", enable_cookies)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if use_trust_store is not None:
            pulumi.set(__self__, "use_trust_store", use_trust_store)
        if user_agent_suffix is not None:
            pulumi.set(__self__, "user_agent_suffix", user_agent_suffix)

    @property
    @pulumi.getter(name="enableCircularRedirects")
    def enable_circular_redirects(self) -> Optional[bool]:
        return pulumi.get(self, "enable_circular_redirects")

    @property
    @pulumi.getter(name="enableCookies")
    def enable_cookies(self) -> Optional[bool]:
        return pulumi.get(self, "enable_cookies")

    @property
    @pulumi.getter
    def retries(self) -> Optional[int]:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="useTrustStore")
    def use_trust_store(self) -> Optional[bool]:
        return pulumi.get(self, "use_trust_store")

    @property
    @pulumi.getter(name="userAgentSuffix")
    def user_agent_suffix(self) -> Optional[str]:
        return pulumi.get(self, "user_agent_suffix")


@pulumi.output_type
class NexusRepositoryYumProxyNegativeCache(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ttl: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class NexusRepositoryYumProxyProxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "remoteUrl":
            suggest = "remote_url"
        elif key == "contentMaxAge":
            suggest = "content_max_age"
        elif key == "metadataMaxAge":
            suggest = "metadata_max_age"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryYumProxyProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryYumProxyProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryYumProxyProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 remote_url: str,
                 content_max_age: Optional[int] = None,
                 metadata_max_age: Optional[int] = None):
        pulumi.set(__self__, "remote_url", remote_url)
        if content_max_age is not None:
            pulumi.set(__self__, "content_max_age", content_max_age)
        if metadata_max_age is not None:
            pulumi.set(__self__, "metadata_max_age", metadata_max_age)

    @property
    @pulumi.getter(name="remoteUrl")
    def remote_url(self) -> str:
        return pulumi.get(self, "remote_url")

    @property
    @pulumi.getter(name="contentMaxAge")
    def content_max_age(self) -> Optional[int]:
        return pulumi.get(self, "content_max_age")

    @property
    @pulumi.getter(name="metadataMaxAge")
    def metadata_max_age(self) -> Optional[int]:
        return pulumi.get(self, "metadata_max_age")


@pulumi.output_type
class NexusRepositoryYumProxyStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blobStoreName":
            suggest = "blob_store_name"
        elif key == "strictContentTypeValidation":
            suggest = "strict_content_type_validation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NexusRepositoryYumProxyStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NexusRepositoryYumProxyStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NexusRepositoryYumProxyStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blob_store_name: str,
                 strict_content_type_validation: Optional[bool] = None):
        pulumi.set(__self__, "blob_store_name", blob_store_name)
        if strict_content_type_validation is not None:
            pulumi.set(__self__, "strict_content_type_validation", strict_content_type_validation)

    @property
    @pulumi.getter(name="blobStoreName")
    def blob_store_name(self) -> str:
        return pulumi.get(self, "blob_store_name")

    @property
    @pulumi.getter(name="strictContentTypeValidation")
    def strict_content_type_validation(self) -> Optional[bool]:
        return pulumi.get(self, "strict_content_type_validation")


@pulumi.output_type
class NexusRepositoryYumProxyYumSigning(dict):
    def __init__(__self__, *,
                 keypair: str,
                 passphrase: Optional[str] = None):
        pulumi.set(__self__, "keypair", keypair)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def keypair(self) -> str:
        return pulumi.get(self, "keypair")

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        return pulumi.get(self, "passphrase")


