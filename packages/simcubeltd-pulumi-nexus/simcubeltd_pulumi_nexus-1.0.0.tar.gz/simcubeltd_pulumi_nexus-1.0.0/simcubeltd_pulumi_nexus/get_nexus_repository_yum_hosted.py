# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetNexusRepositoryYumHostedResult',
    'AwaitableGetNexusRepositoryYumHostedResult',
    'get_nexus_repository_yum_hosted',
    'get_nexus_repository_yum_hosted_output',
]

@pulumi.output_type
class GetNexusRepositoryYumHostedResult:
    """
    A collection of values returned by GetNexusRepositoryYumHosted.
    """
    def __init__(__self__, cleanups=None, components=None, deploy_policy=None, id=None, name=None, online=None, repodata_depth=None, storages=None):
        if cleanups and not isinstance(cleanups, list):
            raise TypeError("Expected argument 'cleanups' to be a list")
        pulumi.set(__self__, "cleanups", cleanups)
        if components and not isinstance(components, list):
            raise TypeError("Expected argument 'components' to be a list")
        pulumi.set(__self__, "components", components)
        if deploy_policy and not isinstance(deploy_policy, str):
            raise TypeError("Expected argument 'deploy_policy' to be a str")
        pulumi.set(__self__, "deploy_policy", deploy_policy)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if online and not isinstance(online, bool):
            raise TypeError("Expected argument 'online' to be a bool")
        pulumi.set(__self__, "online", online)
        if repodata_depth and not isinstance(repodata_depth, int):
            raise TypeError("Expected argument 'repodata_depth' to be a int")
        pulumi.set(__self__, "repodata_depth", repodata_depth)
        if storages and not isinstance(storages, list):
            raise TypeError("Expected argument 'storages' to be a list")
        pulumi.set(__self__, "storages", storages)

    @property
    @pulumi.getter
    def cleanups(self) -> Sequence['outputs.GetNexusRepositoryYumHostedCleanupResult']:
        return pulumi.get(self, "cleanups")

    @property
    @pulumi.getter
    def components(self) -> Sequence['outputs.GetNexusRepositoryYumHostedComponentResult']:
        return pulumi.get(self, "components")

    @property
    @pulumi.getter(name="deployPolicy")
    def deploy_policy(self) -> str:
        return pulumi.get(self, "deploy_policy")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def online(self) -> bool:
        return pulumi.get(self, "online")

    @property
    @pulumi.getter(name="repodataDepth")
    def repodata_depth(self) -> int:
        return pulumi.get(self, "repodata_depth")

    @property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetNexusRepositoryYumHostedStorageResult']:
        return pulumi.get(self, "storages")


class AwaitableGetNexusRepositoryYumHostedResult(GetNexusRepositoryYumHostedResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNexusRepositoryYumHostedResult(
            cleanups=self.cleanups,
            components=self.components,
            deploy_policy=self.deploy_policy,
            id=self.id,
            name=self.name,
            online=self.online,
            repodata_depth=self.repodata_depth,
            storages=self.storages)


def get_nexus_repository_yum_hosted(name: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNexusRepositoryYumHostedResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nexus:index/getNexusRepositoryYumHosted:GetNexusRepositoryYumHosted', __args__, opts=opts, typ=GetNexusRepositoryYumHostedResult).value

    return AwaitableGetNexusRepositoryYumHostedResult(
        cleanups=__ret__.cleanups,
        components=__ret__.components,
        deploy_policy=__ret__.deploy_policy,
        id=__ret__.id,
        name=__ret__.name,
        online=__ret__.online,
        repodata_depth=__ret__.repodata_depth,
        storages=__ret__.storages)


@_utilities.lift_output_func(get_nexus_repository_yum_hosted)
def get_nexus_repository_yum_hosted_output(name: Optional[pulumi.Input[str]] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNexusRepositoryYumHostedResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
