# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NexusSecuritySamlArgs', 'NexusSecuritySaml']

@pulumi.input_type
class NexusSecuritySamlArgs:
    def __init__(__self__, *,
                 idp_metadata: pulumi.Input[str],
                 username_attribute: pulumi.Input[str],
                 email_attribute: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 first_name_attribute: Optional[pulumi.Input[str]] = None,
                 groups_attribute: Optional[pulumi.Input[str]] = None,
                 last_name_attribute: Optional[pulumi.Input[str]] = None,
                 validate_assertion_signature: Optional[pulumi.Input[bool]] = None,
                 validate_response_signature: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a NexusSecuritySaml resource.
        :param pulumi.Input[str] idp_metadata: SAML Identity Provider Metadata XML
        :param pulumi.Input[str] username_attribute: IdP field mappings for username
        :param pulumi.Input[str] email_attribute: IdP field mappings for user's email address
        :param pulumi.Input[str] entity_id: Entity ID URI
        :param pulumi.Input[str] first_name_attribute: IdP field mappings for user's given name
        :param pulumi.Input[str] groups_attribute: IdP field mappings for user's groups
        :param pulumi.Input[str] last_name_attribute: IdP field mappings for user's family name
        :param pulumi.Input[bool] validate_assertion_signature: By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
               assertions.
        :param pulumi.Input[bool] validate_response_signature: By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
               response.
        """
        pulumi.set(__self__, "idp_metadata", idp_metadata)
        pulumi.set(__self__, "username_attribute", username_attribute)
        if email_attribute is not None:
            pulumi.set(__self__, "email_attribute", email_attribute)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if first_name_attribute is not None:
            pulumi.set(__self__, "first_name_attribute", first_name_attribute)
        if groups_attribute is not None:
            pulumi.set(__self__, "groups_attribute", groups_attribute)
        if last_name_attribute is not None:
            pulumi.set(__self__, "last_name_attribute", last_name_attribute)
        if validate_assertion_signature is not None:
            pulumi.set(__self__, "validate_assertion_signature", validate_assertion_signature)
        if validate_response_signature is not None:
            pulumi.set(__self__, "validate_response_signature", validate_response_signature)

    @property
    @pulumi.getter(name="idpMetadata")
    def idp_metadata(self) -> pulumi.Input[str]:
        """
        SAML Identity Provider Metadata XML
        """
        return pulumi.get(self, "idp_metadata")

    @idp_metadata.setter
    def idp_metadata(self, value: pulumi.Input[str]):
        pulumi.set(self, "idp_metadata", value)

    @property
    @pulumi.getter(name="usernameAttribute")
    def username_attribute(self) -> pulumi.Input[str]:
        """
        IdP field mappings for username
        """
        return pulumi.get(self, "username_attribute")

    @username_attribute.setter
    def username_attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "username_attribute", value)

    @property
    @pulumi.getter(name="emailAttribute")
    def email_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        IdP field mappings for user's email address
        """
        return pulumi.get(self, "email_attribute")

    @email_attribute.setter
    def email_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_attribute", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        Entity ID URI
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="firstNameAttribute")
    def first_name_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        IdP field mappings for user's given name
        """
        return pulumi.get(self, "first_name_attribute")

    @first_name_attribute.setter
    def first_name_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name_attribute", value)

    @property
    @pulumi.getter(name="groupsAttribute")
    def groups_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        IdP field mappings for user's groups
        """
        return pulumi.get(self, "groups_attribute")

    @groups_attribute.setter
    def groups_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "groups_attribute", value)

    @property
    @pulumi.getter(name="lastNameAttribute")
    def last_name_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        IdP field mappings for user's family name
        """
        return pulumi.get(self, "last_name_attribute")

    @last_name_attribute.setter
    def last_name_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name_attribute", value)

    @property
    @pulumi.getter(name="validateAssertionSignature")
    def validate_assertion_signature(self) -> Optional[pulumi.Input[bool]]:
        """
        By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
        assertions.
        """
        return pulumi.get(self, "validate_assertion_signature")

    @validate_assertion_signature.setter
    def validate_assertion_signature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_assertion_signature", value)

    @property
    @pulumi.getter(name="validateResponseSignature")
    def validate_response_signature(self) -> Optional[pulumi.Input[bool]]:
        """
        By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
        response.
        """
        return pulumi.get(self, "validate_response_signature")

    @validate_response_signature.setter
    def validate_response_signature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_response_signature", value)


@pulumi.input_type
class _NexusSecuritySamlState:
    def __init__(__self__, *,
                 email_attribute: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 first_name_attribute: Optional[pulumi.Input[str]] = None,
                 groups_attribute: Optional[pulumi.Input[str]] = None,
                 idp_metadata: Optional[pulumi.Input[str]] = None,
                 last_name_attribute: Optional[pulumi.Input[str]] = None,
                 username_attribute: Optional[pulumi.Input[str]] = None,
                 validate_assertion_signature: Optional[pulumi.Input[bool]] = None,
                 validate_response_signature: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering NexusSecuritySaml resources.
        :param pulumi.Input[str] email_attribute: IdP field mappings for user's email address
        :param pulumi.Input[str] entity_id: Entity ID URI
        :param pulumi.Input[str] first_name_attribute: IdP field mappings for user's given name
        :param pulumi.Input[str] groups_attribute: IdP field mappings for user's groups
        :param pulumi.Input[str] idp_metadata: SAML Identity Provider Metadata XML
        :param pulumi.Input[str] last_name_attribute: IdP field mappings for user's family name
        :param pulumi.Input[str] username_attribute: IdP field mappings for username
        :param pulumi.Input[bool] validate_assertion_signature: By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
               assertions.
        :param pulumi.Input[bool] validate_response_signature: By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
               response.
        """
        if email_attribute is not None:
            pulumi.set(__self__, "email_attribute", email_attribute)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if first_name_attribute is not None:
            pulumi.set(__self__, "first_name_attribute", first_name_attribute)
        if groups_attribute is not None:
            pulumi.set(__self__, "groups_attribute", groups_attribute)
        if idp_metadata is not None:
            pulumi.set(__self__, "idp_metadata", idp_metadata)
        if last_name_attribute is not None:
            pulumi.set(__self__, "last_name_attribute", last_name_attribute)
        if username_attribute is not None:
            pulumi.set(__self__, "username_attribute", username_attribute)
        if validate_assertion_signature is not None:
            pulumi.set(__self__, "validate_assertion_signature", validate_assertion_signature)
        if validate_response_signature is not None:
            pulumi.set(__self__, "validate_response_signature", validate_response_signature)

    @property
    @pulumi.getter(name="emailAttribute")
    def email_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        IdP field mappings for user's email address
        """
        return pulumi.get(self, "email_attribute")

    @email_attribute.setter
    def email_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_attribute", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        Entity ID URI
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="firstNameAttribute")
    def first_name_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        IdP field mappings for user's given name
        """
        return pulumi.get(self, "first_name_attribute")

    @first_name_attribute.setter
    def first_name_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name_attribute", value)

    @property
    @pulumi.getter(name="groupsAttribute")
    def groups_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        IdP field mappings for user's groups
        """
        return pulumi.get(self, "groups_attribute")

    @groups_attribute.setter
    def groups_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "groups_attribute", value)

    @property
    @pulumi.getter(name="idpMetadata")
    def idp_metadata(self) -> Optional[pulumi.Input[str]]:
        """
        SAML Identity Provider Metadata XML
        """
        return pulumi.get(self, "idp_metadata")

    @idp_metadata.setter
    def idp_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_metadata", value)

    @property
    @pulumi.getter(name="lastNameAttribute")
    def last_name_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        IdP field mappings for user's family name
        """
        return pulumi.get(self, "last_name_attribute")

    @last_name_attribute.setter
    def last_name_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name_attribute", value)

    @property
    @pulumi.getter(name="usernameAttribute")
    def username_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        IdP field mappings for username
        """
        return pulumi.get(self, "username_attribute")

    @username_attribute.setter
    def username_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_attribute", value)

    @property
    @pulumi.getter(name="validateAssertionSignature")
    def validate_assertion_signature(self) -> Optional[pulumi.Input[bool]]:
        """
        By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
        assertions.
        """
        return pulumi.get(self, "validate_assertion_signature")

    @validate_assertion_signature.setter
    def validate_assertion_signature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_assertion_signature", value)

    @property
    @pulumi.getter(name="validateResponseSignature")
    def validate_response_signature(self) -> Optional[pulumi.Input[bool]]:
        """
        By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
        response.
        """
        return pulumi.get(self, "validate_response_signature")

    @validate_response_signature.setter
    def validate_response_signature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_response_signature", value)


class NexusSecuritySaml(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email_attribute: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 first_name_attribute: Optional[pulumi.Input[str]] = None,
                 groups_attribute: Optional[pulumi.Input[str]] = None,
                 idp_metadata: Optional[pulumi.Input[str]] = None,
                 last_name_attribute: Optional[pulumi.Input[str]] = None,
                 username_attribute: Optional[pulumi.Input[str]] = None,
                 validate_assertion_signature: Optional[pulumi.Input[bool]] = None,
                 validate_response_signature: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a NexusSecuritySaml resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email_attribute: IdP field mappings for user's email address
        :param pulumi.Input[str] entity_id: Entity ID URI
        :param pulumi.Input[str] first_name_attribute: IdP field mappings for user's given name
        :param pulumi.Input[str] groups_attribute: IdP field mappings for user's groups
        :param pulumi.Input[str] idp_metadata: SAML Identity Provider Metadata XML
        :param pulumi.Input[str] last_name_attribute: IdP field mappings for user's family name
        :param pulumi.Input[str] username_attribute: IdP field mappings for username
        :param pulumi.Input[bool] validate_assertion_signature: By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
               assertions.
        :param pulumi.Input[bool] validate_response_signature: By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
               response.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NexusSecuritySamlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NexusSecuritySaml resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NexusSecuritySamlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NexusSecuritySamlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email_attribute: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 first_name_attribute: Optional[pulumi.Input[str]] = None,
                 groups_attribute: Optional[pulumi.Input[str]] = None,
                 idp_metadata: Optional[pulumi.Input[str]] = None,
                 last_name_attribute: Optional[pulumi.Input[str]] = None,
                 username_attribute: Optional[pulumi.Input[str]] = None,
                 validate_assertion_signature: Optional[pulumi.Input[bool]] = None,
                 validate_response_signature: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NexusSecuritySamlArgs.__new__(NexusSecuritySamlArgs)

            __props__.__dict__["email_attribute"] = email_attribute
            __props__.__dict__["entity_id"] = entity_id
            __props__.__dict__["first_name_attribute"] = first_name_attribute
            __props__.__dict__["groups_attribute"] = groups_attribute
            if idp_metadata is None and not opts.urn:
                raise TypeError("Missing required property 'idp_metadata'")
            __props__.__dict__["idp_metadata"] = idp_metadata
            __props__.__dict__["last_name_attribute"] = last_name_attribute
            if username_attribute is None and not opts.urn:
                raise TypeError("Missing required property 'username_attribute'")
            __props__.__dict__["username_attribute"] = username_attribute
            __props__.__dict__["validate_assertion_signature"] = validate_assertion_signature
            __props__.__dict__["validate_response_signature"] = validate_response_signature
        super(NexusSecuritySaml, __self__).__init__(
            'nexus:index/nexusSecuritySaml:NexusSecuritySaml',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            email_attribute: Optional[pulumi.Input[str]] = None,
            entity_id: Optional[pulumi.Input[str]] = None,
            first_name_attribute: Optional[pulumi.Input[str]] = None,
            groups_attribute: Optional[pulumi.Input[str]] = None,
            idp_metadata: Optional[pulumi.Input[str]] = None,
            last_name_attribute: Optional[pulumi.Input[str]] = None,
            username_attribute: Optional[pulumi.Input[str]] = None,
            validate_assertion_signature: Optional[pulumi.Input[bool]] = None,
            validate_response_signature: Optional[pulumi.Input[bool]] = None) -> 'NexusSecuritySaml':
        """
        Get an existing NexusSecuritySaml resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email_attribute: IdP field mappings for user's email address
        :param pulumi.Input[str] entity_id: Entity ID URI
        :param pulumi.Input[str] first_name_attribute: IdP field mappings for user's given name
        :param pulumi.Input[str] groups_attribute: IdP field mappings for user's groups
        :param pulumi.Input[str] idp_metadata: SAML Identity Provider Metadata XML
        :param pulumi.Input[str] last_name_attribute: IdP field mappings for user's family name
        :param pulumi.Input[str] username_attribute: IdP field mappings for username
        :param pulumi.Input[bool] validate_assertion_signature: By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
               assertions.
        :param pulumi.Input[bool] validate_response_signature: By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
               response.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NexusSecuritySamlState.__new__(_NexusSecuritySamlState)

        __props__.__dict__["email_attribute"] = email_attribute
        __props__.__dict__["entity_id"] = entity_id
        __props__.__dict__["first_name_attribute"] = first_name_attribute
        __props__.__dict__["groups_attribute"] = groups_attribute
        __props__.__dict__["idp_metadata"] = idp_metadata
        __props__.__dict__["last_name_attribute"] = last_name_attribute
        __props__.__dict__["username_attribute"] = username_attribute
        __props__.__dict__["validate_assertion_signature"] = validate_assertion_signature
        __props__.__dict__["validate_response_signature"] = validate_response_signature
        return NexusSecuritySaml(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="emailAttribute")
    def email_attribute(self) -> pulumi.Output[Optional[str]]:
        """
        IdP field mappings for user's email address
        """
        return pulumi.get(self, "email_attribute")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Output[Optional[str]]:
        """
        Entity ID URI
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="firstNameAttribute")
    def first_name_attribute(self) -> pulumi.Output[Optional[str]]:
        """
        IdP field mappings for user's given name
        """
        return pulumi.get(self, "first_name_attribute")

    @property
    @pulumi.getter(name="groupsAttribute")
    def groups_attribute(self) -> pulumi.Output[Optional[str]]:
        """
        IdP field mappings for user's groups
        """
        return pulumi.get(self, "groups_attribute")

    @property
    @pulumi.getter(name="idpMetadata")
    def idp_metadata(self) -> pulumi.Output[str]:
        """
        SAML Identity Provider Metadata XML
        """
        return pulumi.get(self, "idp_metadata")

    @property
    @pulumi.getter(name="lastNameAttribute")
    def last_name_attribute(self) -> pulumi.Output[Optional[str]]:
        """
        IdP field mappings for user's family name
        """
        return pulumi.get(self, "last_name_attribute")

    @property
    @pulumi.getter(name="usernameAttribute")
    def username_attribute(self) -> pulumi.Output[str]:
        """
        IdP field mappings for username
        """
        return pulumi.get(self, "username_attribute")

    @property
    @pulumi.getter(name="validateAssertionSignature")
    def validate_assertion_signature(self) -> pulumi.Output[Optional[bool]]:
        """
        By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
        assertions.
        """
        return pulumi.get(self, "validate_assertion_signature")

    @property
    @pulumi.getter(name="validateResponseSignature")
    def validate_response_signature(self) -> pulumi.Output[Optional[bool]]:
        """
        By default, if a signing key is found in the IdP metadata, then NXRM will attempt to validate signatures on the
        response.
        """
        return pulumi.get(self, "validate_response_signature")

