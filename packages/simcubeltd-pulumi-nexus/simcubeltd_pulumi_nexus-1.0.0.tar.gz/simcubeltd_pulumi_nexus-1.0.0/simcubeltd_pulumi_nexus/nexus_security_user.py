# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NexusSecurityUserArgs', 'NexusSecurityUser']

@pulumi.input_type
class NexusSecurityUserArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 firstname: pulumi.Input[str],
                 lastname: pulumi.Input[str],
                 password: pulumi.Input[str],
                 userid: pulumi.Input[str],
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NexusSecurityUser resource.
        :param pulumi.Input[str] email: The email address associated with the user.
        :param pulumi.Input[str] firstname: The first name of the user.
        :param pulumi.Input[str] lastname: The last name of the user.
        :param pulumi.Input[str] password: The password for the user.
        :param pulumi.Input[str] userid: The userid which is required for login. This value cannot be changed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: The roles which the user has been assigned within Nexus.
        :param pulumi.Input[str] status: The user's status, e.g. active or disabled.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "firstname", firstname)
        pulumi.set(__self__, "lastname", lastname)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "userid", userid)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        The email address associated with the user.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def firstname(self) -> pulumi.Input[str]:
        """
        The first name of the user.
        """
        return pulumi.get(self, "firstname")

    @firstname.setter
    def firstname(self, value: pulumi.Input[str]):
        pulumi.set(self, "firstname", value)

    @property
    @pulumi.getter
    def lastname(self) -> pulumi.Input[str]:
        """
        The last name of the user.
        """
        return pulumi.get(self, "lastname")

    @lastname.setter
    def lastname(self, value: pulumi.Input[str]):
        pulumi.set(self, "lastname", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password for the user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def userid(self) -> pulumi.Input[str]:
        """
        The userid which is required for login. This value cannot be changed.
        """
        return pulumi.get(self, "userid")

    @userid.setter
    def userid(self, value: pulumi.Input[str]):
        pulumi.set(self, "userid", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The roles which the user has been assigned within Nexus.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The user's status, e.g. active or disabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _NexusSecurityUserState:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 firstname: Optional[pulumi.Input[str]] = None,
                 lastname: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 userid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NexusSecurityUser resources.
        :param pulumi.Input[str] email: The email address associated with the user.
        :param pulumi.Input[str] firstname: The first name of the user.
        :param pulumi.Input[str] lastname: The last name of the user.
        :param pulumi.Input[str] password: The password for the user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: The roles which the user has been assigned within Nexus.
        :param pulumi.Input[str] status: The user's status, e.g. active or disabled.
        :param pulumi.Input[str] userid: The userid which is required for login. This value cannot be changed.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if firstname is not None:
            pulumi.set(__self__, "firstname", firstname)
        if lastname is not None:
            pulumi.set(__self__, "lastname", lastname)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if userid is not None:
            pulumi.set(__self__, "userid", userid)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The email address associated with the user.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def firstname(self) -> Optional[pulumi.Input[str]]:
        """
        The first name of the user.
        """
        return pulumi.get(self, "firstname")

    @firstname.setter
    def firstname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firstname", value)

    @property
    @pulumi.getter
    def lastname(self) -> Optional[pulumi.Input[str]]:
        """
        The last name of the user.
        """
        return pulumi.get(self, "lastname")

    @lastname.setter
    def lastname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lastname", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The roles which the user has been assigned within Nexus.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The user's status, e.g. active or disabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def userid(self) -> Optional[pulumi.Input[str]]:
        """
        The userid which is required for login. This value cannot be changed.
        """
        return pulumi.get(self, "userid")

    @userid.setter
    def userid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "userid", value)


class NexusSecurityUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 firstname: Optional[pulumi.Input[str]] = None,
                 lastname: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 userid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NexusSecurityUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: The email address associated with the user.
        :param pulumi.Input[str] firstname: The first name of the user.
        :param pulumi.Input[str] lastname: The last name of the user.
        :param pulumi.Input[str] password: The password for the user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: The roles which the user has been assigned within Nexus.
        :param pulumi.Input[str] status: The user's status, e.g. active or disabled.
        :param pulumi.Input[str] userid: The userid which is required for login. This value cannot be changed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NexusSecurityUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NexusSecurityUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NexusSecurityUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NexusSecurityUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 firstname: Optional[pulumi.Input[str]] = None,
                 lastname: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 userid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NexusSecurityUserArgs.__new__(NexusSecurityUserArgs)

            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            if firstname is None and not opts.urn:
                raise TypeError("Missing required property 'firstname'")
            __props__.__dict__["firstname"] = firstname
            if lastname is None and not opts.urn:
                raise TypeError("Missing required property 'lastname'")
            __props__.__dict__["lastname"] = lastname
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = password
            __props__.__dict__["roles"] = roles
            __props__.__dict__["status"] = status
            if userid is None and not opts.urn:
                raise TypeError("Missing required property 'userid'")
            __props__.__dict__["userid"] = userid
        super(NexusSecurityUser, __self__).__init__(
            'nexus:index/nexusSecurityUser:NexusSecurityUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            email: Optional[pulumi.Input[str]] = None,
            firstname: Optional[pulumi.Input[str]] = None,
            lastname: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            userid: Optional[pulumi.Input[str]] = None) -> 'NexusSecurityUser':
        """
        Get an existing NexusSecurityUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: The email address associated with the user.
        :param pulumi.Input[str] firstname: The first name of the user.
        :param pulumi.Input[str] lastname: The last name of the user.
        :param pulumi.Input[str] password: The password for the user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: The roles which the user has been assigned within Nexus.
        :param pulumi.Input[str] status: The user's status, e.g. active or disabled.
        :param pulumi.Input[str] userid: The userid which is required for login. This value cannot be changed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NexusSecurityUserState.__new__(_NexusSecurityUserState)

        __props__.__dict__["email"] = email
        __props__.__dict__["firstname"] = firstname
        __props__.__dict__["lastname"] = lastname
        __props__.__dict__["password"] = password
        __props__.__dict__["roles"] = roles
        __props__.__dict__["status"] = status
        __props__.__dict__["userid"] = userid
        return NexusSecurityUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        The email address associated with the user.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def firstname(self) -> pulumi.Output[str]:
        """
        The first name of the user.
        """
        return pulumi.get(self, "firstname")

    @property
    @pulumi.getter
    def lastname(self) -> pulumi.Output[str]:
        """
        The last name of the user.
        """
        return pulumi.get(self, "lastname")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        The password for the user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The roles which the user has been assigned within Nexus.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        """
        The user's status, e.g. active or disabled.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def userid(self) -> pulumi.Output[str]:
        """
        The userid which is required for login. This value cannot be changed.
        """
        return pulumi.get(self, "userid")

