# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNexusRoutingRuleResult',
    'AwaitableGetNexusRoutingRuleResult',
    'get_nexus_routing_rule',
    'get_nexus_routing_rule_output',
]

@pulumi.output_type
class GetNexusRoutingRuleResult:
    """
    A collection of values returned by GetNexusRoutingRule.
    """
    def __init__(__self__, description=None, id=None, matchers=None, mode=None, name=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matchers and not isinstance(matchers, list):
            raise TypeError("Expected argument 'matchers' to be a list")
        pulumi.set(__self__, "matchers", matchers)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def matchers(self) -> Sequence[str]:
        return pulumi.get(self, "matchers")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


class AwaitableGetNexusRoutingRuleResult(GetNexusRoutingRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNexusRoutingRuleResult(
            description=self.description,
            id=self.id,
            matchers=self.matchers,
            mode=self.mode,
            name=self.name)


def get_nexus_routing_rule(name: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNexusRoutingRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nexus:index/getNexusRoutingRule:GetNexusRoutingRule', __args__, opts=opts, typ=GetNexusRoutingRuleResult).value

    return AwaitableGetNexusRoutingRuleResult(
        description=__ret__.description,
        id=__ret__.id,
        matchers=__ret__.matchers,
        mode=__ret__.mode,
        name=__ret__.name)


@_utilities.lift_output_func(get_nexus_routing_rule)
def get_nexus_routing_rule_output(name: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNexusRoutingRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
