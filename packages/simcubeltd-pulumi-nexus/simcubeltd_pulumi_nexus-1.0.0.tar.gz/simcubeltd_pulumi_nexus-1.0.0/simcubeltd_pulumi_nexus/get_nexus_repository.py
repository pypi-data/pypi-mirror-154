# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNexusRepositoryResult',
    'AwaitableGetNexusRepositoryResult',
    'get_nexus_repository',
    'get_nexus_repository_output',
]

@pulumi.output_type
class GetNexusRepositoryResult:
    """
    A collection of values returned by GetNexusRepository.
    """
    def __init__(__self__, apt_signings=None, apts=None, cleanups=None, dockers=None, format=None, group=None, http_client=None, id=None, maven=None, name=None, negative_cache=None, online=None, proxy=None, storage=None, type=None):
        if apt_signings and not isinstance(apt_signings, list):
            raise TypeError("Expected argument 'apt_signings' to be a list")
        pulumi.set(__self__, "apt_signings", apt_signings)
        if apts and not isinstance(apts, list):
            raise TypeError("Expected argument 'apts' to be a list")
        pulumi.set(__self__, "apts", apts)
        if cleanups and not isinstance(cleanups, list):
            raise TypeError("Expected argument 'cleanups' to be a list")
        pulumi.set(__self__, "cleanups", cleanups)
        if dockers and not isinstance(dockers, list):
            raise TypeError("Expected argument 'dockers' to be a list")
        pulumi.set(__self__, "dockers", dockers)
        if format and not isinstance(format, str):
            raise TypeError("Expected argument 'format' to be a str")
        pulumi.set(__self__, "format", format)
        if group and not isinstance(group, dict):
            raise TypeError("Expected argument 'group' to be a dict")
        pulumi.set(__self__, "group", group)
        if http_client and not isinstance(http_client, dict):
            raise TypeError("Expected argument 'http_client' to be a dict")
        pulumi.set(__self__, "http_client", http_client)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if maven and not isinstance(maven, dict):
            raise TypeError("Expected argument 'maven' to be a dict")
        pulumi.set(__self__, "maven", maven)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if negative_cache and not isinstance(negative_cache, dict):
            raise TypeError("Expected argument 'negative_cache' to be a dict")
        pulumi.set(__self__, "negative_cache", negative_cache)
        if online and not isinstance(online, bool):
            raise TypeError("Expected argument 'online' to be a bool")
        pulumi.set(__self__, "online", online)
        if proxy and not isinstance(proxy, dict):
            raise TypeError("Expected argument 'proxy' to be a dict")
        pulumi.set(__self__, "proxy", proxy)
        if storage and not isinstance(storage, dict):
            raise TypeError("Expected argument 'storage' to be a dict")
        pulumi.set(__self__, "storage", storage)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="aptSignings")
    def apt_signings(self) -> Optional[Sequence['outputs.GetNexusRepositoryAptSigningResult']]:
        return pulumi.get(self, "apt_signings")

    @property
    @pulumi.getter
    def apts(self) -> Optional[Sequence['outputs.GetNexusRepositoryAptResult']]:
        return pulumi.get(self, "apts")

    @property
    @pulumi.getter
    def cleanups(self) -> Optional[Sequence['outputs.GetNexusRepositoryCleanupResult']]:
        return pulumi.get(self, "cleanups")

    @property
    @pulumi.getter
    def dockers(self) -> Optional[Sequence['outputs.GetNexusRepositoryDockerResult']]:
        return pulumi.get(self, "dockers")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def group(self) -> Optional['outputs.GetNexusRepositoryGroupResult']:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="httpClient")
    def http_client(self) -> Optional['outputs.GetNexusRepositoryHttpClientResult']:
        return pulumi.get(self, "http_client")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def maven(self) -> Optional['outputs.GetNexusRepositoryMavenResult']:
        return pulumi.get(self, "maven")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> Optional['outputs.GetNexusRepositoryNegativeCacheResult']:
        return pulumi.get(self, "negative_cache")

    @property
    @pulumi.getter
    def online(self) -> Optional[bool]:
        return pulumi.get(self, "online")

    @property
    @pulumi.getter
    def proxy(self) -> Optional['outputs.GetNexusRepositoryProxyResult']:
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.GetNexusRepositoryStorageResult']:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


class AwaitableGetNexusRepositoryResult(GetNexusRepositoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNexusRepositoryResult(
            apt_signings=self.apt_signings,
            apts=self.apts,
            cleanups=self.cleanups,
            dockers=self.dockers,
            format=self.format,
            group=self.group,
            http_client=self.http_client,
            id=self.id,
            maven=self.maven,
            name=self.name,
            negative_cache=self.negative_cache,
            online=self.online,
            proxy=self.proxy,
            storage=self.storage,
            type=self.type)


def get_nexus_repository(apt_signings: Optional[Sequence[pulumi.InputType['GetNexusRepositoryAptSigningArgs']]] = None,
                         apts: Optional[Sequence[pulumi.InputType['GetNexusRepositoryAptArgs']]] = None,
                         cleanups: Optional[Sequence[pulumi.InputType['GetNexusRepositoryCleanupArgs']]] = None,
                         dockers: Optional[Sequence[pulumi.InputType['GetNexusRepositoryDockerArgs']]] = None,
                         format: Optional[str] = None,
                         group: Optional[pulumi.InputType['GetNexusRepositoryGroupArgs']] = None,
                         http_client: Optional[pulumi.InputType['GetNexusRepositoryHttpClientArgs']] = None,
                         maven: Optional[pulumi.InputType['GetNexusRepositoryMavenArgs']] = None,
                         name: Optional[str] = None,
                         negative_cache: Optional[pulumi.InputType['GetNexusRepositoryNegativeCacheArgs']] = None,
                         online: Optional[bool] = None,
                         proxy: Optional[pulumi.InputType['GetNexusRepositoryProxyArgs']] = None,
                         storage: Optional[pulumi.InputType['GetNexusRepositoryStorageArgs']] = None,
                         type: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNexusRepositoryResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['aptSignings'] = apt_signings
    __args__['apts'] = apts
    __args__['cleanups'] = cleanups
    __args__['dockers'] = dockers
    __args__['format'] = format
    __args__['group'] = group
    __args__['httpClient'] = http_client
    __args__['maven'] = maven
    __args__['name'] = name
    __args__['negativeCache'] = negative_cache
    __args__['online'] = online
    __args__['proxy'] = proxy
    __args__['storage'] = storage
    __args__['type'] = type
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nexus:index/getNexusRepository:GetNexusRepository', __args__, opts=opts, typ=GetNexusRepositoryResult).value

    return AwaitableGetNexusRepositoryResult(
        apt_signings=__ret__.apt_signings,
        apts=__ret__.apts,
        cleanups=__ret__.cleanups,
        dockers=__ret__.dockers,
        format=__ret__.format,
        group=__ret__.group,
        http_client=__ret__.http_client,
        id=__ret__.id,
        maven=__ret__.maven,
        name=__ret__.name,
        negative_cache=__ret__.negative_cache,
        online=__ret__.online,
        proxy=__ret__.proxy,
        storage=__ret__.storage,
        type=__ret__.type)


@_utilities.lift_output_func(get_nexus_repository)
def get_nexus_repository_output(apt_signings: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNexusRepositoryAptSigningArgs']]]]] = None,
                                apts: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNexusRepositoryAptArgs']]]]] = None,
                                cleanups: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNexusRepositoryCleanupArgs']]]]] = None,
                                dockers: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNexusRepositoryDockerArgs']]]]] = None,
                                format: Optional[pulumi.Input[Optional[str]]] = None,
                                group: Optional[pulumi.Input[Optional[pulumi.InputType['GetNexusRepositoryGroupArgs']]]] = None,
                                http_client: Optional[pulumi.Input[Optional[pulumi.InputType['GetNexusRepositoryHttpClientArgs']]]] = None,
                                maven: Optional[pulumi.Input[Optional[pulumi.InputType['GetNexusRepositoryMavenArgs']]]] = None,
                                name: Optional[pulumi.Input[str]] = None,
                                negative_cache: Optional[pulumi.Input[Optional[pulumi.InputType['GetNexusRepositoryNegativeCacheArgs']]]] = None,
                                online: Optional[pulumi.Input[Optional[bool]]] = None,
                                proxy: Optional[pulumi.Input[Optional[pulumi.InputType['GetNexusRepositoryProxyArgs']]]] = None,
                                storage: Optional[pulumi.Input[Optional[pulumi.InputType['GetNexusRepositoryStorageArgs']]]] = None,
                                type: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNexusRepositoryResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
