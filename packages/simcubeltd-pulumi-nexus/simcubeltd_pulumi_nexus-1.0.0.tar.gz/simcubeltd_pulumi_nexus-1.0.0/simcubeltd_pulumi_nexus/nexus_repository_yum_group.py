# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NexusRepositoryYumGroupArgs', 'NexusRepositoryYumGroup']

@pulumi.input_type
class NexusRepositoryYumGroupArgs:
    def __init__(__self__, *,
                 group: pulumi.Input['NexusRepositoryYumGroupGroupArgs'],
                 storage: pulumi.Input['NexusRepositoryYumGroupStorageArgs'],
                 name: Optional[pulumi.Input[str]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 yum_signing: Optional[pulumi.Input['NexusRepositoryYumGroupYumSigningArgs']] = None):
        """
        The set of arguments for constructing a NexusRepositoryYumGroup resource.
        :param pulumi.Input['NexusRepositoryYumGroupGroupArgs'] group: Configuration for repository group
        :param pulumi.Input['NexusRepositoryYumGroupStorageArgs'] storage: The storage configuration of the repository
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input['NexusRepositoryYumGroupYumSigningArgs'] yum_signing: Contains signing data of repositores
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "storage", storage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if online is not None:
            pulumi.set(__self__, "online", online)
        if yum_signing is not None:
            pulumi.set(__self__, "yum_signing", yum_signing)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input['NexusRepositoryYumGroupGroupArgs']:
        """
        Configuration for repository group
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input['NexusRepositoryYumGroupGroupArgs']):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input['NexusRepositoryYumGroupStorageArgs']:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input['NexusRepositoryYumGroupStorageArgs']):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def online(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @online.setter
    def online(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "online", value)

    @property
    @pulumi.getter(name="yumSigning")
    def yum_signing(self) -> Optional[pulumi.Input['NexusRepositoryYumGroupYumSigningArgs']]:
        """
        Contains signing data of repositores
        """
        return pulumi.get(self, "yum_signing")

    @yum_signing.setter
    def yum_signing(self, value: Optional[pulumi.Input['NexusRepositoryYumGroupYumSigningArgs']]):
        pulumi.set(self, "yum_signing", value)


@pulumi.input_type
class _NexusRepositoryYumGroupState:
    def __init__(__self__, *,
                 group: Optional[pulumi.Input['NexusRepositoryYumGroupGroupArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 storage: Optional[pulumi.Input['NexusRepositoryYumGroupStorageArgs']] = None,
                 yum_signing: Optional[pulumi.Input['NexusRepositoryYumGroupYumSigningArgs']] = None):
        """
        Input properties used for looking up and filtering NexusRepositoryYumGroup resources.
        :param pulumi.Input['NexusRepositoryYumGroupGroupArgs'] group: Configuration for repository group
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input['NexusRepositoryYumGroupStorageArgs'] storage: The storage configuration of the repository
        :param pulumi.Input['NexusRepositoryYumGroupYumSigningArgs'] yum_signing: Contains signing data of repositores
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if online is not None:
            pulumi.set(__self__, "online", online)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if yum_signing is not None:
            pulumi.set(__self__, "yum_signing", yum_signing)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input['NexusRepositoryYumGroupGroupArgs']]:
        """
        Configuration for repository group
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input['NexusRepositoryYumGroupGroupArgs']]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def online(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @online.setter
    def online(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "online", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['NexusRepositoryYumGroupStorageArgs']]:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['NexusRepositoryYumGroupStorageArgs']]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="yumSigning")
    def yum_signing(self) -> Optional[pulumi.Input['NexusRepositoryYumGroupYumSigningArgs']]:
        """
        Contains signing data of repositores
        """
        return pulumi.get(self, "yum_signing")

    @yum_signing.setter
    def yum_signing(self, value: Optional[pulumi.Input['NexusRepositoryYumGroupYumSigningArgs']]):
        pulumi.set(self, "yum_signing", value)


class NexusRepositoryYumGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupGroupArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupStorageArgs']]] = None,
                 yum_signing: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupYumSigningArgs']]] = None,
                 __props__=None):
        """
        Create a NexusRepositoryYumGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupGroupArgs']] group: Configuration for repository group
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupStorageArgs']] storage: The storage configuration of the repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupYumSigningArgs']] yum_signing: Contains signing data of repositores
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NexusRepositoryYumGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NexusRepositoryYumGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NexusRepositoryYumGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NexusRepositoryYumGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupGroupArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupStorageArgs']]] = None,
                 yum_signing: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupYumSigningArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NexusRepositoryYumGroupArgs.__new__(NexusRepositoryYumGroupArgs)

            if group is None and not opts.urn:
                raise TypeError("Missing required property 'group'")
            __props__.__dict__["group"] = group
            __props__.__dict__["name"] = name
            __props__.__dict__["online"] = online
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
            __props__.__dict__["yum_signing"] = yum_signing
        super(NexusRepositoryYumGroup, __self__).__init__(
            'nexus:index/nexusRepositoryYumGroup:NexusRepositoryYumGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            group: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupGroupArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            online: Optional[pulumi.Input[bool]] = None,
            storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupStorageArgs']]] = None,
            yum_signing: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupYumSigningArgs']]] = None) -> 'NexusRepositoryYumGroup':
        """
        Get an existing NexusRepositoryYumGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupGroupArgs']] group: Configuration for repository group
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupStorageArgs']] storage: The storage configuration of the repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryYumGroupYumSigningArgs']] yum_signing: Contains signing data of repositores
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NexusRepositoryYumGroupState.__new__(_NexusRepositoryYumGroupState)

        __props__.__dict__["group"] = group
        __props__.__dict__["name"] = name
        __props__.__dict__["online"] = online
        __props__.__dict__["storage"] = storage
        __props__.__dict__["yum_signing"] = yum_signing
        return NexusRepositoryYumGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Output['outputs.NexusRepositoryYumGroupGroup']:
        """
        Configuration for repository group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def online(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output['outputs.NexusRepositoryYumGroupStorage']:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="yumSigning")
    def yum_signing(self) -> pulumi.Output[Optional['outputs.NexusRepositoryYumGroupYumSigning']]:
        """
        Contains signing data of repositores
        """
        return pulumi.get(self, "yum_signing")

