# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetNexusRepositoryYumGroupResult',
    'AwaitableGetNexusRepositoryYumGroupResult',
    'get_nexus_repository_yum_group',
    'get_nexus_repository_yum_group_output',
]

@pulumi.output_type
class GetNexusRepositoryYumGroupResult:
    """
    A collection of values returned by GetNexusRepositoryYumGroup.
    """
    def __init__(__self__, groups=None, id=None, name=None, online=None, storages=None, yum_signings=None):
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if online and not isinstance(online, bool):
            raise TypeError("Expected argument 'online' to be a bool")
        pulumi.set(__self__, "online", online)
        if storages and not isinstance(storages, list):
            raise TypeError("Expected argument 'storages' to be a list")
        pulumi.set(__self__, "storages", storages)
        if yum_signings and not isinstance(yum_signings, list):
            raise TypeError("Expected argument 'yum_signings' to be a list")
        pulumi.set(__self__, "yum_signings", yum_signings)

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetNexusRepositoryYumGroupGroupResult']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def online(self) -> bool:
        return pulumi.get(self, "online")

    @property
    @pulumi.getter
    def storages(self) -> Sequence['outputs.GetNexusRepositoryYumGroupStorageResult']:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="yumSignings")
    def yum_signings(self) -> Sequence['outputs.GetNexusRepositoryYumGroupYumSigningResult']:
        return pulumi.get(self, "yum_signings")


class AwaitableGetNexusRepositoryYumGroupResult(GetNexusRepositoryYumGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNexusRepositoryYumGroupResult(
            groups=self.groups,
            id=self.id,
            name=self.name,
            online=self.online,
            storages=self.storages,
            yum_signings=self.yum_signings)


def get_nexus_repository_yum_group(name: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNexusRepositoryYumGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nexus:index/getNexusRepositoryYumGroup:GetNexusRepositoryYumGroup', __args__, opts=opts, typ=GetNexusRepositoryYumGroupResult).value

    return AwaitableGetNexusRepositoryYumGroupResult(
        groups=__ret__.groups,
        id=__ret__.id,
        name=__ret__.name,
        online=__ret__.online,
        storages=__ret__.storages,
        yum_signings=__ret__.yum_signings)


@_utilities.lift_output_func(get_nexus_repository_yum_group)
def get_nexus_repository_yum_group_output(name: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNexusRepositoryYumGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
