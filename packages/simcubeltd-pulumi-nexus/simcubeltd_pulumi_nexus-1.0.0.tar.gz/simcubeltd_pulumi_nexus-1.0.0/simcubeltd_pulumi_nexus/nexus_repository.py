# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NexusRepositoryArgs', 'NexusRepository']

@pulumi.input_type
class NexusRepositoryArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 type: pulumi.Input[str],
                 apt_signings: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptSigningArgs']]]] = None,
                 apts: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptArgs']]]] = None,
                 bowers: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryBowerArgs']]]] = None,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryCleanupArgs']]]] = None,
                 docker_proxy: Optional[pulumi.Input['NexusRepositoryDockerProxyArgs']] = None,
                 dockers: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerArgs']]]] = None,
                 group: Optional[pulumi.Input['NexusRepositoryGroupArgs']] = None,
                 http_client: Optional[pulumi.Input['NexusRepositoryHttpClientArgs']] = None,
                 maven: Optional[pulumi.Input['NexusRepositoryMavenArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_cache: Optional[pulumi.Input['NexusRepositoryNegativeCacheArgs']] = None,
                 nuget_proxy: Optional[pulumi.Input['NexusRepositoryNugetProxyArgs']] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input['NexusRepositoryProxyArgs']] = None,
                 storage: Optional[pulumi.Input['NexusRepositoryStorageArgs']] = None,
                 yums: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumArgs']]]] = None):
        """
        The set of arguments for constructing a NexusRepository resource.
        :param pulumi.Input[str] format: Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
               `p2`, `pypi`, `raw`, `rubygems`, `yum`
        :param pulumi.Input[str] type: Repository type. Possible values: `group`, `hosted`, `proxy`
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptSigningArgs']]] apt_signings: Apt signing configuration for the repository
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptArgs']]] apts: Apt specific configuration of the repository
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryBowerArgs']]] bowers: Bower specific configuration of the repository
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryCleanupArgs']]] cleanups: Cleanup policies
        :param pulumi.Input['NexusRepositoryDockerProxyArgs'] docker_proxy: Configuration for docker proxy repository
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerArgs']]] dockers: Docker specific configuration of the repository
        :param pulumi.Input['NexusRepositoryGroupArgs'] group: Configuration for repository group
        :param pulumi.Input['NexusRepositoryHttpClientArgs'] http_client: HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
        :param pulumi.Input['NexusRepositoryMavenArgs'] maven: Maven specific configuration of the repository
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input['NexusRepositoryNegativeCacheArgs'] negative_cache: Configuration of the negative cache handling
        :param pulumi.Input['NexusRepositoryNugetProxyArgs'] nuget_proxy: Configuration for the nuget proxy repository
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input['NexusRepositoryProxyArgs'] proxy: Configuration for the proxy repository
        :param pulumi.Input['NexusRepositoryStorageArgs'] storage: The storage configuration of the repository
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumArgs']]] yums: Yum specific configuration of the repository
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "type", type)
        if apt_signings is not None:
            pulumi.set(__self__, "apt_signings", apt_signings)
        if apts is not None:
            pulumi.set(__self__, "apts", apts)
        if bowers is not None:
            pulumi.set(__self__, "bowers", bowers)
        if cleanups is not None:
            pulumi.set(__self__, "cleanups", cleanups)
        if docker_proxy is not None:
            pulumi.set(__self__, "docker_proxy", docker_proxy)
        if dockers is not None:
            pulumi.set(__self__, "dockers", dockers)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if http_client is not None:
            pulumi.set(__self__, "http_client", http_client)
        if maven is not None:
            pulumi.set(__self__, "maven", maven)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if negative_cache is not None:
            pulumi.set(__self__, "negative_cache", negative_cache)
        if nuget_proxy is not None:
            pulumi.set(__self__, "nuget_proxy", nuget_proxy)
        if online is not None:
            pulumi.set(__self__, "online", online)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if yums is not None:
            pulumi.set(__self__, "yums", yums)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
        `p2`, `pypi`, `raw`, `rubygems`, `yum`
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Repository type. Possible values: `group`, `hosted`, `proxy`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="aptSignings")
    def apt_signings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptSigningArgs']]]]:
        """
        Apt signing configuration for the repository
        """
        return pulumi.get(self, "apt_signings")

    @apt_signings.setter
    def apt_signings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptSigningArgs']]]]):
        pulumi.set(self, "apt_signings", value)

    @property
    @pulumi.getter
    def apts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptArgs']]]]:
        """
        Apt specific configuration of the repository
        """
        return pulumi.get(self, "apts")

    @apts.setter
    def apts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptArgs']]]]):
        pulumi.set(self, "apts", value)

    @property
    @pulumi.getter
    def bowers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryBowerArgs']]]]:
        """
        Bower specific configuration of the repository
        """
        return pulumi.get(self, "bowers")

    @bowers.setter
    def bowers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryBowerArgs']]]]):
        pulumi.set(self, "bowers", value)

    @property
    @pulumi.getter
    def cleanups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryCleanupArgs']]]]:
        """
        Cleanup policies
        """
        return pulumi.get(self, "cleanups")

    @cleanups.setter
    def cleanups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryCleanupArgs']]]]):
        pulumi.set(self, "cleanups", value)

    @property
    @pulumi.getter(name="dockerProxy")
    def docker_proxy(self) -> Optional[pulumi.Input['NexusRepositoryDockerProxyArgs']]:
        """
        Configuration for docker proxy repository
        """
        return pulumi.get(self, "docker_proxy")

    @docker_proxy.setter
    def docker_proxy(self, value: Optional[pulumi.Input['NexusRepositoryDockerProxyArgs']]):
        pulumi.set(self, "docker_proxy", value)

    @property
    @pulumi.getter
    def dockers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerArgs']]]]:
        """
        Docker specific configuration of the repository
        """
        return pulumi.get(self, "dockers")

    @dockers.setter
    def dockers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerArgs']]]]):
        pulumi.set(self, "dockers", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input['NexusRepositoryGroupArgs']]:
        """
        Configuration for repository group
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input['NexusRepositoryGroupArgs']]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="httpClient")
    def http_client(self) -> Optional[pulumi.Input['NexusRepositoryHttpClientArgs']]:
        """
        HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
        """
        return pulumi.get(self, "http_client")

    @http_client.setter
    def http_client(self, value: Optional[pulumi.Input['NexusRepositoryHttpClientArgs']]):
        pulumi.set(self, "http_client", value)

    @property
    @pulumi.getter
    def maven(self) -> Optional[pulumi.Input['NexusRepositoryMavenArgs']]:
        """
        Maven specific configuration of the repository
        """
        return pulumi.get(self, "maven")

    @maven.setter
    def maven(self, value: Optional[pulumi.Input['NexusRepositoryMavenArgs']]):
        pulumi.set(self, "maven", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> Optional[pulumi.Input['NexusRepositoryNegativeCacheArgs']]:
        """
        Configuration of the negative cache handling
        """
        return pulumi.get(self, "negative_cache")

    @negative_cache.setter
    def negative_cache(self, value: Optional[pulumi.Input['NexusRepositoryNegativeCacheArgs']]):
        pulumi.set(self, "negative_cache", value)

    @property
    @pulumi.getter(name="nugetProxy")
    def nuget_proxy(self) -> Optional[pulumi.Input['NexusRepositoryNugetProxyArgs']]:
        """
        Configuration for the nuget proxy repository
        """
        return pulumi.get(self, "nuget_proxy")

    @nuget_proxy.setter
    def nuget_proxy(self, value: Optional[pulumi.Input['NexusRepositoryNugetProxyArgs']]):
        pulumi.set(self, "nuget_proxy", value)

    @property
    @pulumi.getter
    def online(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @online.setter
    def online(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "online", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['NexusRepositoryProxyArgs']]:
        """
        Configuration for the proxy repository
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['NexusRepositoryProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['NexusRepositoryStorageArgs']]:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['NexusRepositoryStorageArgs']]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def yums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumArgs']]]]:
        """
        Yum specific configuration of the repository
        """
        return pulumi.get(self, "yums")

    @yums.setter
    def yums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumArgs']]]]):
        pulumi.set(self, "yums", value)


@pulumi.input_type
class _NexusRepositoryState:
    def __init__(__self__, *,
                 apt_signings: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptSigningArgs']]]] = None,
                 apts: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptArgs']]]] = None,
                 bowers: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryBowerArgs']]]] = None,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryCleanupArgs']]]] = None,
                 docker_proxy: Optional[pulumi.Input['NexusRepositoryDockerProxyArgs']] = None,
                 dockers: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerArgs']]]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input['NexusRepositoryGroupArgs']] = None,
                 http_client: Optional[pulumi.Input['NexusRepositoryHttpClientArgs']] = None,
                 maven: Optional[pulumi.Input['NexusRepositoryMavenArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_cache: Optional[pulumi.Input['NexusRepositoryNegativeCacheArgs']] = None,
                 nuget_proxy: Optional[pulumi.Input['NexusRepositoryNugetProxyArgs']] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input['NexusRepositoryProxyArgs']] = None,
                 storage: Optional[pulumi.Input['NexusRepositoryStorageArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 yums: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumArgs']]]] = None):
        """
        Input properties used for looking up and filtering NexusRepository resources.
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptSigningArgs']]] apt_signings: Apt signing configuration for the repository
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptArgs']]] apts: Apt specific configuration of the repository
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryBowerArgs']]] bowers: Bower specific configuration of the repository
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryCleanupArgs']]] cleanups: Cleanup policies
        :param pulumi.Input['NexusRepositoryDockerProxyArgs'] docker_proxy: Configuration for docker proxy repository
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerArgs']]] dockers: Docker specific configuration of the repository
        :param pulumi.Input[str] format: Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
               `p2`, `pypi`, `raw`, `rubygems`, `yum`
        :param pulumi.Input['NexusRepositoryGroupArgs'] group: Configuration for repository group
        :param pulumi.Input['NexusRepositoryHttpClientArgs'] http_client: HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
        :param pulumi.Input['NexusRepositoryMavenArgs'] maven: Maven specific configuration of the repository
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input['NexusRepositoryNegativeCacheArgs'] negative_cache: Configuration of the negative cache handling
        :param pulumi.Input['NexusRepositoryNugetProxyArgs'] nuget_proxy: Configuration for the nuget proxy repository
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input['NexusRepositoryProxyArgs'] proxy: Configuration for the proxy repository
        :param pulumi.Input['NexusRepositoryStorageArgs'] storage: The storage configuration of the repository
        :param pulumi.Input[str] type: Repository type. Possible values: `group`, `hosted`, `proxy`
        :param pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumArgs']]] yums: Yum specific configuration of the repository
        """
        if apt_signings is not None:
            pulumi.set(__self__, "apt_signings", apt_signings)
        if apts is not None:
            pulumi.set(__self__, "apts", apts)
        if bowers is not None:
            pulumi.set(__self__, "bowers", bowers)
        if cleanups is not None:
            pulumi.set(__self__, "cleanups", cleanups)
        if docker_proxy is not None:
            pulumi.set(__self__, "docker_proxy", docker_proxy)
        if dockers is not None:
            pulumi.set(__self__, "dockers", dockers)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if http_client is not None:
            pulumi.set(__self__, "http_client", http_client)
        if maven is not None:
            pulumi.set(__self__, "maven", maven)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if negative_cache is not None:
            pulumi.set(__self__, "negative_cache", negative_cache)
        if nuget_proxy is not None:
            pulumi.set(__self__, "nuget_proxy", nuget_proxy)
        if online is not None:
            pulumi.set(__self__, "online", online)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if yums is not None:
            pulumi.set(__self__, "yums", yums)

    @property
    @pulumi.getter(name="aptSignings")
    def apt_signings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptSigningArgs']]]]:
        """
        Apt signing configuration for the repository
        """
        return pulumi.get(self, "apt_signings")

    @apt_signings.setter
    def apt_signings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptSigningArgs']]]]):
        pulumi.set(self, "apt_signings", value)

    @property
    @pulumi.getter
    def apts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptArgs']]]]:
        """
        Apt specific configuration of the repository
        """
        return pulumi.get(self, "apts")

    @apts.setter
    def apts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryAptArgs']]]]):
        pulumi.set(self, "apts", value)

    @property
    @pulumi.getter
    def bowers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryBowerArgs']]]]:
        """
        Bower specific configuration of the repository
        """
        return pulumi.get(self, "bowers")

    @bowers.setter
    def bowers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryBowerArgs']]]]):
        pulumi.set(self, "bowers", value)

    @property
    @pulumi.getter
    def cleanups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryCleanupArgs']]]]:
        """
        Cleanup policies
        """
        return pulumi.get(self, "cleanups")

    @cleanups.setter
    def cleanups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryCleanupArgs']]]]):
        pulumi.set(self, "cleanups", value)

    @property
    @pulumi.getter(name="dockerProxy")
    def docker_proxy(self) -> Optional[pulumi.Input['NexusRepositoryDockerProxyArgs']]:
        """
        Configuration for docker proxy repository
        """
        return pulumi.get(self, "docker_proxy")

    @docker_proxy.setter
    def docker_proxy(self, value: Optional[pulumi.Input['NexusRepositoryDockerProxyArgs']]):
        pulumi.set(self, "docker_proxy", value)

    @property
    @pulumi.getter
    def dockers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerArgs']]]]:
        """
        Docker specific configuration of the repository
        """
        return pulumi.get(self, "dockers")

    @dockers.setter
    def dockers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryDockerArgs']]]]):
        pulumi.set(self, "dockers", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
        `p2`, `pypi`, `raw`, `rubygems`, `yum`
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input['NexusRepositoryGroupArgs']]:
        """
        Configuration for repository group
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input['NexusRepositoryGroupArgs']]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="httpClient")
    def http_client(self) -> Optional[pulumi.Input['NexusRepositoryHttpClientArgs']]:
        """
        HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
        """
        return pulumi.get(self, "http_client")

    @http_client.setter
    def http_client(self, value: Optional[pulumi.Input['NexusRepositoryHttpClientArgs']]):
        pulumi.set(self, "http_client", value)

    @property
    @pulumi.getter
    def maven(self) -> Optional[pulumi.Input['NexusRepositoryMavenArgs']]:
        """
        Maven specific configuration of the repository
        """
        return pulumi.get(self, "maven")

    @maven.setter
    def maven(self, value: Optional[pulumi.Input['NexusRepositoryMavenArgs']]):
        pulumi.set(self, "maven", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> Optional[pulumi.Input['NexusRepositoryNegativeCacheArgs']]:
        """
        Configuration of the negative cache handling
        """
        return pulumi.get(self, "negative_cache")

    @negative_cache.setter
    def negative_cache(self, value: Optional[pulumi.Input['NexusRepositoryNegativeCacheArgs']]):
        pulumi.set(self, "negative_cache", value)

    @property
    @pulumi.getter(name="nugetProxy")
    def nuget_proxy(self) -> Optional[pulumi.Input['NexusRepositoryNugetProxyArgs']]:
        """
        Configuration for the nuget proxy repository
        """
        return pulumi.get(self, "nuget_proxy")

    @nuget_proxy.setter
    def nuget_proxy(self, value: Optional[pulumi.Input['NexusRepositoryNugetProxyArgs']]):
        pulumi.set(self, "nuget_proxy", value)

    @property
    @pulumi.getter
    def online(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @online.setter
    def online(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "online", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['NexusRepositoryProxyArgs']]:
        """
        Configuration for the proxy repository
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['NexusRepositoryProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['NexusRepositoryStorageArgs']]:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['NexusRepositoryStorageArgs']]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Repository type. Possible values: `group`, `hosted`, `proxy`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def yums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumArgs']]]]:
        """
        Yum specific configuration of the repository
        """
        return pulumi.get(self, "yums")

    @yums.setter
    def yums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NexusRepositoryYumArgs']]]]):
        pulumi.set(self, "yums", value)


class NexusRepository(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apt_signings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptSigningArgs']]]]] = None,
                 apts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptArgs']]]]] = None,
                 bowers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryBowerArgs']]]]] = None,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryCleanupArgs']]]]] = None,
                 docker_proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryDockerProxyArgs']]] = None,
                 dockers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryDockerArgs']]]]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryGroupArgs']]] = None,
                 http_client: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryHttpClientArgs']]] = None,
                 maven: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryMavenArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_cache: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryNegativeCacheArgs']]] = None,
                 nuget_proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryNugetProxyArgs']]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryProxyArgs']]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryStorageArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 yums: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryYumArgs']]]]] = None,
                 __props__=None):
        """
        Create a NexusRepository resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptSigningArgs']]]] apt_signings: Apt signing configuration for the repository
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptArgs']]]] apts: Apt specific configuration of the repository
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryBowerArgs']]]] bowers: Bower specific configuration of the repository
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryCleanupArgs']]]] cleanups: Cleanup policies
        :param pulumi.Input[pulumi.InputType['NexusRepositoryDockerProxyArgs']] docker_proxy: Configuration for docker proxy repository
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryDockerArgs']]]] dockers: Docker specific configuration of the repository
        :param pulumi.Input[str] format: Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
               `p2`, `pypi`, `raw`, `rubygems`, `yum`
        :param pulumi.Input[pulumi.InputType['NexusRepositoryGroupArgs']] group: Configuration for repository group
        :param pulumi.Input[pulumi.InputType['NexusRepositoryHttpClientArgs']] http_client: HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
        :param pulumi.Input[pulumi.InputType['NexusRepositoryMavenArgs']] maven: Maven specific configuration of the repository
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryNegativeCacheArgs']] negative_cache: Configuration of the negative cache handling
        :param pulumi.Input[pulumi.InputType['NexusRepositoryNugetProxyArgs']] nuget_proxy: Configuration for the nuget proxy repository
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input[pulumi.InputType['NexusRepositoryProxyArgs']] proxy: Configuration for the proxy repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryStorageArgs']] storage: The storage configuration of the repository
        :param pulumi.Input[str] type: Repository type. Possible values: `group`, `hosted`, `proxy`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryYumArgs']]]] yums: Yum specific configuration of the repository
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NexusRepositoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NexusRepository resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NexusRepositoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NexusRepositoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apt_signings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptSigningArgs']]]]] = None,
                 apts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptArgs']]]]] = None,
                 bowers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryBowerArgs']]]]] = None,
                 cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryCleanupArgs']]]]] = None,
                 docker_proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryDockerProxyArgs']]] = None,
                 dockers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryDockerArgs']]]]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryGroupArgs']]] = None,
                 http_client: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryHttpClientArgs']]] = None,
                 maven: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryMavenArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 negative_cache: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryNegativeCacheArgs']]] = None,
                 nuget_proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryNugetProxyArgs']]] = None,
                 online: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryProxyArgs']]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryStorageArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 yums: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryYumArgs']]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NexusRepositoryArgs.__new__(NexusRepositoryArgs)

            __props__.__dict__["apt_signings"] = apt_signings
            __props__.__dict__["apts"] = apts
            __props__.__dict__["bowers"] = bowers
            __props__.__dict__["cleanups"] = cleanups
            __props__.__dict__["docker_proxy"] = docker_proxy
            __props__.__dict__["dockers"] = dockers
            if format is None and not opts.urn:
                raise TypeError("Missing required property 'format'")
            __props__.__dict__["format"] = format
            __props__.__dict__["group"] = group
            __props__.__dict__["http_client"] = http_client
            __props__.__dict__["maven"] = maven
            __props__.__dict__["name"] = name
            __props__.__dict__["negative_cache"] = negative_cache
            __props__.__dict__["nuget_proxy"] = nuget_proxy
            __props__.__dict__["online"] = online
            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["storage"] = storage
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["yums"] = yums
        super(NexusRepository, __self__).__init__(
            'nexus:index/nexusRepository:NexusRepository',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            apt_signings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptSigningArgs']]]]] = None,
            apts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptArgs']]]]] = None,
            bowers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryBowerArgs']]]]] = None,
            cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryCleanupArgs']]]]] = None,
            docker_proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryDockerProxyArgs']]] = None,
            dockers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryDockerArgs']]]]] = None,
            format: Optional[pulumi.Input[str]] = None,
            group: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryGroupArgs']]] = None,
            http_client: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryHttpClientArgs']]] = None,
            maven: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryMavenArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            negative_cache: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryNegativeCacheArgs']]] = None,
            nuget_proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryNugetProxyArgs']]] = None,
            online: Optional[pulumi.Input[bool]] = None,
            proxy: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryProxyArgs']]] = None,
            storage: Optional[pulumi.Input[pulumi.InputType['NexusRepositoryStorageArgs']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            yums: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryYumArgs']]]]] = None) -> 'NexusRepository':
        """
        Get an existing NexusRepository resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptSigningArgs']]]] apt_signings: Apt signing configuration for the repository
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryAptArgs']]]] apts: Apt specific configuration of the repository
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryBowerArgs']]]] bowers: Bower specific configuration of the repository
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryCleanupArgs']]]] cleanups: Cleanup policies
        :param pulumi.Input[pulumi.InputType['NexusRepositoryDockerProxyArgs']] docker_proxy: Configuration for docker proxy repository
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryDockerArgs']]]] dockers: Docker specific configuration of the repository
        :param pulumi.Input[str] format: Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
               `p2`, `pypi`, `raw`, `rubygems`, `yum`
        :param pulumi.Input[pulumi.InputType['NexusRepositoryGroupArgs']] group: Configuration for repository group
        :param pulumi.Input[pulumi.InputType['NexusRepositoryHttpClientArgs']] http_client: HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
        :param pulumi.Input[pulumi.InputType['NexusRepositoryMavenArgs']] maven: Maven specific configuration of the repository
        :param pulumi.Input[str] name: A unique identifier for this repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryNegativeCacheArgs']] negative_cache: Configuration of the negative cache handling
        :param pulumi.Input[pulumi.InputType['NexusRepositoryNugetProxyArgs']] nuget_proxy: Configuration for the nuget proxy repository
        :param pulumi.Input[bool] online: Whether this repository accepts incoming requests
        :param pulumi.Input[pulumi.InputType['NexusRepositoryProxyArgs']] proxy: Configuration for the proxy repository
        :param pulumi.Input[pulumi.InputType['NexusRepositoryStorageArgs']] storage: The storage configuration of the repository
        :param pulumi.Input[str] type: Repository type. Possible values: `group`, `hosted`, `proxy`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NexusRepositoryYumArgs']]]] yums: Yum specific configuration of the repository
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NexusRepositoryState.__new__(_NexusRepositoryState)

        __props__.__dict__["apt_signings"] = apt_signings
        __props__.__dict__["apts"] = apts
        __props__.__dict__["bowers"] = bowers
        __props__.__dict__["cleanups"] = cleanups
        __props__.__dict__["docker_proxy"] = docker_proxy
        __props__.__dict__["dockers"] = dockers
        __props__.__dict__["format"] = format
        __props__.__dict__["group"] = group
        __props__.__dict__["http_client"] = http_client
        __props__.__dict__["maven"] = maven
        __props__.__dict__["name"] = name
        __props__.__dict__["negative_cache"] = negative_cache
        __props__.__dict__["nuget_proxy"] = nuget_proxy
        __props__.__dict__["online"] = online
        __props__.__dict__["proxy"] = proxy
        __props__.__dict__["storage"] = storage
        __props__.__dict__["type"] = type
        __props__.__dict__["yums"] = yums
        return NexusRepository(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aptSignings")
    def apt_signings(self) -> pulumi.Output[Optional[Sequence['outputs.NexusRepositoryAptSigning']]]:
        """
        Apt signing configuration for the repository
        """
        return pulumi.get(self, "apt_signings")

    @property
    @pulumi.getter
    def apts(self) -> pulumi.Output[Optional[Sequence['outputs.NexusRepositoryApt']]]:
        """
        Apt specific configuration of the repository
        """
        return pulumi.get(self, "apts")

    @property
    @pulumi.getter
    def bowers(self) -> pulumi.Output[Optional[Sequence['outputs.NexusRepositoryBower']]]:
        """
        Bower specific configuration of the repository
        """
        return pulumi.get(self, "bowers")

    @property
    @pulumi.getter
    def cleanups(self) -> pulumi.Output[Optional[Sequence['outputs.NexusRepositoryCleanup']]]:
        """
        Cleanup policies
        """
        return pulumi.get(self, "cleanups")

    @property
    @pulumi.getter(name="dockerProxy")
    def docker_proxy(self) -> pulumi.Output[Optional['outputs.NexusRepositoryDockerProxy']]:
        """
        Configuration for docker proxy repository
        """
        return pulumi.get(self, "docker_proxy")

    @property
    @pulumi.getter
    def dockers(self) -> pulumi.Output[Optional[Sequence['outputs.NexusRepositoryDocker']]]:
        """
        Docker specific configuration of the repository
        """
        return pulumi.get(self, "dockers")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[str]:
        """
        Repository format. Possible values: `apt`, `bower`, `conan`, `docker`, `gitlfs`, `go`, `helm`, `maven2`, `npm`, `nuget`,
        `p2`, `pypi`, `raw`, `rubygems`, `yum`
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def group(self) -> pulumi.Output[Optional['outputs.NexusRepositoryGroup']]:
        """
        Configuration for repository group
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="httpClient")
    def http_client(self) -> pulumi.Output[Optional['outputs.NexusRepositoryHttpClient']]:
        """
        HTTP Client configuration for proxy repositories. Required for docker proxy repositories.
        """
        return pulumi.get(self, "http_client")

    @property
    @pulumi.getter
    def maven(self) -> pulumi.Output[Optional['outputs.NexusRepositoryMaven']]:
        """
        Maven specific configuration of the repository
        """
        return pulumi.get(self, "maven")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique identifier for this repository
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="negativeCache")
    def negative_cache(self) -> pulumi.Output[Optional['outputs.NexusRepositoryNegativeCache']]:
        """
        Configuration of the negative cache handling
        """
        return pulumi.get(self, "negative_cache")

    @property
    @pulumi.getter(name="nugetProxy")
    def nuget_proxy(self) -> pulumi.Output[Optional['outputs.NexusRepositoryNugetProxy']]:
        """
        Configuration for the nuget proxy repository
        """
        return pulumi.get(self, "nuget_proxy")

    @property
    @pulumi.getter
    def online(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether this repository accepts incoming requests
        """
        return pulumi.get(self, "online")

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output[Optional['outputs.NexusRepositoryProxy']]:
        """
        Configuration for the proxy repository
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[Optional['outputs.NexusRepositoryStorage']]:
        """
        The storage configuration of the repository
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Repository type. Possible values: `group`, `hosted`, `proxy`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def yums(self) -> pulumi.Output[Optional[Sequence['outputs.NexusRepositoryYum']]]:
        """
        Yum specific configuration of the repository
        """
        return pulumi.get(self, "yums")

