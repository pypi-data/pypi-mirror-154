# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNexusSecurityRoleResult',
    'AwaitableGetNexusSecurityRoleResult',
    'get_nexus_security_role',
    'get_nexus_security_role_output',
]

@pulumi.output_type
class GetNexusSecurityRoleResult:
    """
    A collection of values returned by GetNexusSecurityRole.
    """
    def __init__(__self__, description=None, id=None, name=None, privileges=None, roleid=None, roles=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if privileges and not isinstance(privileges, list):
            raise TypeError("Expected argument 'privileges' to be a list")
        pulumi.set(__self__, "privileges", privileges)
        if roleid and not isinstance(roleid, str):
            raise TypeError("Expected argument 'roleid' to be a str")
        pulumi.set(__self__, "roleid", roleid)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def roleid(self) -> str:
        return pulumi.get(self, "roleid")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")


class AwaitableGetNexusSecurityRoleResult(GetNexusSecurityRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNexusSecurityRoleResult(
            description=self.description,
            id=self.id,
            name=self.name,
            privileges=self.privileges,
            roleid=self.roleid,
            roles=self.roles)


def get_nexus_security_role(roleid: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNexusSecurityRoleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['roleid'] = roleid
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nexus:index/getNexusSecurityRole:GetNexusSecurityRole', __args__, opts=opts, typ=GetNexusSecurityRoleResult).value

    return AwaitableGetNexusSecurityRoleResult(
        description=__ret__.description,
        id=__ret__.id,
        name=__ret__.name,
        privileges=__ret__.privileges,
        roleid=__ret__.roleid,
        roles=__ret__.roles)


@_utilities.lift_output_func(get_nexus_security_role)
def get_nexus_security_role_output(roleid: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNexusSecurityRoleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
