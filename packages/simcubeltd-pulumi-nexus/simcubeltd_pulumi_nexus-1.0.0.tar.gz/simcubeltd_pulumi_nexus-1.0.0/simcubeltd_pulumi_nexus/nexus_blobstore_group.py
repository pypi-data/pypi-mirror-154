# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NexusBlobstoreGroupArgs', 'NexusBlobstoreGroup']

@pulumi.input_type
class NexusBlobstoreGroupArgs:
    def __init__(__self__, *,
                 fill_policy: pulumi.Input[str],
                 members: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: Optional[pulumi.Input[str]] = None,
                 soft_quota: Optional[pulumi.Input['NexusBlobstoreGroupSoftQuotaArgs']] = None):
        """
        The set of arguments for constructing a NexusBlobstoreGroup resource.
        :param pulumi.Input[str] fill_policy: The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of the names of blob stores that are members of this group
        :param pulumi.Input[str] name: Blobstore name
        :param pulumi.Input['NexusBlobstoreGroupSoftQuotaArgs'] soft_quota: Soft quota of the blobstore
        """
        pulumi.set(__self__, "fill_policy", fill_policy)
        pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if soft_quota is not None:
            pulumi.set(__self__, "soft_quota", soft_quota)

    @property
    @pulumi.getter(name="fillPolicy")
    def fill_policy(self) -> pulumi.Input[str]:
        """
        The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
        """
        return pulumi.get(self, "fill_policy")

    @fill_policy.setter
    def fill_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "fill_policy", value)

    @property
    @pulumi.getter
    def members(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of the names of blob stores that are members of this group
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Blobstore name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="softQuota")
    def soft_quota(self) -> Optional[pulumi.Input['NexusBlobstoreGroupSoftQuotaArgs']]:
        """
        Soft quota of the blobstore
        """
        return pulumi.get(self, "soft_quota")

    @soft_quota.setter
    def soft_quota(self, value: Optional[pulumi.Input['NexusBlobstoreGroupSoftQuotaArgs']]):
        pulumi.set(self, "soft_quota", value)


@pulumi.input_type
class _NexusBlobstoreGroupState:
    def __init__(__self__, *,
                 available_space_in_bytes: Optional[pulumi.Input[int]] = None,
                 blob_count: Optional[pulumi.Input[int]] = None,
                 fill_policy: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 soft_quota: Optional[pulumi.Input['NexusBlobstoreGroupSoftQuotaArgs']] = None,
                 total_size_in_bytes: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering NexusBlobstoreGroup resources.
        :param pulumi.Input[int] available_space_in_bytes: Available space in Bytes
        :param pulumi.Input[int] blob_count: Count of blobs
        :param pulumi.Input[str] fill_policy: The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of the names of blob stores that are members of this group
        :param pulumi.Input[str] name: Blobstore name
        :param pulumi.Input['NexusBlobstoreGroupSoftQuotaArgs'] soft_quota: Soft quota of the blobstore
        :param pulumi.Input[int] total_size_in_bytes: The total size of the blobstore in Bytes
        """
        if available_space_in_bytes is not None:
            pulumi.set(__self__, "available_space_in_bytes", available_space_in_bytes)
        if blob_count is not None:
            pulumi.set(__self__, "blob_count", blob_count)
        if fill_policy is not None:
            pulumi.set(__self__, "fill_policy", fill_policy)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if soft_quota is not None:
            pulumi.set(__self__, "soft_quota", soft_quota)
        if total_size_in_bytes is not None:
            pulumi.set(__self__, "total_size_in_bytes", total_size_in_bytes)

    @property
    @pulumi.getter(name="availableSpaceInBytes")
    def available_space_in_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Available space in Bytes
        """
        return pulumi.get(self, "available_space_in_bytes")

    @available_space_in_bytes.setter
    def available_space_in_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "available_space_in_bytes", value)

    @property
    @pulumi.getter(name="blobCount")
    def blob_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of blobs
        """
        return pulumi.get(self, "blob_count")

    @blob_count.setter
    def blob_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "blob_count", value)

    @property
    @pulumi.getter(name="fillPolicy")
    def fill_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
        """
        return pulumi.get(self, "fill_policy")

    @fill_policy.setter
    def fill_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_policy", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of the names of blob stores that are members of this group
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Blobstore name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="softQuota")
    def soft_quota(self) -> Optional[pulumi.Input['NexusBlobstoreGroupSoftQuotaArgs']]:
        """
        Soft quota of the blobstore
        """
        return pulumi.get(self, "soft_quota")

    @soft_quota.setter
    def soft_quota(self, value: Optional[pulumi.Input['NexusBlobstoreGroupSoftQuotaArgs']]):
        pulumi.set(self, "soft_quota", value)

    @property
    @pulumi.getter(name="totalSizeInBytes")
    def total_size_in_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        The total size of the blobstore in Bytes
        """
        return pulumi.get(self, "total_size_in_bytes")

    @total_size_in_bytes.setter
    def total_size_in_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_size_in_bytes", value)


class NexusBlobstoreGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 fill_policy: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 soft_quota: Optional[pulumi.Input[pulumi.InputType['NexusBlobstoreGroupSoftQuotaArgs']]] = None,
                 __props__=None):
        """
        Create a NexusBlobstoreGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] fill_policy: The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of the names of blob stores that are members of this group
        :param pulumi.Input[str] name: Blobstore name
        :param pulumi.Input[pulumi.InputType['NexusBlobstoreGroupSoftQuotaArgs']] soft_quota: Soft quota of the blobstore
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NexusBlobstoreGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NexusBlobstoreGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NexusBlobstoreGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NexusBlobstoreGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 fill_policy: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 soft_quota: Optional[pulumi.Input[pulumi.InputType['NexusBlobstoreGroupSoftQuotaArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NexusBlobstoreGroupArgs.__new__(NexusBlobstoreGroupArgs)

            if fill_policy is None and not opts.urn:
                raise TypeError("Missing required property 'fill_policy'")
            __props__.__dict__["fill_policy"] = fill_policy
            if members is None and not opts.urn:
                raise TypeError("Missing required property 'members'")
            __props__.__dict__["members"] = members
            __props__.__dict__["name"] = name
            __props__.__dict__["soft_quota"] = soft_quota
            __props__.__dict__["available_space_in_bytes"] = None
            __props__.__dict__["blob_count"] = None
            __props__.__dict__["total_size_in_bytes"] = None
        super(NexusBlobstoreGroup, __self__).__init__(
            'nexus:index/nexusBlobstoreGroup:NexusBlobstoreGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            available_space_in_bytes: Optional[pulumi.Input[int]] = None,
            blob_count: Optional[pulumi.Input[int]] = None,
            fill_policy: Optional[pulumi.Input[str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            soft_quota: Optional[pulumi.Input[pulumi.InputType['NexusBlobstoreGroupSoftQuotaArgs']]] = None,
            total_size_in_bytes: Optional[pulumi.Input[int]] = None) -> 'NexusBlobstoreGroup':
        """
        Get an existing NexusBlobstoreGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] available_space_in_bytes: Available space in Bytes
        :param pulumi.Input[int] blob_count: Count of blobs
        :param pulumi.Input[str] fill_policy: The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of the names of blob stores that are members of this group
        :param pulumi.Input[str] name: Blobstore name
        :param pulumi.Input[pulumi.InputType['NexusBlobstoreGroupSoftQuotaArgs']] soft_quota: Soft quota of the blobstore
        :param pulumi.Input[int] total_size_in_bytes: The total size of the blobstore in Bytes
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NexusBlobstoreGroupState.__new__(_NexusBlobstoreGroupState)

        __props__.__dict__["available_space_in_bytes"] = available_space_in_bytes
        __props__.__dict__["blob_count"] = blob_count
        __props__.__dict__["fill_policy"] = fill_policy
        __props__.__dict__["members"] = members
        __props__.__dict__["name"] = name
        __props__.__dict__["soft_quota"] = soft_quota
        __props__.__dict__["total_size_in_bytes"] = total_size_in_bytes
        return NexusBlobstoreGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="availableSpaceInBytes")
    def available_space_in_bytes(self) -> pulumi.Output[int]:
        """
        Available space in Bytes
        """
        return pulumi.get(self, "available_space_in_bytes")

    @property
    @pulumi.getter(name="blobCount")
    def blob_count(self) -> pulumi.Output[int]:
        """
        Count of blobs
        """
        return pulumi.get(self, "blob_count")

    @property
    @pulumi.getter(name="fillPolicy")
    def fill_policy(self) -> pulumi.Output[str]:
        """
        The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
        """
        return pulumi.get(self, "fill_policy")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence[str]]:
        """
        List of the names of blob stores that are members of this group
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Blobstore name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="softQuota")
    def soft_quota(self) -> pulumi.Output[Optional['outputs.NexusBlobstoreGroupSoftQuota']]:
        """
        Soft quota of the blobstore
        """
        return pulumi.get(self, "soft_quota")

    @property
    @pulumi.getter(name="totalSizeInBytes")
    def total_size_in_bytes(self) -> pulumi.Output[int]:
        """
        The total size of the blobstore in Bytes
        """
        return pulumi.get(self, "total_size_in_bytes")

