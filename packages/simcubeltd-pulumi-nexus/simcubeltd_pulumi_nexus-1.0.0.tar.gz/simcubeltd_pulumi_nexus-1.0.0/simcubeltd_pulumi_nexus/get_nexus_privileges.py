# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetNexusPrivilegesResult',
    'AwaitableGetNexusPrivilegesResult',
    'get_nexus_privileges',
    'get_nexus_privileges_output',
]

@pulumi.output_type
class GetNexusPrivilegesResult:
    """
    A collection of values returned by GetNexusPrivileges.
    """
    def __init__(__self__, domain=None, format=None, id=None, name=None, privileges=None, repository=None, type=None):
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if format and not isinstance(format, str):
            raise TypeError("Expected argument 'format' to be a str")
        pulumi.set(__self__, "format", format)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if privileges and not isinstance(privileges, list):
            raise TypeError("Expected argument 'privileges' to be a list")
        pulumi.set(__self__, "privileges", privileges)
        if repository and not isinstance(repository, str):
            raise TypeError("Expected argument 'repository' to be a str")
        pulumi.set(__self__, "repository", repository)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence['outputs.GetNexusPrivilegesPrivilegeResult']:
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


class AwaitableGetNexusPrivilegesResult(GetNexusPrivilegesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNexusPrivilegesResult(
            domain=self.domain,
            format=self.format,
            id=self.id,
            name=self.name,
            privileges=self.privileges,
            repository=self.repository,
            type=self.type)


def get_nexus_privileges(domain: Optional[str] = None,
                         format: Optional[str] = None,
                         name: Optional[str] = None,
                         repository: Optional[str] = None,
                         type: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNexusPrivilegesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['format'] = format
    __args__['name'] = name
    __args__['repository'] = repository
    __args__['type'] = type
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nexus:index/getNexusPrivileges:GetNexusPrivileges', __args__, opts=opts, typ=GetNexusPrivilegesResult).value

    return AwaitableGetNexusPrivilegesResult(
        domain=__ret__.domain,
        format=__ret__.format,
        id=__ret__.id,
        name=__ret__.name,
        privileges=__ret__.privileges,
        repository=__ret__.repository,
        type=__ret__.type)


@_utilities.lift_output_func(get_nexus_privileges)
def get_nexus_privileges_output(domain: Optional[pulumi.Input[Optional[str]]] = None,
                                format: Optional[pulumi.Input[Optional[str]]] = None,
                                name: Optional[pulumi.Input[Optional[str]]] = None,
                                repository: Optional[pulumi.Input[Optional[str]]] = None,
                                type: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNexusPrivilegesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
