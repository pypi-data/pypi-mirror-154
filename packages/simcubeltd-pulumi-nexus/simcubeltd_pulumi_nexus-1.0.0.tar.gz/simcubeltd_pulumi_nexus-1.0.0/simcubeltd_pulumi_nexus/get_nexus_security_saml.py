# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNexusSecuritySamlResult',
    'AwaitableGetNexusSecuritySamlResult',
    'get_nexus_security_saml',
]

@pulumi.output_type
class GetNexusSecuritySamlResult:
    """
    A collection of values returned by GetNexusSecuritySaml.
    """
    def __init__(__self__, email_attribute=None, entity_id=None, first_name_attribute=None, groups_attribute=None, id=None, idp_metadata=None, last_name_attribute=None, username_attribute=None, validate_assertion_signature=None, validate_response_signature=None):
        if email_attribute and not isinstance(email_attribute, str):
            raise TypeError("Expected argument 'email_attribute' to be a str")
        pulumi.set(__self__, "email_attribute", email_attribute)
        if entity_id and not isinstance(entity_id, str):
            raise TypeError("Expected argument 'entity_id' to be a str")
        pulumi.set(__self__, "entity_id", entity_id)
        if first_name_attribute and not isinstance(first_name_attribute, str):
            raise TypeError("Expected argument 'first_name_attribute' to be a str")
        pulumi.set(__self__, "first_name_attribute", first_name_attribute)
        if groups_attribute and not isinstance(groups_attribute, str):
            raise TypeError("Expected argument 'groups_attribute' to be a str")
        pulumi.set(__self__, "groups_attribute", groups_attribute)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idp_metadata and not isinstance(idp_metadata, str):
            raise TypeError("Expected argument 'idp_metadata' to be a str")
        pulumi.set(__self__, "idp_metadata", idp_metadata)
        if last_name_attribute and not isinstance(last_name_attribute, str):
            raise TypeError("Expected argument 'last_name_attribute' to be a str")
        pulumi.set(__self__, "last_name_attribute", last_name_attribute)
        if username_attribute and not isinstance(username_attribute, str):
            raise TypeError("Expected argument 'username_attribute' to be a str")
        pulumi.set(__self__, "username_attribute", username_attribute)
        if validate_assertion_signature and not isinstance(validate_assertion_signature, bool):
            raise TypeError("Expected argument 'validate_assertion_signature' to be a bool")
        pulumi.set(__self__, "validate_assertion_signature", validate_assertion_signature)
        if validate_response_signature and not isinstance(validate_response_signature, bool):
            raise TypeError("Expected argument 'validate_response_signature' to be a bool")
        pulumi.set(__self__, "validate_response_signature", validate_response_signature)

    @property
    @pulumi.getter(name="emailAttribute")
    def email_attribute(self) -> str:
        return pulumi.get(self, "email_attribute")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="firstNameAttribute")
    def first_name_attribute(self) -> str:
        return pulumi.get(self, "first_name_attribute")

    @property
    @pulumi.getter(name="groupsAttribute")
    def groups_attribute(self) -> str:
        return pulumi.get(self, "groups_attribute")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpMetadata")
    def idp_metadata(self) -> str:
        return pulumi.get(self, "idp_metadata")

    @property
    @pulumi.getter(name="lastNameAttribute")
    def last_name_attribute(self) -> str:
        return pulumi.get(self, "last_name_attribute")

    @property
    @pulumi.getter(name="usernameAttribute")
    def username_attribute(self) -> str:
        return pulumi.get(self, "username_attribute")

    @property
    @pulumi.getter(name="validateAssertionSignature")
    def validate_assertion_signature(self) -> bool:
        return pulumi.get(self, "validate_assertion_signature")

    @property
    @pulumi.getter(name="validateResponseSignature")
    def validate_response_signature(self) -> bool:
        return pulumi.get(self, "validate_response_signature")


class AwaitableGetNexusSecuritySamlResult(GetNexusSecuritySamlResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNexusSecuritySamlResult(
            email_attribute=self.email_attribute,
            entity_id=self.entity_id,
            first_name_attribute=self.first_name_attribute,
            groups_attribute=self.groups_attribute,
            id=self.id,
            idp_metadata=self.idp_metadata,
            last_name_attribute=self.last_name_attribute,
            username_attribute=self.username_attribute,
            validate_assertion_signature=self.validate_assertion_signature,
            validate_response_signature=self.validate_response_signature)


def get_nexus_security_saml(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNexusSecuritySamlResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nexus:index/getNexusSecuritySaml:GetNexusSecuritySaml', __args__, opts=opts, typ=GetNexusSecuritySamlResult).value

    return AwaitableGetNexusSecuritySamlResult(
        email_attribute=__ret__.email_attribute,
        entity_id=__ret__.entity_id,
        first_name_attribute=__ret__.first_name_attribute,
        groups_attribute=__ret__.groups_attribute,
        id=__ret__.id,
        idp_metadata=__ret__.idp_metadata,
        last_name_attribute=__ret__.last_name_attribute,
        username_attribute=__ret__.username_attribute,
        validate_assertion_signature=__ret__.validate_assertion_signature,
        validate_response_signature=__ret__.validate_response_signature)
