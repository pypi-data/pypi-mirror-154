import abc
import numpy as np
from .. import typing as tp
from .base import LikeProperty, Operation, Property, PropertySequence
from abc import abstractmethod

class Point(Property):
    def __init__(self, point: PropertySequence) -> None: ...
    def get(self) -> np.ndarray: ...

class PointOperation(Operation, metaclass=abc.ABCMeta):
    def __call__(self, **params) -> tp.Callable[[LikePoint], Point]: ...
    @abstractmethod
    def operation(self, obj: tp.NDArray, **params) -> tp.NDArray: ...

class PointShift(PointOperation):
    def __init__(self, shift: LikePoint) -> None: ...
    def __call__(self, **params) -> tp.Callable[[LikePoint], Point]: ...
    def operation(self, obj: tp.NDArray, **params) -> tp.NDArray: ...

class PointRotate(PointOperation):
    def __init__(self, angle: LikeProperty, pivot: LikePoint = ...) -> None: ...
    def __call__(self, **params) -> tp.Callable[[LikePoint], Point]: ...
    def operation(self, obj: tp.NDArray, **params) -> tp.NDArray: ...

class PointInflation(PointOperation):
    def __init__(self, factor: LikeProperty, pivot: LikePoint = ...) -> None: ...
    def __call__(self, **params) -> tp.Callable[[LikePoint], Point]: ...
    def operation(self, obj: tp.NDArray, **params) -> tp.NDArray: ...
