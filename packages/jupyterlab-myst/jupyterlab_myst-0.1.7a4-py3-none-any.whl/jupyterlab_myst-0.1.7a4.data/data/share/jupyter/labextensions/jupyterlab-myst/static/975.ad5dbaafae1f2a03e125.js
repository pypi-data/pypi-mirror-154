(self.webpackChunkjupyterlab_myst=self.webpackChunkjupyterlab_myst||[]).push([[975],{7975:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>g});var i=n(5626);const a="executablebooks/jupyterlab-markup",s=(0,i.simpleMarkdownItPlugin)(a,{id:"markdown-it-front-matter",title:"Front Matter",description:"Plugin for processing front matter for markdown-it markdown parser",documentationUrls:{Plugin:"https://github.com/ParkSB/markdown-it-front-matter"},examples:{"Example ":"---\nvalid-front-matter: true\n---"},plugin:async()=>{const t=await n.e(588).then(n.t.bind(n,4201,23));function e(t){}return[function(n,i){t.default(n,e)}]}});var o=n(9477),r=n.n(o),l=n(4321);const c="eval-expr";class u extends l.Role{run(t){const e=new this.state.Token("expr","input",0);return e.attrSet("class",c),e.attrSet("type","hidden"),e.attrSet("value",t.content),e.content=t.content,[e]}}const d=l.directivesDefault.figure,{uri:m}=l.directiveOptions;class p extends l.Directive{constructor(){super(...arguments),this.required_arguments=1,this.optional_arguments=0,this.final_argument_whitespace=!1,this.has_content=!1,this.rawOptions=!0}run(t){const e=this.createToken("expr","input",0,{content:t.body,map:t.bodyMap}),n=m(t.args[0]||"");return e.attrSet("type","hidden"),e.attrSet("class",c),e.attrSet("value",n),[e]}}class h extends d{create_image(t){const e=m(t.args[0]||""),n=this.createToken("expr","input",0,{map:t.map,block:!0});n.attrSet("type","hidden"),n.attrSet("class",c),n.attrSet("value",e),n.attrSet("alt",t.options.alt||"");const i=[];return t.options.alt&&this.state.md.inline.parse(t.options.alt,this.state.md,this.state.env,i),n.children=i,t.options.height&&n.attrSet("height",t.options.height),t.options.width&&n.attrSet("width",t.options.width),t.options.align&&n.attrJoin("class",`align-${t.options.align}`),t.options.class&&n.attrJoin("class",t.options.class.join(" ")),n}}const g=[s,(0,i.simpleMarkdownItPlugin)(a,{id:"markdown-it-docutils",title:"Docutils",description:"Plugin for implementing docutils style roles (inline extension point) and directives (block extension point)",documentationUrls:{Plugin:"https://github.com/executablebooks/markdown-it-docutils"},examples:{"Example ":"```{name} argument\n:option: value\n\ncontent\n```"},plugin:async()=>{const t=await Promise.resolve().then(n.t.bind(n,4321,23));return[function(e,n){var i,a;const s=Object.assign(Object.assign({},null!==(i=null==n?void 0:n.roles)&&void 0!==i?i:l.rolesDefault),{eval:u}),o=Object.assign(Object.assign({},null!==(a=null==n?void 0:n.directives)&&void 0!==a?a:l.directivesDefault),{"eval:figure":h,eval:p});t.default(e,Object.assign(Object.assign({},n),{roles:s,directives:o})),e.renderer.rules.math_block=(t,e)=>{const n=t[e],i=n.content.trim(),a=r().renderToString(i,{displayMode:!0,throwOnError:!1,output:"htmlAndMathml"});return`<div class="${n.attrGet("class")}">${a}</div>`},e.renderer.rules.math_inline=(t,e)=>{const n=t[e],i=n.content.trim(),a=r().renderToString(i,{displayMode:!1,throwOnError:!1,output:"htmlAndMathml"});return`<span class="${n.attrGet("class")}">${a}</span>`}}]}}),(0,i.simpleMarkdownItPlugin)(a,{id:"markdown-it-amsmath",title:"amsmath",description:"Plugin for amsmath LaTeX environments",documentationUrls:{Plugin:"https://github.com/executablebooks/markdown-it-amsmath"},examples:{"Example ":"\\begin{equation}\na = 1\n\\end{equation}"},plugin:async()=>[(await n.e(771).then(n.t.bind(n,5099,23))).default]}),(0,i.simpleMarkdownItPlugin)(a,{id:"markdown-it-myst-extras",title:"MyST Extras",description:"Additional markdown-it plugins required for the MyST specification",documentationUrls:{Plugin:"https://github.com/executablebooks/markdown-it-myst-extras"},examples:{Blockquotes:"% comment","Block Breaks":"+++","MyST Targets":"(name)=","Colon Fence":":::name\ncontained text\n :::"},plugin:async()=>{const t=await n.e(866).then(n.t.bind(n,7936,23));return[function(e,n){t.mystBlockPlugin(e),t.colonFencePlugin(e)}]}})]}}]);