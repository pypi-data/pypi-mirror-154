{"version":3,"file":"lib_index_js-webpack_sharing_consume_default_lumino_coreutils-webpack_sharing_consume_default-132265.e27cd975629bcb477394.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACjCwD;AACD;AACN;AACe;AACrB;AAC3C;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,kEAAgB;AAChD,eAAe,2DAAS;AACxB;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,8BAA8B,oDAAgB;AAC9C;AACA;AACA,aAAa;AACb,wCAAwC,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA,kBAAkB,kEAAI;AACtB;AACA,SAAS;AACT,0BAA0B,8CAA8C;AACxE;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;AC5CyB;AACF;AACmB;AAChE;AACO,+BAA+B,yDAAY;AAClD;AACA;AACA;AACA;AACA;AACA,0BAA0B,kEAAI;AAC9B;AACA,2BAA2B,sDAAiB;AAC5C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACzBwC;AACD;AACY;AACZ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+CAAQ;AAC5C;AACA,QAAQ,oDAAU,cAAc,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sFAAsF,OAAO;AAC7F;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,6BAA6B,iDAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,wDAAwD,SAAS;AACjE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,0DAAmB,CAAC,uDAAc;AAC9C,QAAQ,0DAAmB,SAAS,uCAAuC;AAC3E,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E;AACA;AACA,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E;AACA;AACA,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E;AACA;AACA,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB,SAAS,uCAAuC;AAC3E,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E;AACA;AACA,QAAQ,0DAAmB,SAAS,uCAAuC;AAC3E,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E;AACA;AACA,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E;AACA;AACA;AACA,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E;AACA;AACA,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E;AACA;AACA,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E;AACA;AACA,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E;AACA;AACA,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E;AACA;AACA,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E;AACA;AACA;AACO,gCAAgC,6DAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,gBAAgB,sFAAsF;AACzI;AACA","sources":["webpack://jupyterlab-kernel-usage/./lib/handler.js","webpack://jupyterlab-kernel-usage/./lib/index.js","webpack://jupyterlab-kernel-usage/./lib/panel.js","webpack://jupyterlab-kernel-usage/./lib/widget.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyterlab_kernel_usage', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { INotebookTracker } from '@jupyterlab/notebook';\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { jupyterIcon as icon } from '@jupyterlab/ui-components';\nimport { KernelUsagePanel } from './panel';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.getKernelUsage = 'kernel-usage:get';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for the kernelusage extension.\n */\nconst plugin = {\n    id: 'kernelusage:plugin',\n    requires: [ICommandPalette, INotebookTracker],\n    optional: [ILauncher],\n    autoStart: true,\n    activate: (app, palette, notebookTracker, launcher) => {\n        const { commands, shell } = app;\n        const category = 'Kernel Resource';\n        if (launcher) {\n            launcher.add({\n                command: CommandIDs.getKernelUsage,\n                category: category\n            });\n        }\n        async function createPanel() {\n            const panel = new KernelUsagePanel({\n                widgetAdded: notebookTracker.widgetAdded,\n                currentNotebookChanged: notebookTracker.currentChanged\n            });\n            shell.add(panel, 'right', { rank: 200 });\n            return panel;\n        }\n        commands.addCommand(CommandIDs.getKernelUsage, {\n            label: 'Kernel Usage',\n            caption: 'Kernel Usage',\n            icon: icon,\n            execute: createPanel\n        });\n        palette.addItem({ command: CommandIDs.getKernelUsage, category });\n        createPanel();\n    }\n};\nexport default plugin;\n","import { StackedPanel } from '@lumino/widgets';\nimport { KernelUsageWidget } from './widget';\nimport { jupyterIcon as icon } from '@jupyterlab/ui-components';\nconst PANEL_CLASS = 'jp-kernelusage-view';\nexport class KernelUsagePanel extends StackedPanel {\n    constructor(props) {\n        super();\n        this.addClass(PANEL_CLASS);\n        this.id = 'kernelusage-panel-id';\n        this.title.caption = 'Kernel Usage';\n        this.title.icon = icon;\n        this.title.closable = true;\n        const widget = new KernelUsageWidget({\n            widgetAdded: props.widgetAdded,\n            currentNotebookChanged: props.currentNotebookChanged\n        });\n        this.addWidget(widget);\n    }\n    dispose() {\n        super.dispose();\n    }\n    onCloseRequest(msg) {\n        super.onCloseRequest(msg);\n        this.dispose();\n    }\n}\n","import React, { useState } from 'react';\nimport { Poll } from '@lumino/polling';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { requestAPI } from './handler';\nconst UNKONWN_USAGE = {\n    kernel_cpu: -1,\n    kernel_memory: -1,\n    host_cpu_percent: -1,\n    host_virtual_memory: {\n        active: -1,\n        available: -1,\n        free: -1,\n        inactive: -1,\n        percent: -1,\n        total: -1,\n        used: -1,\n        wired: -1\n    }\n};\nconst POLL_INTERVAL_SEC = 5;\nconst POLL_MAX_INTERVAL_SEC = 300;\nconst kernelPools = new Map();\nconst getUsage = (kernelId) => {\n    const kernelPoll = kernelPools.get(kernelId);\n    if (kernelPoll) {\n        return kernelPoll.usage;\n    }\n    return UNKONWN_USAGE;\n};\nconst KernelUsage = (props) => {\n    const [kernelId, setKernelId] = useState();\n    const requestUsage = async (kernelId) => {\n        requestAPI(`get_usage/${kernelId}`)\n            .then(data => {\n            const kernelPoll = kernelPools.get(kernelId);\n            if (kernelPoll) {\n                kernelPoll.usage = data.content;\n                kernelPools.set(kernelId, kernelPoll);\n            }\n        })\n            .catch(reason => {\n            console.error(`The kernelusage server extension has returned an error.\\n${reason}`);\n            const kernelPoll = kernelPools.get(kernelId);\n            kernelPoll === null || kernelPoll === void 0 ? void 0 : kernelPoll.poll.stop().then(() => {\n                kernelPools.delete(kernelId);\n            });\n        });\n    };\n    const doPoll = (kernelId) => {\n        let kernelPoll = kernelPools.get(kernelId);\n        if (!kernelPoll) {\n            const poll = new Poll({\n                auto: true,\n                factory: () => requestUsage(kernelId),\n                frequency: {\n                    interval: POLL_INTERVAL_SEC * 1000,\n                    backoff: true,\n                    max: POLL_MAX_INTERVAL_SEC * 1000\n                },\n                name: `@jupyterlab/kernel:KernelUsage#${kernelId}`,\n                standby: 'when-hidden'\n            });\n            kernelPoll = {\n                poll,\n                usage: UNKONWN_USAGE\n            };\n            kernelPools.set(kernelId, kernelPoll);\n        }\n    };\n    props.currentNotebookChanged.connect((sender, panel) => {\n        var _a, _b, _c, _d, _e;\n        panel === null || panel === void 0 ? void 0 : panel.sessionContext.kernelChanged.connect((_sender, args) => {\n            var _a;\n            const kernelId = (_a = args.newValue) === null || _a === void 0 ? void 0 : _a.id;\n            setKernelId(kernelId);\n            doPoll(kernelId);\n        });\n        if (((_a = panel === null || panel === void 0 ? void 0 : panel.sessionContext.session) === null || _a === void 0 ? void 0 : _a.id) !== kernelId) {\n            if ((_c = (_b = panel === null || panel === void 0 ? void 0 : panel.sessionContext.session) === null || _b === void 0 ? void 0 : _b.kernel) === null || _c === void 0 ? void 0 : _c.id) {\n                const kernelId = (_e = (_d = panel === null || panel === void 0 ? void 0 : panel.sessionContext.session) === null || _d === void 0 ? void 0 : _d.kernel) === null || _e === void 0 ? void 0 : _e.id;\n                setKernelId(kernelId);\n                doPoll(kernelId);\n            }\n        }\n    });\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"h3\", { className: \"jp-kernelusage-separator\" }, \"Kernel Usage\"),\n        React.createElement(\"div\", { className: \"jp-kernelusage-separator\" },\n            \"Kernel ID: \",\n            kernelId),\n        React.createElement(\"div\", { className: \"jp-kernelusage-separator\" },\n            \"CPU: \",\n            kernelId && getUsage(kernelId).kernel_cpu),\n        React.createElement(\"div\", { className: \"jp-kernelusage-separator\" },\n            \"Memory: \",\n            kernelId && getUsage(kernelId).kernel_memory),\n        React.createElement(\"hr\", null),\n        React.createElement(\"h4\", { className: \"jp-kernelusage-separator\" }, \"Host CPU\"),\n        React.createElement(\"div\", { className: \"jp-kernelusage-separator\" },\n            \"Percentage \",\n            kernelId && getUsage(kernelId).host_cpu_percent),\n        React.createElement(\"h4\", { className: \"jp-kernelusage-separator\" }, \"Host Virtual Memory\"),\n        React.createElement(\"div\", { className: \"jp-kernelusage-separator\" },\n            \"Active: \",\n            kernelId && getUsage(kernelId).host_virtual_memory.active),\n        React.createElement(\"div\", { className: \"jp-kernelusage-separator\" },\n            \"Available:\",\n            ' ',\n            kernelId && getUsage(kernelId).host_virtual_memory.available),\n        React.createElement(\"div\", { className: \"jp-kernelusage-separator\" },\n            \"Free: \",\n            kernelId && getUsage(kernelId).host_virtual_memory.free),\n        React.createElement(\"div\", { className: \"jp-kernelusage-separator\" },\n            \"Inactive: \",\n            kernelId && getUsage(kernelId).host_virtual_memory.inactive),\n        React.createElement(\"div\", { className: \"jp-kernelusage-separator\" },\n            \"Percent: \",\n            kernelId && getUsage(kernelId).host_virtual_memory.percent),\n        React.createElement(\"div\", { className: \"jp-kernelusage-separator\" },\n            \"Total: \",\n            kernelId && getUsage(kernelId).host_virtual_memory.total),\n        React.createElement(\"div\", { className: \"jp-kernelusage-separator\" },\n            \"Used: \",\n            kernelId && getUsage(kernelId).host_virtual_memory.used),\n        React.createElement(\"div\", { className: \"jp-kernelusage-separator\" },\n            \"Wired: \",\n            kernelId && getUsage(kernelId).host_virtual_memory.wired)));\n};\nexport class KernelUsageWidget extends ReactWidget {\n    constructor(props) {\n        super();\n        this._widgetAdded = props.widgetAdded;\n        this._currentNotebookChanged = props.currentNotebookChanged;\n    }\n    render() {\n        return (React.createElement(KernelUsage, { widgetAdded: this._widgetAdded, currentNotebookChanged: this._currentNotebookChanged }));\n    }\n}\n"],"names":[],"sourceRoot":""}