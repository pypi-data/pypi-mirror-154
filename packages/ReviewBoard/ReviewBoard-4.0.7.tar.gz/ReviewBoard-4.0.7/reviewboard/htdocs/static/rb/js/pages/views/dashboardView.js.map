{"version":3,"file":"dashboardView.js","names":["DashboardActionsView","Backbone","View","extend","template","_","events","render","show_archived","model","get","$el","html","close_discarded_text","close_submitted_text","archive_text","mute_text","read_only","RB","UserSession","instance","unarchive_text","unmute_text","$summary","$","listenTo","count","text","interpolate","_onCloseDiscardedClicked","ev","stopPropagation","preventDefault","_closeReviewRequests","ReviewRequest","CLOSE_DISCARDED","_onCloseSubmittedClicked","CLOSE_SUBMITTED","closeType","_confirmClose","closeReviewRequests","onDone","_showCloseResults","bind","successes","failures","numSuccesses","length","numFailures","$dlg","append","modalBox","title","buttons","val","onConfirmed","click","_onArchiveClicked","collection","archivedReviewRequests","_updateVisibility","addImmediately","_onUnarchiveClicked","removeImmediately","_onMuteClicked","mutedReviewRequests","visibilityFunc","_onUnmuteClicked","updateVisibility","DashboardView","DatagridPageView","actionsViewType"],"sources":["dashboardView.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * Displays and invokes actions for one or more review requests.\n *\n * This presents available actions to the user that can be performed\n * across one or more selected review requests in the dashboard.\n * The actions will appear in a layer above the sidebar.\n */\nconst DashboardActionsView = Backbone.View.extend({\n    template: _.template(dedent`\n        <p class=\"rb-c-drawer__summary\"></p>\n        <% if (!read_only) { %>\n         <div class=\"rb-c-drawer__actions\">\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-discard\">\n            <%= close_discarded_text %>\n           </li>\n           <li class=\"rb-c-drawer__action js-action-submit\">\n            <%= close_submitted_text %>\n           </li>\n          </ul>\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-archive\">\n            <%= archive_text %>\n           </li>\n           <% if (show_archived) { %>\n            <li class=\"rb-c-drawer__action\n                       js-action-unarchive\">\n             <%= unarchive_text %>\n            </li>\n           <% } %>\n          </ul>\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-mute\">\n            <%= mute_text %></a></li>\n           </li>\n           <% if (show_archived) { %>\n            <li class=\"rb-c-drawer__action js-action-unmute\">\n             <%= unmute_text %>\n            </li>\n           <% } %>\n          </ul>\n         </div>\n        <% } %>\n    `),\n\n    events: {\n        'click .js-action-discard': '_onCloseDiscardedClicked',\n        'click .js-action-submit': '_onCloseSubmittedClicked',\n        'click .js-action-archive': '_onArchiveClicked',\n        'click .js-action-unarchive': '_onUnarchiveClicked',\n        'click .js-action-mute': '_onMuteClicked',\n        'click .js-action-unmute': '_onUnmuteClicked',\n    },\n\n    /**\n     * Render the actions pane.\n     *\n     * Returns:\n     *     DashboardActionsView:\n     *     This object, for chaining.\n     */\n    render() {\n        const show_archived = (this.model.get('data') || {}).show_archived;\n\n        this.$el\n            .html(this.template({\n                close_discarded_text: gettext('<b>Close</b> Discarded'),\n                close_submitted_text: gettext('<b>Close</b> Submitted'),\n                archive_text: gettext('<b>Archive</b>'),\n                mute_text: gettext('<b>Mute</b>'),\n                read_only: RB.UserSession.instance.get('readOnly'),\n                unarchive_text: gettext('<b>Unarchive</b>'),\n                unmute_text: gettext('<b>Unmute</b>'),\n                show_archived: show_archived,\n            }));\n\n        const $summary = this.$('.rb-c-drawer__summary');\n\n        this.listenTo(this.model, 'change:count', (model, count) => {\n            $summary.text(interpolate(\n                ngettext('%s review request selected',\n                         '%s review requests selected',\n                         count),\n                [count]));\n        });\n\n        return this;\n    },\n\n    /**\n     * Handler for when the Close Discarded action is clicked.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onCloseDiscardedClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this._closeReviewRequests(RB.ReviewRequest.CLOSE_DISCARDED);\n    },\n\n    /**\n     * Handler for when the Close Submitted action is clicked.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onCloseSubmittedClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this._closeReviewRequests(RB.ReviewRequest.CLOSE_SUBMITTED);\n    },\n\n    /**\n     * Common code for confirming and closing review requests.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     closeType (string):\n     *         The close type to use.\n     */\n    _closeReviewRequests(closeType) {\n        this._confirmClose(() => {\n            this.model.closeReviewRequests({\n                closeType: closeType,\n                onDone: this._showCloseResults.bind(this),\n            });\n        });\n    },\n\n    /**\n     * Shows the results of the close operation in a dialog.\n     *\n     * This will say how many review requests have been closed successfully,\n     * and will also list the number that have failed (due to access\n     * permissions or other errors).\n     *\n     * Args:\n     *     successes (Array):\n     *         Array of successfully closed review requests.\n     *\n     *     failures (Array):\n     *         Array of unsuccessfully closed review requests.\n     */\n    _showCloseResults(successes, failures) {\n        const numSuccesses = successes.length;\n        const numFailures = failures.length;\n        const $dlg = $('<div/>')\n            .append($('<p/>')\n                .text(interpolate(\n                    ngettext('%s review request has been closed.',\n                             '%s review requests have been closed.',\n                             numSuccesses),\n                    [numSuccesses])));\n\n        if (numFailures > 0) {\n            $dlg\n                .append($('<p/>').text(\n                    interpolate(\n                        ngettext('%s review request could not be closed.',\n                                 '%s review requests could not be closed.',\n                                 numFailures),\n                        [numFailures])))\n                .append($('<p/>').text(\n                    gettext('You may not have permission to close them.')));\n        }\n\n        $dlg.modalBox({\n            title: gettext('Close review requests'),\n            buttons: [\n                $('<input type=\"button\"/>').val(gettext('Thanks!')),\n            ],\n        });\n    },\n\n    /**\n     * Prompt the user for confirmation before closing review requests.\n     *\n     * If the user confirms, the review requests will be closed.\n     *\n     * Args:\n     *     onConfirmed (function):\n     *         Function to call after the user confirms.\n     */\n    _confirmClose: function(onConfirmed) {\n        $('<div/>')\n            .append($('<p/>')\n                .text(gettext('If these review requests have unpublished drafts, they will be discarded.')))\n            .append($('<p/>')\n                .text(gettext('Are you sure you want to close these review requests?')))\n            .modalBox({\n                title: gettext('Close review requests'),\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Cancel')),\n\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Close Review Requests'))\n                        .click(onConfirmed.bind(this)),\n                ],\n            });\n    },\n\n    /**\n     * Handler for when the Archive action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onArchiveClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const collection = RB.UserSession.instance.archivedReviewRequests;\n        this._updateVisibility(collection.addImmediately.bind(collection));\n    },\n\n    /**\n     * Handler for when the Unarchive action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onUnarchiveClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const collection = RB.UserSession.instance.archivedReviewRequests;\n        this._updateVisibility(collection.removeImmediately.bind(collection));\n    },\n\n    /**\n     * Handler for when the Mute action is clicked.\n     *\n     * This will confirm that the user wants to mute the selected review\n     * requests. Once they confirm, the review requests will be archived.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onMuteClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const collection = RB.UserSession.instance.mutedReviewRequests;\n        const visibilityFunc = collection.addImmediately.bind(collection);\n\n        $('<div/>')\n            .append($('<p/>')\n                .text(gettext('Are you sure you want to mute these review requests?')))\n            .modalBox({\n                title: gettext('Mute review requests'),\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Cancel')),\n\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Mute Review Requests'))\n                        .click(this._updateVisibility.bind(\n                            this, visibilityFunc)),\n                ],\n            });\n    },\n\n    /**\n     * Handler for when the Unmute action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onUnmuteClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const collection = RB.UserSession.instance.mutedReviewRequests;\n\n        this._updateVisibility(collection.removeImmediately.bind(collection));\n    },\n\n    /**\n     * Common code for archiving/muting review requests.\n     *\n     * Args:\n     *     visibilityFunc (function):\n     *         Function to call to update the visibility of an individual\n     *         review request.\n     */\n    _updateVisibility(visibilityFunc) {\n        this.model.updateVisibility(visibilityFunc);\n    },\n});\n\n\n/**\n * Manages the UI for the dashboard.\n *\n * This renders the dashboard, handles events, and allows for multi-row\n * actions (like closing review requests).\n */\nRB.DashboardView = RB.DatagridPageView.extend({\n    actionsViewType: DashboardActionsView,\n});\n\n\n})();\n"],"mappings":"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"}