{"version":3,"file":"textEditorView.js","names":["CodeMirror","defineSimpleMode","start","regex","token","next","defineMIME","CodeMirrorWrapper","Backbone","View","extend","initialize","options","codeMirrorOptions","mode","highlightFormatting","name","tokenTypeOverrides","code","list1","list2","list3","theme","lineWrapping","electricChars","styleSelectedText","extraKeys","autoSize","viewportMargin","Infinity","_codeMirror","parentEl","setElement","getWrapperElement","minHeight","undefined","$el","css","on","triggerHandler","trigger","isDirty","initialValue","getText","setText","text","setValue","getValue","insertLine","position","hasFocus","cursor","getCursor","line","getLine","Pos","length","endsWith","lastLine","replaceRange","getClientHeight","getScrollInfo","clientHeight","setSize","width","height","refresh","focus","TextAreaWrapper","tagName","autoSizeTextArea","appendTo","value","el","is","selectionEnd","endOfLine","indexOf","slice","innerWidth","innerHeight","RB","TextEditorView","className","defaultOptions","events","_files","_editor","_prevClientHeight","_","defaults","richText","_dropTarget","_value","_richTextDirty","bindRichText","bindRichTextAttr","model","attrName","UserSession","instance","get","setRichText","render","addClass","_hideEditor","_showEditor","listenTo","bindRichTextCheckbox","$checkbox","prop","bindRichTextVisibility","setVisible","show","hide","_onRemove","DnDUploader","unregisterDropTarget","EditorCls","registerDropTarget","_uploadImage","bind","throttle","remove","empty","_isImage","file","type","split","filename","toLowerCase","some","extension","userFileAttachment","UserFileAttachment","caption","save","success","set","error","response","alert","errorText","getInlineEditorOptions","textEditor","matchHeight","multiline","createMultilineField","editor","$editor","element","origRichText","one","$buttons","inlineEditor","$span","$","attr","id","uniqueId","append","$markdownRef","href","MANUAL_URL","target","data","setFieldValue","getFieldValue","isFieldDirty","getFromInlineEditor"],"sources":["textEditorView.es6.js"],"sourcesContent":["(function() {\n\n\n/*\n * Define a CodeMirror mode we can plug in as the default below.\n *\n * This mode won't have any special highlighting, but will avoid the Markdown\n * mode's default behavior of rendering \"plain/text\" code (the default) the\n * same way as literal code, which we really want to avoid.\n */\nCodeMirror.defineSimpleMode('rb-text-plain', {\n    start: [\n        {\n            regex: /.*/,\n            token: 'rb-cm-codeblock-plain',\n            next: 'start',\n        },\n    ],\n});\n\nCodeMirror.defineMIME('text/plain', 'rb-text-plain');\n\n\n/**\n * Wraps CodeMirror, providing a standard interface for TextEditorView's usage.\n */\nconst CodeMirrorWrapper = Backbone.View.extend({\n    /**\n     * Initialize CodeMirrorWrapper.\n     *\n     * This will set up CodeMirror based on the objects, add it to the parent,\n     * and begin listening to events.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the wrapper.\n     *\n     * Option Args:\n     *     autoSize (boolean):\n     *         Whether the editor should automatically resize itself to fit its\n     *         container.\n     *\n     *     parentEl (Element):\n     *        The parent element for the editor.\n     *\n     *    minHeight (number):\n     *        The minimum vertical size of the editor.\n     */\n    initialize(options) {\n        this.options = options;\n\n        const codeMirrorOptions = {\n            mode: {\n                highlightFormatting: true,\n                name: 'gfm',\n\n                /*\n                 * The following token type overrides will be prefixed with\n                 * ``cm-`` when used as classes.\n                 */\n                tokenTypeOverrides: {\n                    code: 'rb-markdown-code',\n                    list1: 'rb-markdown-list1',\n                    list2: 'rb-markdown-list2',\n                    list3: 'rb-markdown-list3'\n                }\n            },\n            theme: 'rb default',\n            lineWrapping: true,\n            electricChars: false,\n            styleSelectedText: true,\n            extraKeys: {\n                'Home': 'goLineLeft',\n                'End': 'goLineRight',\n                'Enter': 'newlineAndIndentContinueMarkdownList',\n                'Shift-Tab': false,\n                'Tab': false\n            }\n        };\n\n        if (options.autoSize) {\n            codeMirrorOptions.viewportMargin = Infinity;\n        }\n\n        this._codeMirror = new CodeMirror(options.parentEl,\n                                          codeMirrorOptions);\n\n        this.setElement(this._codeMirror.getWrapperElement());\n\n        if (this.options.minHeight !== undefined) {\n            this.$el.css('min-height', this.options.minHeight);\n        }\n\n        this._codeMirror.on('viewportChange',\n                            () => this.$el.triggerHandler('resize'));\n        this._codeMirror.on('change', () => this.trigger('change'));\n    },\n\n    /**\n     * Return whether or not the editor's contents have changed.\n     *\n     * Args:\n     *     initialValue (string):\n     *         The initial value of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not the editor is dirty.\n     */\n    isDirty(initialValue) {\n        /*\n         * We cannot trust codeMirror's isClean() method.\n         *\n         * It is also possible for initialValue to be undefined, so we use an\n         * empty string in that case instead.\n         */\n        return (initialValue || '') !== this.getText();\n    },\n\n    /**\n     * Set the text in the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The new text for the editor.\n     */\n    setText(text) {\n        this._codeMirror.setValue(text);\n    },\n\n    /**\n     * Return the text in the editor.\n     *\n     * Returns:\n     *     string:\n     *     The current contents of the editor.\n     */\n    getText() {\n        return this._codeMirror.getValue();\n    },\n\n    /**\n     * Insert a new line of text into the editor.\n     *\n     * If the editor has focus, insert at the cursor position. Otherwise,\n     * insert at the end.\n     *\n     * Args:\n     *     text (string):\n     *         The text to insert.\n     */\n    insertLine(text) {\n        let position;\n\n        if (this._codeMirror.hasFocus()) {\n            const cursor = this._codeMirror.getCursor();\n            const line = this._codeMirror.getLine(cursor.line);\n            position = CodeMirror.Pos(cursor.line, line.length - 1);\n\n            if (line.length !== 0) {\n                /*\n                 * If the current line has some content, insert the new text on\n                 * the line after it.\n                 */\n                text = '\\n' + text;\n            }\n\n            if (!text.endsWith('\\n')) {\n                text += '\\n';\n            }\n        } else {\n            position = CodeMirror.Pos(this._codeMirror.lastLine());\n            text = '\\n' + text;\n        }\n\n        this._codeMirror.replaceRange(text, position);\n    },\n\n    /**\n     * Return the full client height of the content.\n     *\n     * Returns:\n     *     number:\n     *     The client height of the editor.\n     */\n    getClientHeight() {\n        return this._codeMirror.getScrollInfo().clientHeight;\n    },\n\n    /**\n     * Set the size of the editor.\n     *\n     * Args:\n     *     width (number):\n     *         The new width of the editor.\n     *\n     *     height (number):\n     *         The new height of the editor.\n     */\n    setSize(width, height) {\n        this._codeMirror.setSize(width, height);\n        this._codeMirror.refresh();\n    },\n\n    /**\n     * Focus the editor.\n     */\n    focus() {\n        this._codeMirror.focus();\n    }\n});\n\n\n/**\n * Wraps <textarea>, providing a standard interface for TextEditorView's usage.\n */\nconst TextAreaWrapper = Backbone.View.extend({\n    tagName: 'textarea',\n\n    /*\n     * Initialize TextAreaWrapper.\n     *\n     * This will set up the element based on the provided options, begin\n     * listening for events, and add the element to the parent.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the wrapper.\n     *\n     * Option Args:\n     *     autoSize (boolean):\n     *         Whether the editor should automatically resize itself to fit its\n     *         container.\n     *\n     *     parentEl (Element):\n     *        The parent element for the editor.\n     *\n     *    minHeight (number):\n     *        The minimum vertical size of the editor.\n     */\n    initialize(options) {\n        this.options = options;\n\n        if (options.autoSize) {\n            this.$el.autoSizeTextArea();\n        }\n\n        this.$el\n            .css('width', '100%')\n            .appendTo(options.parentEl)\n            .on('change keydown keyup keypress', () => this.trigger('change'));\n\n        if (options.minHeight !== undefined) {\n            if (options.autoSize) {\n                this.$el.autoSizeTextArea('setMinHeight',\n                                          options.minHeight);\n            } else {\n                this.$el.css('min-height', this.options.minHeight);\n            }\n        }\n    },\n\n    /**\n     * Return whether or not the editor's contents have changed.\n     *\n     * Args:\n     *     initialValue (string):\n     *         The initial value of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not the editor is dirty.\n     */\n    isDirty(initialValue) {\n        const value = this.el.value || '';\n\n        return value.length !== initialValue.length ||\n               value !== initialValue;\n    },\n\n    /**\n     * Set the text in the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The new text for the editor.\n     */\n    setText(text) {\n        this.el.value = text;\n\n        if (this.options.autoSize) {\n            this.$el.autoSizeTextArea('autoSize');\n        }\n    },\n\n    /**\n     * Return the text in the editor.\n     *\n     * Returns:\n     *     string:\n     *     The current contents of the editor.\n     */\n    getText() {\n        return this.el.value;\n    },\n\n    /**\n     * Insert a new line of text into the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The text to insert.\n     */\n    insertLine(text) {\n        if (this.$el.is(':focus')) {\n            const value = this.el.value;\n            const cursor = this.el.selectionEnd;\n            const endOfLine = value.indexOf('\\n', cursor);\n\n            if (endOfLine === -1) {\n                // The cursor is on the last line.\n                this.el.value += '\\n' + text;\n            } else {\n                // The cursor is in the middle of the text.\n                this.el.value = (value.slice(0, endOfLine + 1) + '\\n' + text +\n                                 '\\n' + value.slice(endOfLine));\n            }\n        } else {\n            this.el.value += '\\n' + text;\n        }\n    },\n\n    /**\n     * Return the full client height of the content.\n     *\n     * Returns:\n     *     number:\n     *     The client height of the editor.\n     */\n    getClientHeight() {\n        return this.el.clientHeight;\n    },\n\n    /**\n     * Set the size of the editor.\n     *\n     * Args:\n     *     width (number):\n     *         The new width of the editor.\n     *\n     *     height (number):\n     *         The new height of the editor.\n     */\n    setSize(width, height) {\n        if (width !== null) {\n            this.$el.innerWidth(width);\n        }\n\n        if (height !== null) {\n            if (height === 'auto' && this.options.autoSize) {\n                this.$el.autoSizeTextArea('autoSize', true);\n            } else {\n                this.$el.innerHeight(height);\n            }\n        }\n    },\n\n    /**\n     * Focus the editor.\n     */\n    focus() {\n        this.$el.focus();\n    }\n});\n\n\n/**\n * Provides an editor for editing plain or Markdown text.\n *\n * The editor allows for switching between plain or Markdown text on-the-fly.\n *\n * When editing plain text, this uses a standard textarea widget.\n *\n * When editing Markdown, this makes use of CodeMirror. All Markdown content\n * will be formatted as the user types, making it easier to notice when a\n * stray _ or ` will cause Markdown-specific behavior.\n */\nRB.TextEditorView = Backbone.View.extend({\n    className: 'text-editor',\n\n    defaultOptions: {\n        autoSize: true,\n        minHeight: 70\n    },\n\n    events: {\n        'focus': 'focus',\n        'remove': '_onRemove'\n    },\n\n    /**\n     * Initialize the view with any provided options.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     richText (boolean):\n     *         Whether the editor is using rich text (Markdown).\n     *\n     *     text (string):\n     *         The initial text.\n     *\n     *     bindRichText (object):\n     *         An object with ``model`` and ``attrName`` keys, for when the\n     *         rich text should be bound to an attribute on another model.\n     */\n    initialize(options={}) {\n        this._files = [];\n        this._editor = null;\n        this._prevClientHeight = null;\n\n        this.options = _.defaults(options, this.defaultOptions);\n        this.richText = !!this.options.richText;\n        this._dropTarget = null;\n        this._value = this.options.text || '';\n        this._richTextDirty = false;\n\n        if (this.options.bindRichText) {\n            this.bindRichTextAttr(this.options.bindRichText.model,\n                                  this.options.bindRichText.attrName);\n        }\n\n        /*\n         * If the user is defaulting to rich text, we're going to want to\n         * show the rich text UI by default, even if any bound rich text\n         * flag is set to False.\n         *\n         * This requires cooperation with the template or API results\n         * that end up backing this TextEditor. The expectation is that\n         * those will be providing escaped data for any plain text, if\n         * the user's set to use rich text by default. If this expectation\n         * holds, the user will have a consistent experience for any new\n         * text fields.\n         */\n        if (RB.UserSession.instance.get('defaultUseRichText')) {\n            this.setRichText(true);\n        }\n    },\n\n    /**\n     * Render the text editor.\n     *\n     * This will set the class name on the element, ensuring we have a\n     * standard set of styles, even if this editor is bound to an existing\n     * element.\n     *\n     * Returns:\n     *     RB.TextEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.addClass(this.className);\n\n        return this;\n    },\n\n    /**\n     * Set whether or not rich text (Markdown) is to be used.\n     *\n     * This can dynamically change the text editor to work in plain text\n     * or Markdown.\n     *\n     * Args:\n     *     richText (boolean):\n     *         Whether the editor should use rich text.\n     */\n    setRichText(richText) {\n        if (richText === this.richText) {\n            return;\n        }\n\n        if (this._editor) {\n            this._hideEditor();\n            this.richText = richText;\n            this._showEditor();\n\n            this._richTextDirty = true;\n\n            this.$el.triggerHandler('resize');\n        } else {\n            this.richText = richText;\n        }\n\n        this.trigger('change:richText', richText);\n        this.trigger('change');\n    },\n\n    /**\n     * Bind a richText attribute on a model to the mode on this editor.\n     *\n     * This editor's richText setting will stay in sync with the attribute\n     * on the given mode.\n     *\n     * Args:\n     *     model (Backbone.Model):\n     *         A model to bind to.\n     *\n     *     attrName (string):\n     *         The name of the attribute to bind.\n     */\n    bindRichTextAttr(model, attrName) {\n        this.setRichText(model.get(attrName));\n\n        this.listenTo(model, `change:${attrName}`,\n                      (model, value) => this.setRichText(value));\n    },\n\n    /**\n     * Bind an Enable Markdown checkbox to this text editor.\n     *\n     * The checkbox will initially be set to the value of the editor's\n     * richText property. Toggling the checkbox will then manipulate that\n     * property.\n     *\n     * Args:\n     *     $checkbox (jQuery):\n     *         The checkbox to bind.\n     */\n    bindRichTextCheckbox($checkbox) {\n        $checkbox\n            .prop('checked', this.richText)\n            .on('change', () => this.setRichText($checkbox.prop('checked')));\n\n        this.on('change:richText',\n                () => $checkbox.prop('checked', this.richText));\n    },\n\n    /**\n     * Bind the visibility of an element to the richText property.\n     *\n     * If richText ist true, the element will be shown. Otherwise, it\n     * will be hidden.\n     *\n     * Args:\n     *     $el (jQuery):\n     *         The element to show when richText is true.\n     */\n    bindRichTextVisibility($el) {\n        $el.setVisible(this.richText);\n\n        this.on('change:richText', () => $el.setVisible(this.richText));\n    },\n\n    /**\n     * Return whether or not the editor's contents have changed.\n     *\n     * Args:\n     *     initialValue (string):\n     *         The initial value of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not the editor is dirty.\n     */\n    isDirty(initialValue) {\n        return this._editor !== null &&\n               (this._richTextDirty ||\n                this._editor.isDirty(initialValue || ''));\n    },\n\n    /**\n     * Set the text in the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The new text for the editor.\n     */\n    setText(text) {\n        if (text !== this.getText()) {\n            if (this._editor) {\n                this._editor.setText(text);\n            } else {\n                this._value = text;\n            }\n        }\n    },\n\n    /**\n     * Return the text in the editor.\n     *\n     * Returns:\n     *     string:\n     *     The current contents of the editor.\n     */\n    getText() {\n        return this._editor ? this._editor.getText() : this._value;\n    },\n\n    /**\n     * Insert a new line of text into the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The text to insert.\n     */\n    insertLine(text) {\n        if (this._editor) {\n            this._editor.insertLine(text);\n        } else {\n            if (this._value.endsWith('\\n')) {\n                this._value += text + '\\n';\n            } else {\n                this._value += '\\n' + text;\n            }\n        }\n    },\n\n    /**\n     * Set the size of the editor.\n     *\n     * Args:\n     *     width (number):\n     *         The new width of the editor.\n     *\n     *     height (number):\n     *         The new height of the editor.\n     */\n    setSize(width, height) {\n        if (this._editor) {\n            this._editor.setSize(width, height);\n        }\n    },\n\n    /**\n     * Show the editor.\n     */\n    show() {\n        this.$el.show();\n        this._showEditor();\n    },\n\n    /**\n     * Hide the editor.\n     */\n    hide() {\n        this._hideEditor();\n        this.$el.hide();\n    },\n\n    /**\n     * Focus the editor.\n     */\n    focus() {\n        if (this._editor) {\n            this._editor.focus();\n        }\n    },\n\n    /**\n     * Handler for the remove event.\n     *\n     * Disables the drag-and-drop overlay.\n     */\n    _onRemove() {\n        RB.DnDUploader.instance.unregisterDropTarget(this.$el);\n    },\n\n    /**\n     * Show the actual editor wrapper.\n     *\n     * Any stored text will be transferred to the editor, and the editor\n     * will take control over all operations.\n     */\n    _showEditor() {\n        const EditorCls = this.richText ? CodeMirrorWrapper : TextAreaWrapper;\n\n        if (this.richText) {\n            RB.DnDUploader.instance.registerDropTarget(\n                this.$el, gettext('Drop to add an image'),\n                this._uploadImage.bind(this));\n        }\n\n        this._editor = new EditorCls({\n            parentEl: this.el,\n            autoSize: this.options.autoSize,\n            minHeight: this.options.minHeight\n        });\n\n        this._editor.setText(this._value);\n        this._value = '';\n        this._richTextDirty = false;\n        this._prevClientHeight = null;\n\n        this._editor.$el.on(\n            'resize',\n            _.throttle(() => this.$el.triggerHandler('resize'), 250));\n\n        this.listenTo(this._editor, 'change', _.throttle(() => {\n            /*\n             * Make sure that the editor wasn't closed before the throttled\n             * handler was reached.\n             */\n            if (this._editor === null) {\n                return;\n            }\n\n            const clientHeight = this._editor.getClientHeight();\n\n            if (clientHeight !== this._prevClientHeight) {\n                this._prevClientHeight = clientHeight;\n                this.$el.triggerHandler('resize');\n            }\n\n            this.trigger('change');\n        }, 500));\n\n        this.focus();\n    },\n\n    /**\n     * Hide the actual editor wrapper.\n     *\n     * The last value from the editor will be stored for later retrieval.\n     */\n    _hideEditor() {\n        RB.DnDUploader.instance.unregisterDropTarget(this.$el);\n\n        if (this._editor) {\n            this._value = this._editor.getText();\n            this._richTextDirty = false;\n            this._editor.remove();\n            this._editor = null;\n\n            this.$el.empty();\n        }\n    },\n\n    /**\n     * Return whether or not a given file is an image.\n     *\n     * Args:\n     *     file (File):\n     *         The file to check.\n     *\n     * Returns:\n     *     boolean:\n     *     True if the given file appears to be an image.\n     */\n    _isImage(file) {\n        if (file.type) {\n            return (file.type.split('/')[0] === 'image');\n        }\n\n        const filename = file.name.toLowerCase();\n        return ['.jpeg', '.jpg', '.png', '.gif', '.bmp', '.tiff', '.svg'].some(\n            extension => filename.endsWith(extension));\n    },\n\n    /**\n     * Upload the image and append an image link to the editor's contents.\n     *\n     * Creates an instance of UserFileAttachment and saves it without the file,\n     * then updates the model with the file. This allows the file to be\n     * uploaded asynchronously after we get the link that is generated when the\n     * UserFileAttachment is created.\n     *\n     * Args:\n     *     file (File):\n     *         The image file to upload.\n     */\n    _uploadImage(file) {\n        if (!this._isImage(file)) {\n            return;\n        }\n\n        const userFileAttachment = new RB.UserFileAttachment({\n            caption: file.name,\n        });\n\n        userFileAttachment.save({\n            success: () => {\n                this.insertLine(\n                    `![Image](${userFileAttachment.get('downloadURL')})`);\n\n                userFileAttachment.set('file', file);\n                userFileAttachment.save({\n                    error: (model, response) => alert(response.errorText)\n                });\n            },\n            error: (model, response) => alert(response.errorText)\n        });\n    }\n}, {\n    /**\n     * Return options used to display a TextEditorView in an inlineEditor.\n     *\n     * Args:\n     *     options (object):\n     *         Options to be passed on to the TextEditorView.\n     *\n     * Returns:\n     *     object:\n     *     An options object to be used with an inlineEditor. The resulting\n     *     inlineEditor will make use of the TextEditorView instead of its\n     *     default textarea.\n     */\n    getInlineEditorOptions(options) {\n        let textEditor;\n\n        return {\n            matchHeight: false,\n            multiline: true,\n\n            createMultilineField(editor) {\n                const $editor = editor.element;\n                let origRichText;\n\n                textEditor = new RB.TextEditorView(options);\n                textEditor.render();\n\n                $editor.one('beginEdit', function() {\n                    const $buttons = $editor.inlineEditor('buttons');\n                    const $span = $('<span class=\"enable-markdown\" />');\n\n                    const $checkbox = $('<input/>')\n                        .attr({\n                            id: _.uniqueId('markdown_check'),\n                            type: 'checkbox'\n                        })\n                        .appendTo($span);\n                    textEditor.bindRichTextCheckbox($checkbox);\n\n                    $span.append($('<label/>')\n                        .attr('for', $checkbox[0].id)\n                        .text(gettext('Enable Markdown')));\n\n                    $buttons.append($span);\n\n                    const $markdownRef = $('<a/>')\n                        .addClass('markdown-info')\n                        .attr({\n                            href: MANUAL_URL + 'users/markdown/',\n                            target: '_blank'\n                        })\n                        .text(gettext('Markdown Reference'))\n                        .setVisible(textEditor.richText)\n                        .appendTo($buttons);\n                    textEditor.bindRichTextVisibility($markdownRef);\n                });\n\n                $editor.on('beginEdit', function() {\n                    textEditor._showEditor();\n                    origRichText = textEditor.richText;\n                });\n\n                $editor.on('cancel', function() {\n                    textEditor._hideEditor();\n                    textEditor.setRichText(origRichText);\n                });\n\n                $editor.on('complete', function() {\n                    textEditor._hideEditor();\n                });\n\n                textEditor.$el.data('text-editor', textEditor);\n\n                return textEditor.$el;\n            },\n\n            setFieldValue(editor, value) {\n                textEditor.setText(value || '');\n            },\n\n            getFieldValue() {\n                return textEditor.getText();\n            },\n\n            isFieldDirty(editor, initialValue) {\n                return textEditor.isDirty(initialValue);\n            }\n        };\n    },\n\n    /**\n     * Return the TextEditorView for an inlineEditor element.\n     *\n     * Returns:\n     *     TextEditorView:\n     *     The view corresponding to the editor.\n     */\n    getFromInlineEditor($editor) {\n        return $editor.inlineEditor('field').data('text-editor');\n    }\n});\n\n\n})();\n"],"mappings":"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"}