'''汉化通用函数'''
导入 正则

套路 _关键词参数中转英(中文关键词, 关键词字典, 值字典=空):
    '''将关键词参数 (**关键词参数/**kwags 之类) 中的汉化键/值转换回英文键/值'''
    英文关键词 = {}
    如果 值字典 是 空:
        取 键, 值 于 中文关键词.项々():
            英文关键词[关键词字典.获取(键, 键)] = 值
    否则:
        取 键, 值 于 中文关键词.项々():
            如果 是实例(值, 字符串型):
                英文关键词[关键词字典.获取(键, 键)] = 值字典.获取(值, 值)
            否则:
                英文关键词[关键词字典.获取(键, 键)] = 值
    返回 英文关键词

套路 _星号参数中转英(参数, 参数字典):
    '''将星号参数 (*参数/*args) 中的中文转换回英文'''
    如果 参数:
        参数列表 = []
        取 元素 于 参数:
            元素 = 参数字典.获取(元素, 元素)
            参数列表.追加(元素)
        参数 = 元组型(参数列表)
    返回 参数

套路 _类属性翻译(**中英属性):
    """将汉化类的中文属性名翻译回原来的英文属性名.
    不适用于属性值会动态改变的情况.
    """
    套路 包装盒(某类):
        取 中文属性, 英文属性 于 中英属性.项々():
            如果 有属性(某类, 中文属性):
                设属性(某类, 英文属性, 某类.__dict__[中文属性])
                # 删属性(某类, 中文属性)
        返回 某类
    返回 包装盒

套路 _反向注入(中文类名, 英文类名):
    """将汉化类中的汉化属性(包括方法)反向注入到相应的英文类中.
    这是猴子补丁汉化法的改进版, 有助于保持模块的优雅.
    """
    属性列表 = dir(中文类名)
    取 属性名 于 属性列表:
        如果 非 属性名.开头是('__') 且 正则.搜索('[\u4e00-\u9fa5]', 属性名):
            设属性(英文类名, 属性名, 取属性(中文类名, 属性名))
